{"version":3,"sources":["modeContext/ModeContext.js","components/library/heading/DumbComponent.js","components/library/heading/StyledComponent.js","components/library/heading/ElementCreator.js","components/library/paragraph/DumbComponent.js","components/library/paragraph/StyledComponent.js","components/library/paragraph/ElementCreator.js","components/library/paragraphImage/DumbComponent.js","components/library/image/DumbComponent.js","components/library/paragraphImage/StyledComponent.js","components/library/paragraphImage/ElementCreator.js","components/library/container/DumbComponent.js","components/library/container/StyledComponent.js","components/library/container/ElementCreator.js","modeContext/ModeProvider.js","firebase/firebase.js","App.js","reportWebVitals.js","index.js"],"names":["ModeContext","React","createContext","DumbComponent","props","classes","makeStyles","theme","myClassName","className","useStyles","classeForResp","isResponsiveFont","Fragment","Box","component","data","variant","textChildren","dangerouslySetInnerHTML","__html","renderText","StyledComponent","console","log","useState","top","paddingTop","left","paddingLeft","bottom","paddingBottom","right","paddingRight","padding","setPadding","marginTop","marginLeft","marginBottom","marginRight","margin","setMargin","color","setColor","backgroundColor","setBackgroundColor","textAlign","setTextAlign","display","fontSize","setFontSize","fontWeight","setFontWeight","lineHeight","setLineHeight","responseFont","setIsResponsiveFont","text","textInDumb","setTextInDumb","isDisableBtn","setIsDisableBtn","open","setOpen","inputNumber","flexGrow","width","inputGroup","border","maxWidth","btnSave","position","zIndex","tooltip","height","opacity","dumbItemContainer","outline","transition","transitions","duration","shorter","easing","easeIn","boxShadow","shadows","cursor","outlineColor","palette","error","light","dumbItem","dumbItemDelete","menu","maxHeight","minHeight","overflowY","menuTitle","alignItems","justifyContent","borderBottom","showInput","dataNew","handlePadding","e","direction","newPadding","Object","assign","Number","target","value","handleMargin","newMargin","Grid","container","style","Modal","aria-labelledby","onClose","DialogContent","handle","cancel","Typography","id","mb","TextField","type","label","fullWidth","onChange","focus","FormControlLabel","control","Switch","checked","name","Tooltip","title","IconButton","InfoOutlined","flexDirection","size","gutterBottom","triangle","colors","onChangeComplete","newColor","hex","FormControl","InputLabel","Select","labelId","MenuItem","Button","disabled","onClick","sentData","reSaveChildren","item","xs","event","aria-controls","aria-haspopup","prop","aria-label","removeItem","DeleteOutline","ElementCreator","modeDev","useContext","imageStyle","image","borderColor","setBorderColor","borderStyle","setBorderStyle","borderWidth","setBorderWidth","borderRadius","setBorderRadius","setDisplay","imageAccordion","imagePreview","primary","multiline","rowsMax","FormGroup","row","imageClassName","url","placement","src","titleImg","alt","imageTitle","setImageTitle","imagePlacement","setImagePlacement","imageWidth","setImageWidth","imageHeight","setImageHeight","imageBorderColor","setImageBorderColor","imageBorderStyle","setImageBorderStyle","imageBorderWidth","setImageBorderWidth","imageBorderRadius","setImageBorderRadius","float","imageFloat","setImageFloat","imageMargin","setImageMargin","handleImageMargin","Accordion","AccordionSummary","expandIcon","px","pt","pb","htmlFor","alert","ml","mt","Container","settings","fixed","disableGutters","innerContainer","children","map","ContainerElement","shadow","setShadow","setChildren","settingGutter","setSettingGutter","settingFixed","setSettingFixed","settingMaxWidth","setSettingMaxWidth","settingInnerContainer","setSettingInnerContainer","anchorEl","setAnchorEl","propsSettings","btnDrawerStyle","borderTopLeftRadius","borderTopRightRadius","minWidth","containerWrapper","outlineOffset","main","mtView","shortest","mbView","settingsItem","toggleDrawer","handleHeadingMenuClose","addHeading","a","newChildren","slice","newItem","libraryHeading","uuid","libraryParagraph","libraryParagraphImage","push","reSaveContainer","slicedChild","forEach","key","window","confirm","filtered","filter","Drawer","anchor","removeContainer","mr","clone","currentTarget","Menu","keepMounted","Boolean","reSaveContainerStyleSettings","reSaveContainerSettings","ModeProvider","state","Provider","this","Component","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","dataJson","firebaseApp","firebase","initializeApp","db","firestore","collection","doc","set","App","setData","items","setItems","useEffect","fetchData","pageRef","get","exists","childrenContainer","newData","keys","elem","update","addContainer","newItems","newCont","ContainerLayout","CssBaseline","AppBar","indigo","Toolbar","mx","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04a550bf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ModeContext = React.createContext()\r\n\r\nexport default ModeContext","import React from 'react'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Box } from '@material-ui/core';\r\n// import { Typography } from '@material-ui/core';\r\n\r\nfunction DumbComponent(props) {\r\n  \r\n    const useStyles = makeStyles((theme) => ({\r\n        myClassName: props.className \r\n      }));\r\n    const classes = useStyles();\r\n \r\n    \r\n    const classeForResp = props.isResponsiveFont ? 'resposive-font-size' : '' \r\n\r\n    const renderText = () => {\r\n        if(props.textChildren) { \r\n            return  <span dangerouslySetInnerHTML={{__html: props.textChildren}}></span>\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <React.Fragment>\r\n             <Box \r\n                component={props.data.variant} \r\n                className={`${classes.myClassName} ${classeForResp}`} \r\n            >\r\n                { renderText() } \r\n            </Box>\r\n\r\n\r\n            {/* <Typography variant={props.data.variant} className={[classes.myClassName, classeForResp]} >\r\n                { \r\n                    props.textChildren\r\n                }\r\n            </Typography> */} \r\n            \r\n\r\n            {/* {  \r\n                React.createElement(`${props.data.variant}`, { className: `${classes.myClassName} ${classeForResp}` }, renderText() ) \r\n            } */}\r\n        </React.Fragment>\r\n    )\r\n} \r\n\r\nexport default DumbComponent\r\n","import React from 'react'  \r\n\r\nimport Draggable from 'react-draggable';\r\nimport { TwitterPicker } from 'react-color';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { \r\n    FormControlLabel, \r\n    Switch,\r\n    Grid, \r\n    TextField, \r\n    Button, \r\n    FormControl,\r\n    InputLabel,\r\n    Select, \r\n    MenuItem,  \r\n    IconButton, \r\n    Typography,\r\n    Modal,\r\n    Box,\r\n    Tooltip,\r\n    DialogContent\r\n\r\n} from '@material-ui/core'\r\n\r\nimport DumbComponent from \"./DumbComponent\" \r\n \r\n\r\nimport OpenWithIcon from '@material-ui/icons/OpenWith';\r\nimport { DeleteOutline, InfoOutlined } from '@material-ui/icons';\r\n\r\nconst StyledComponent = (props) => {  \r\n\r\n    console.log('styled heading work')\r\n\r\n    const [padding, setPadding] = React.useState({ \r\n        top:  props.data.classes.paddingTop , \r\n        left:  props.data.classes.paddingLeft ,\r\n        bottom: props.data.classes.paddingBottom , \r\n        right: props.data.classes.paddingRight \r\n    })\r\n    const [margin, setMargin] = React.useState({\r\n        top:  props.data.classes.marginTop , \r\n        left:  props.data.classes.marginLeft ,\r\n        bottom: props.data.classes.marginBottom , \r\n        right: props.data.classes.marginRight \r\n    })\r\n    \r\n    const [color, setColor] = React.useState(props.data.classes.color || 'inherit')\r\n    const [backgroundColor, setBackgroundColor] = React.useState(props.data.classes.backgroundColor ||  'transperent')\r\n    const [textAlign, setTextAlign] = React.useState(props.data.classes.textAlign ||  'left')\r\n    const [display, setDisplay] = React.useState(props.data.classes.display ||  'block')\r\n    const [fontSize, setFontSize] = React.useState(props.data.classes.fontSize ||  16)\r\n    const [fontWeight, setFontWeight] = React.useState(props.data.classes.fontWeight ||  400)\r\n    const [lineHeight, setLineHeight] = React.useState(props.data.classes.lineHeight ||  1.38)\r\n\r\n    const [isResponsiveFont, setIsResponsiveFont] = React.useState(props.data.responseFont || false)\r\n\r\n    const [textInDumb, setTextInDumb] = React.useState(props.data.text)\r\n    const [isDisableBtn, setIsDisableBtn] = React.useState(true) \r\n\r\n    \r\n    const [open, setOpen] = React.useState(false);\r\n         \r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        inputNumber: {\r\n            flexGrow: 1, \r\n            margin: 5, \r\n            width: \"100%\"\r\n        }, \r\n        inputGroup: {\r\n            border: \"1px solid #f5f5f5\", \r\n            padding: 3, \r\n            inputNumber: { \r\n                maxWidth: \"100%\"\r\n\r\n            }\r\n        }, \r\n        btnSave: { \r\n            position: 'sticky', \r\n            zIndex: theme.zIndex.tooltip,\r\n            bottom: 0, \r\n            left: 0, \r\n            right: 0,\r\n            height: 80, \r\n            backgroundColor: '#fff', \r\n            \r\n            '&>button': {\r\n                marginTop: 20, \r\n                marginBottom: 30, \r\n                marginLeft: 5, \r\n                opacity: 1,  \r\n                paddingLeft: 40, \r\n                paddingRight: 40\r\n            }\r\n        },\r\n        dumbItemContainer: { \r\n            position: 'relative', \r\n            outline: '1px solid #f000',\r\n            transition: `${theme.transitions.duration.shorter}ms ${theme.transitions.easing.easeIn} outline`,\r\n            '&:hover' : {   \r\n                boxShadow: theme.shadows[10], \r\n                cursor: 'pointer',\r\n                outlineColor: `${theme.palette.error.light}`,\r\n                '&>button' : { \r\n                    opacity: 1\r\n                }\r\n            }, \r\n        },\r\n        dumbItem: { \r\n            position: 'relative',\r\n            transition: \"300ms cubic-bezier(0.4, 0, 1, 1)\",\r\n            \r\n        }, \r\n        dumbItemDelete : { \r\n            opacity: 0,\r\n            position: 'absolute', \r\n            zIndex: 9, \r\n            top: 3, \r\n            right: 5,\r\n            backgroundColor: '#fff',\r\n            transition: \"100ms cubic-bezier(0.4, 0, 1, 1)\",\r\n            '&:hover' : { \r\n                backgroundColor: theme.palette.error.light\r\n            }\r\n        }, \r\n         \r\n        menu: {    \r\n            position: \"absolute\", \r\n            left: \"calc(50% - 200px)\",\r\n            top: 50, \r\n            backgroundColor: '#fff',\r\n            padding: 10 , \r\n            paddingBottom: 0, \r\n            maxWidth: 400,  \r\n            width: 400,\r\n            maxHeight: 'calc(100vh - 100px)', \r\n            minHeight: 500,\r\n            overflowY: 'scroll'\r\n        },\r\n        menuTitle: {\r\n            display: 'flex', \r\n            alignItems: 'center', \r\n            justifyContent: 'space-between', \r\n            fontSize: 14, \r\n            borderBottom: '1px solid #eaeaea',\r\n            paddingBottom: 6,\r\n            marginBottom: 10, \r\n            cursor: 'move'\r\n        },\r\n        showInput: {\r\n        }\r\n        \r\n      }));\r\n    \r\n    const myClassName = { \r\n        display: display,\r\n        paddingTop: padding.top,\r\n        paddingBottom: padding.bottom,\r\n        paddingLeft: padding.left,\r\n        paddingRight: padding.right,\r\n        marginTop: margin.top,\r\n        marginBottom: margin.bottom,\r\n        marginLeft: margin.left,\r\n        marginRight: margin.right,\r\n        color: color,\r\n        backgroundColor: backgroundColor,\r\n        textAlign: textAlign,\r\n        fontSize: fontSize,\r\n        fontWeight: fontWeight, \r\n        lineHeight: lineHeight\r\n    } \r\n    const classes = useStyles();\r\n\r\n    //const dataNew - props for Dumb Component\r\n    const dataNew = {...props.data, ...{\r\n        classes: myClassName\r\n    }}  \r\n\r\n    const handlePadding = (e, direction) => {  \r\n        let newPadding = Object.assign({}, padding)\r\n        newPadding[direction] = Number(e.target.value)\r\n        setPadding(newPadding)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n    const handleMargin= (e, direction) => {  \r\n        let newMargin = Object.assign({}, margin)\r\n        newMargin[direction] = Number(e.target.value)\r\n        setMargin(newMargin)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n\r\n    const saveData = () => {   \r\n        const sentData = Object.assign({}, props.data)\r\n\r\n        sentData.classes = myClassName\r\n        sentData.text = textInDumb\r\n        sentData.responseFont = isResponsiveFont\r\n        props.reSaveChildren(props.data.id, sentData)\r\n        setIsDisableBtn(true); \r\n    }\r\n    const removeItem = () => {  \r\n        props.removeItem(props.data.id)\r\n    };\r\n    \r\n    const handleInputFocus = (event) => {  \r\n        setOpen(true);\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n    \r\n\r\n    return ( \r\n            <Grid container style={{position: 'relative'}}> \r\n                <Modal \r\n                    open={open} \r\n                    // PaperComponent={PaperComponent}\r\n                    aria-labelledby=\"draggable-dialog-title\"\r\n                    onClose={handleClose} \r\n                >\r\n                    <DialogContent>\r\n                        <Draggable  handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'} >\r\n                            <div className={classes.menu}  >\r\n                                <Typography \r\n                                    component='p' \r\n                                    className={classes.menuTitle}\r\n                                    id=\"draggable-dialog-title\"\r\n                                >\r\n                                    Задать заголовку текст и стили <OpenWithIcon/>\r\n                                </Typography>\r\n\r\n                                {/* text input */}\r\n                                <Box mb={2} >\r\n                                    <TextField \r\n                                        type='text' \r\n                                        label=\"Text input\"\r\n                                        fullWidth\r\n                                        value={textInDumb}\r\n                                        onChange={(e) => { setIsDisableBtn(false); setTextInDumb(e.target.value); e.target.focus() }}\r\n                                    />    \r\n                                </Box>  \r\n\r\n                                {/* Responsive font */}\r\n                                <Box mb={2}>\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Switch\r\n                                                    checked={isResponsiveFont}\r\n                                                    onChange={() => {  setIsDisableBtn(false); setIsResponsiveFont(!isResponsiveFont) }}\r\n                                                    name=\"checkedB\"\r\n                                                    color=\"primary\"\r\n                                                />\r\n                                            }\r\n                                            label=\"Set Responsive Font Size\"\r\n                                        />\r\n                                        <Tooltip title=\"Если включено, шрифт будет меньше размером на мобильных устройствах. \"  >\r\n                                            <IconButton>\r\n                                                <InfoOutlined/>\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                </Box>\r\n\r\n                                {/* margin */}\r\n                                <Box className={classes.inputGroup}>\r\n                                    <Box display=\"flex\" flexDirection=\"row\"  > \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Margin Top\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={margin.top}\r\n                                            onChange={ (e) => { handleMargin(e, 'top') } }     \r\n                                        />\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Margin Bottom\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={margin.bottom}\r\n                                            onChange={ (e) => { handleMargin(e, 'bottom') } }     \r\n                                        />\r\n                                    </Box>\r\n                                    <Box display=\"flex\" flexDirection=\"row\" > \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Margin Left\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={margin.left}\r\n                                            onChange={ (e) => { handleMargin(e, 'left') } }     \r\n                                        />\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Margin Right\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={margin.right}\r\n                                            onChange={ (e) => { handleMargin(e, 'right') } }     \r\n                                        />\r\n                                    </Box>\r\n                                </Box>\r\n                                \r\n                                {/* padding */}\r\n                                <Box className={classes.inputGroup}>\r\n                                    <Box display=\"flex\" flexDirection=\"row\" > \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Padding Top\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={padding.top}\r\n                                            onChange={ (e) => { handlePadding(e, 'top') } }     \r\n                                        />\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Padding Bottom\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={padding.bottom}\r\n                                            onChange={ (e) => { handlePadding(e, 'bottom') } }     \r\n                                        />\r\n                                    </Box>\r\n                                    <Box display=\"flex\" flexDirection=\"row\" > \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Padding Left\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={padding.left}\r\n                                            onChange={ (e) => { handlePadding(e, 'left') } }     \r\n                                        />\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Padding Right\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={padding.right}\r\n                                            onChange={ (e) => { handlePadding(e, 'right') } }     \r\n                                        />\r\n                                    </Box>\r\n                \r\n                                </Box>\r\n                                \r\n                                {/* bg-color */}\r\n                                <Box className={classes.inputGroup} display=\"flex\" flexDirection=\"row\" > \r\n                                    <Box \r\n                                        className={classes.inputNumber}\r\n                                    >\r\n                                        <Typography  component={'h6'} gutterBottom  >\r\n                                            Background  \r\n                                        </Typography>\r\n                                        <TwitterPicker\r\n                                            width={'100%'}\r\n                                            triangle={'hide'}\r\n                                            color={backgroundColor}\r\n                                            colors={[ '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                            onChangeComplete={(newColor) => {\r\n                                                setIsDisableBtn(false);\r\n                                                setBackgroundColor(newColor.hex) \r\n                                            }}\r\n\r\n                                        /> \r\n                                    </Box> \r\n                                    <Box \r\n                                        className={classes.inputNumber}\r\n                                    >\r\n                                        <Typography  component={'h6'} gutterBottom  >\r\n                                            Color  \r\n                                        </Typography>\r\n                                        <TwitterPicker\r\n                                            width={'100%'}\r\n                                            triangle={'hide'}\r\n                                            colors={[ '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                            color={color}\r\n                                            onChangeComplete={(newColor) => {\r\n                                                setIsDisableBtn(false);\r\n                                                setColor(newColor.hex) \r\n                                            }}\r\n\r\n                                        /> \r\n                                    </Box>  \r\n                                </Box>\r\n                                \r\n                                {/* font */}\r\n                                <Box className={classes.inputGroup}> \r\n                                    <Box display=\"flex\" flexDirection=\"row\" >  \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Font Size\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={fontSize}\r\n                                            onChange={ (e) => {setIsDisableBtn(false); setFontSize(Number(e.target.value))} }     \r\n                                        /> \r\n                                        <FormControl \r\n                                            variant='filled' \r\n                                            size='small'   \r\n                                            className={classes.inputNumber}\r\n                                        >\r\n                                            <InputLabel id=\"weight-select-label\">Font Weight</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"weight-select-label\"\r\n                                                id=\"weight-select\"\r\n                                                value={fontWeight}\r\n                                                onChange={(e) => {setIsDisableBtn(false); setFontWeight(Number(e.target.value)) }}\r\n                                            >\r\n                                            <MenuItem value={300}>Light</MenuItem>\r\n                                            <MenuItem value={400}>Regular</MenuItem>\r\n                                            <MenuItem value={700}>Bold</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    \r\n                                        \r\n                                    </Box>\r\n                                    <Box display=\"flex\" flexDirection=\"row\" >\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Line Height (em)\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={lineHeight}\r\n                                        onChange={ (e) => {setIsDisableBtn(false); setLineHeight(Number(e.target.value))} }     \r\n                                    />\r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.inputNumber}\r\n                                    >\r\n                                        <InputLabel id=\"align-select-label\">Text Align</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"align-select-label\"\r\n                                            id=\"align-select\"\r\n                                            value={textAlign}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setTextAlign((e.target.value)) }}\r\n                                        >\r\n                                        <MenuItem value={'left'}>Left</MenuItem>\r\n                                        <MenuItem value={'center'}>Center</MenuItem>\r\n                                        <MenuItem value={'right'}>Right</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Box>\r\n                                </Box>\r\n                                \r\n                                <Box className={classes.btnSave}>\r\n                                    <Button \r\n                                        disabled={isDisableBtn} \r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        size={'medium'} \r\n                                        onClick={saveData}\r\n                                    >\r\n                                        Save\r\n                                    </Button> \r\n                                </Box>\r\n                            \r\n                            </div>\r\n                        </Draggable>\r\n                    </DialogContent>\r\n                    \r\n                </Modal>\r\n                \r\n                <Grid item xs={12}  className={classes.dumbItemContainer }>  \r\n                        <div \r\n                            className={classes.dumbItem }\r\n                            onClick={handleInputFocus}\r\n                            aria-controls=\"simple-menu\" aria-haspopup=\"true\"  \r\n                        >\r\n                            <DumbComponent \r\n                                data={dataNew} \r\n                                className={myClassName}\r\n                                isResponsiveFont={isResponsiveFont}\r\n                                prop={props.data.prop} \r\n                                textChildren={textInDumb}\r\n                            />\r\n                           \r\n                        </div>  \r\n                        <IconButton \r\n                            className={ classes.dumbItemDelete}\r\n                            size=\"small\"\r\n                            aria-label=\"delete\"\r\n                            onClick={removeItem}\r\n                        >\r\n                            <DeleteOutline/>\r\n                        </IconButton>\r\n \r\n                </Grid>\r\n            </Grid>\r\n           \r\n \r\n    )\r\n}\r\n\r\nexport default StyledComponent\r\n","import React from 'react' \r\n\r\nimport StyledComponent from \"./StyledComponent\"\r\nimport DumbComponent from \"./DumbComponent\"\r\n \r\nimport ModeContext from '../../../modeContext/ModeContext'\r\n \r\nfunction ElementCreator(props) {\r\n\r\n    const {modeDev} = React.useContext(ModeContext)  \r\n   \r\n    return (   \r\n        // !!data.classes &&\r\n        <React.Fragment>  \r\n            {\r\n                modeDev && \r\n                <StyledComponent  \r\n                    data={props.item} \r\n                    reSaveChildren={props.reSaveChildren}\r\n                    removeItem={props.removeItem}\r\n                />\r\n            }\r\n \r\n            {\r\n                !modeDev && \r\n                <DumbComponent \r\n                    data={props.item} \r\n                    className={props.item.classes} \r\n                    prop={props.item.prop} \r\n                    textChildren={props.item.text}\r\n                />\r\n            } \r\n        </React.Fragment> \r\n    )\r\n}\r\n\r\nexport default ElementCreator\r\n","import React from 'react'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nfunction DumbComponent(props) {\r\n  \r\n    const useStyles = makeStyles((theme) => ({\r\n        myClassName: props.className , \r\n        imageStyle: props.data.image ? props.data.image.classes : {}\r\n      }));\r\n    const classes = useStyles();\r\n \r\n \r\n    return (\r\n        <React.Fragment>\r\n            \r\n            <Typography component={props.data.variant} className={classes.myClassName} > \r\n                { \r\n                    props.textChildren\r\n                } \r\n            </Typography> \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default DumbComponent\r\n","import React from 'react'  \r\n\r\nimport Draggable from 'react-draggable';\r\nimport { TwitterPicker } from 'react-color';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport {\r\n    FormGroup, \r\n    Grid, \r\n    TextField, \r\n    Button, \r\n    FormControl,\r\n    InputLabel,\r\n    Select, \r\n    MenuItem,  \r\n    IconButton, \r\n    Typography,\r\n    Modal,\r\n    Box,\r\n    DialogContent, \r\n\r\n} from '@material-ui/core'\r\n\r\nimport DumbComponent from \"./DumbComponent\"  \r\n \r\n\r\nimport OpenWithIcon from '@material-ui/icons/OpenWith';\r\nimport DeleteOutline  from '@material-ui/icons/DeleteOutline';  \r\n\r\nconst StyledComponent = (props) => {  \r\n\r\n    console.log('styled paragraph work')\r\n    let [padding, setPadding] = React.useState({ \r\n        top:  props.data.classes.paddingTop  , \r\n        left:  props.data.classes.paddingLeft ,\r\n        bottom: props.data.classes.paddingBottom , \r\n        right: props.data.classes.paddingRight \r\n    })\r\n    const [margin, setMargin] = React.useState({\r\n        top:  props.data.classes.marginTop , \r\n        left:  props.data.classes.marginLeft ,\r\n        bottom: props.data.classes.marginBottom , \r\n        right: props.data.classes.marginRight \r\n    })\r\n     \r\n    \r\n    const [color, setColor] = React.useState(props.data.classes.color || 'inherit')\r\n    const [backgroundColor, setBackgroundColor] = React.useState(props.data.classes.backgroundColor ||  'transperent')\r\n\r\n    const [borderColor, setBorderColor] = React.useState(props.data.classes.borderColor ||  'transperent')\r\n    const [borderStyle, setBorderStyle] = React.useState(props.data.classes.borderStyle ||  'solid')\r\n    const [borderWidth, setBorderWidth] = React.useState(props.data.classes.borderWidth ||  0 )\r\n    const [borderRadius, setBorderRadius] = React.useState(props.data.classes.borderRadius || 0)\r\n\r\n    const [textAlign, setTextAlign] = React.useState(props.data.classes.textAlign ||  'left')\r\n    const [display, setDisplay] = React.useState(props.data.classes.display ||  'block')\r\n    const [fontSize, setFontSize] = React.useState(props.data.classes.fontSize ||  16)\r\n    const [fontWeight, setFontWeight] = React.useState(props.data.classes.fontWeight ||  400)\r\n    const [lineHeight, setLineHeight] = React.useState(props.data.classes.lineHeight ||  1.38)\r\n\r\n    const [textInDumb, setTextInDumb] = React.useState(props.data.text)\r\n    const [isDisableBtn, setIsDisableBtn] = React.useState(true) \r\n\r\n    \r\n    const [open, setOpen] = React.useState(false);\r\n         \r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n     \r\n        inputNumber: {\r\n            flexGrow: 1, \r\n            margin: 5, \r\n            width: \"100%\"\r\n        }, \r\n        inputGroup: {\r\n            border: \"1px solid #f5f5f5\", \r\n            padding: 3, \r\n            inputNumber: { \r\n                maxWidth: \"100%\"\r\n\r\n            }\r\n        },\r\n        btnSave: { \r\n            position: 'sticky', \r\n            zIndex: theme.zIndex.tooltip,\r\n            bottom: 0, \r\n            left: 0, \r\n            right: 0,\r\n            height: 80, \r\n            backgroundColor: '#fff', \r\n            \r\n            '&>button': {\r\n                marginTop: 20, \r\n                marginBottom: 30, \r\n                marginLeft: 5, \r\n                opacity: 1,  \r\n                paddingLeft: 40, \r\n                paddingRight: 40\r\n            }\r\n        },\r\n        dumbItemContainer: { \r\n            position: 'relative', \r\n            outline: '.1px solid #f000',\r\n            transition: `${theme.transitions.duration.shorter}ms ${theme.transitions.easing.easeIn} outline`,\r\n            '&:hover' : {   \r\n                boxShadow: theme.shadows[10], \r\n                cursor: 'pointer',\r\n                outlineColor: `${theme.palette.error.light}`,\r\n                '&>button' : { \r\n                    opacity: 1\r\n                }\r\n            }, \r\n        },\r\n       \r\n        dumbItem: { \r\n            position: 'relative',\r\n            transition: \"300ms cubic-bezier(0.4, 0, 1, 1)\",\r\n            // height: '100%'\r\n            \r\n        }, \r\n        dumbItemDelete : { \r\n            opacity: 0,\r\n            position: 'absolute', \r\n            zIndex: 9, \r\n            top: 3, \r\n            right: 5,\r\n            backgroundColor: '#fff',\r\n            transition: \"100ms cubic-bezier(0.4, 0, 1, 1)\",\r\n            '&:hover' : { \r\n                backgroundColor: theme.palette.error.light\r\n            }\r\n        }, \r\n         \r\n        menu: {    \r\n            position: \"absolute\", \r\n            left: \"calc(50% - 200px)\",\r\n            top: 50, \r\n            backgroundColor: '#fff',\r\n            padding: 10 , \r\n            paddingBottom: 0, \r\n            maxWidth: 400,  \r\n            width: 400, \r\n            maxHeight: 'calc(100vh - 100px)', \r\n            minHeight: 500,\r\n            overflowY: 'scroll'\r\n        },\r\n        menuTitle: {\r\n            display: 'flex', \r\n            alignItems: 'center', \r\n            justifyContent: 'space-between', \r\n            fontSize: 14, \r\n            borderBottom: '1px solid #eaeaea',\r\n            paddingBottom: 6,\r\n            marginBottom: 10, \r\n            cursor: 'move'\r\n        },\r\n        imageAccordion: { \r\n            marginBottom: 10,  \r\n        },\r\n        imagePreview: {\r\n            position: 'relative', \r\n            width: 100, \r\n            height: 100, \r\n            border: `1px solid ${theme.palette.primary.light}`, \r\n            '&>img' : {  \r\n                position: 'absolute',\r\n                top: 0, \r\n                bottom: 0, \r\n                left: 0, \r\n                right: 0, \r\n                margin: 0, \r\n                width: \"100%\", \r\n                maxWidth: \"100%\", \r\n                height: \"100%\", \r\n                maxHeight: \"100%\", \r\n            }, \r\n            '&>button' : {\r\n                position: 'absolute',\r\n                zIndex: 10, \r\n                top: 0, \r\n                bottom: 0, \r\n                left: 0, \r\n                right: 0, \r\n                width: \"100%\", \r\n                maxWidth: \"100%\", \r\n                height: \"100%\", \r\n                maxHeight: \"100%\", \r\n                backgroundColor: \"#0027ff70\", \r\n                borderRadius: 0, \r\n                transition: \"200ms cubic-bezier(0.4, 0, 1, 1)\",\r\n                \"&:hover\": {\r\n                    opacity: 0\r\n                } \r\n            }, \r\n        }\r\n        \r\n      }));\r\n    \r\n    const myClassName = { \r\n        display: display,\r\n        paddingTop: padding.top,\r\n        paddingBottom: padding.bottom,\r\n        paddingLeft: padding.left,\r\n        paddingRight: padding.right,\r\n        marginTop: margin.top,\r\n        marginBottom: margin.bottom,\r\n        marginLeft: margin.left,\r\n        marginRight: margin.right,\r\n        color: color,\r\n        backgroundColor: backgroundColor,\r\n        textAlign: textAlign,\r\n        fontSize: fontSize,\r\n        fontWeight: fontWeight, \r\n        lineHeight: lineHeight,\r\n        borderColor: borderColor,\r\n        borderStyle: borderStyle,\r\n        borderRadius: borderRadius,\r\n        borderWidth: borderWidth\r\n    } \r\n    const classes = useStyles();\r\n\r\n    //const dataNew - props for Dumb Component\r\n    const dataNew = {...props.data, ...{\r\n        classes: myClassName\r\n    }} \r\n\r\n     \r\n    const handlePadding = (e, direction) => {  \r\n        let newPadding = Object.assign({}, padding)\r\n        newPadding[direction] = Number(e.target.value)\r\n        setPadding(newPadding)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n    const handleMargin= (e, direction) => {  \r\n        let newMargin = Object.assign({}, margin)\r\n        newMargin[direction] = Number(e.target.value)\r\n        setMargin(newMargin)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n\r\n    const saveData = () => {    \r\n        const sentData = Object.assign({}, props.data)\r\n\r\n        sentData.classes = myClassName \r\n        sentData.text = textInDumb\r\n\r\n\r\n        props.reSaveChildren(props.data.id, sentData)\r\n        setIsDisableBtn(true); \r\n    }\r\n    const removeItem = () => {  \r\n        props.removeItem(props.data.id)\r\n    };\r\n    \r\n    const handleInputFocus = (event) => {  \r\n        setOpen(true);\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n    \r\n    \r\n\r\n    return ( \r\n            <Grid container style={{position: 'relative'}}> \r\n                <Modal \r\n                    open={open}  \r\n                    aria-labelledby=\"draggable-dialog-title\"\r\n                    onClose={handleClose} \r\n                >\r\n                    <DialogContent>\r\n                        <Draggable  handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'} >\r\n                        <div className={classes.menu}  >\r\n                            <Typography \r\n                                component='p' \r\n                                className={classes.menuTitle}\r\n                                id=\"draggable-dialog-title\"\r\n                            >\r\n                                Задать параграфу текст и стили <OpenWithIcon/>\r\n                            </Typography>\r\n                            <Box mb={3} >\r\n                                <TextField \r\n                                        type='text' \r\n                                        label=\"Text input\"\r\n                                        fullWidth\r\n                                        value={textInDumb}\r\n                                        multiline={true}\r\n                                        rowsMax={6}\r\n                                        variant=\"filled\"\r\n                                        onChange={(e) => { setIsDisableBtn(false); setTextInDumb(e.target.value) }}\r\n                                />    \r\n                            </Box>  \r\n\r\n                            \r\n                            {/* display */}\r\n                            <Box className={classes.inputGroup}>\r\n                                <FormGroup row>\r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.inputNumber}\r\n                                        fullWidth\r\n                                    >\r\n                                        <InputLabel id=\"display-style-label\">Display</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"display-style-label\"\r\n                                            id=\"display-style\"\r\n                                            value={display}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setDisplay(e.target.value) }}\r\n                                        >\r\n                                        <MenuItem value={'block'}>Block</MenuItem> \r\n                                        <MenuItem value={'inline-block'}>Inline-block</MenuItem> \r\n                                        <MenuItem value={'flex'}>Flex</MenuItem> \r\n                                        <MenuItem value={'inline-flex'}>Inline-flex</MenuItem> \r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </FormGroup>\r\n                            </Box>                           \r\n                           \r\n                            {/* margin */}\r\n                            <Box className={classes.inputGroup}>\r\n                                <Box display=\"flex\" flexDirection=\"row\"  > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Top\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.top}\r\n                                        onChange={ (e) => { handleMargin(e, 'top') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Bottom\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.bottom}\r\n                                        onChange={ (e) => { handleMargin(e, 'bottom') } }     \r\n                                    />\r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Left\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.left}\r\n                                        onChange={ (e) => { handleMargin(e, 'left') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Right\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.right}\r\n                                        onChange={ (e) => { handleMargin(e, 'right') } }     \r\n                                    />\r\n                                </Box>\r\n                            </Box>\r\n                            \r\n                            {/* padding */}\r\n                            <Box className={classes.inputGroup}>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Top\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.top}\r\n                                        onChange={ (e) => { handlePadding(e, 'top') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Bottom\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.bottom}\r\n                                        onChange={ (e) => { handlePadding(e, 'bottom') } }     \r\n                                    />\r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Left\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.left}\r\n                                        onChange={ (e) => { handlePadding(e, 'left') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Right\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.right}\r\n                                        onChange={ (e) => { handlePadding(e, 'right') } }     \r\n                                    />\r\n                                </Box>\r\n            \r\n                            </Box>\r\n                          \r\n                            {/* bg-color */}\r\n                            <Box className={classes.inputGroup} display=\"flex\" flexDirection=\"row\" > \r\n                                    <Box \r\n                                        className={classes.inputNumber}\r\n                                    >\r\n                                        <Typography  component={'h6'} gutterBottom  >\r\n                                            Background  \r\n                                        </Typography>\r\n                                        <TwitterPicker\r\n                                            width={'100%'}\r\n                                            triangle={'hide'}\r\n                                            color={backgroundColor}\r\n                                            colors={[ '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                            onChangeComplete={(newColor) => {\r\n                                                setIsDisableBtn(false);\r\n                                                setBackgroundColor(newColor.hex) \r\n                                            }}\r\n\r\n                                        /> \r\n                                    </Box> \r\n                                    <Box \r\n                                        className={classes.inputNumber}\r\n                                    >\r\n                                        <Typography  component={'h6'} gutterBottom  >\r\n                                            Color  \r\n                                        </Typography>\r\n                                        <TwitterPicker\r\n                                            width={'100%'}\r\n                                            triangle={'hide'}\r\n                                            colors={[ '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                            color={color}\r\n                                            onChangeComplete={(newColor) => {\r\n                                                setIsDisableBtn(false);\r\n                                                setColor(newColor.hex) \r\n                                            }}\r\n\r\n                                        /> \r\n                                    </Box>  \r\n                            </Box>\r\n                                                    \r\n                            {/* border */}\r\n                            <Box className={classes.inputGroup}> \r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='color'\r\n                                            label=\"Border Color\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={borderColor}\r\n                                            onChange={ (e) => { setIsDisableBtn(false);  setBorderColor(e.target.value)} }     \r\n                                    />\r\n                                    <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Border Radius\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={borderRadius}\r\n                                            onChange={ (e) => { setIsDisableBtn(false);  setBorderRadius(Number(e.target.value)) } }     \r\n                                    />\r\n\r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                        \r\n                                <TextField \r\n                                    className={classes.inputNumber}\r\n                                    type='number'\r\n                                    label=\"Border Width\" \r\n                                    variant=\"filled\" \r\n                                    size='small'  \r\n                                    value={borderWidth}\r\n                                    onChange={ (e) => { setIsDisableBtn(false);setBorderWidth(Number(e.target.value))} }     \r\n                                />\r\n                                <FormControl \r\n                                    variant='filled' \r\n                                    size='small'   \r\n                                    className={classes.inputNumber}\r\n                                >\r\n                                    <InputLabel id=\"border-style-label\">Border Style</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"border-style-label\"\r\n                                        id=\"border-style\"\r\n                                        value={borderStyle}\r\n                                        onChange={(e) => {setIsDisableBtn(false); setBorderStyle(e.target.value) }}\r\n                                    >\r\n                                    <MenuItem value={'solid'}>Solid</MenuItem>\r\n                                    <MenuItem value={'dotted'}>Dotted</MenuItem>\r\n                                    <MenuItem value={'dashed'}>Dashed</MenuItem>\r\n                                    <MenuItem value={'double'}>Double</MenuItem>\r\n                                    <MenuItem value={'groove'}>Groove</MenuItem>\r\n                                    <MenuItem value={'inset'}>Inset</MenuItem>\r\n                                    <MenuItem value={'outset'}>Outset</MenuItem>\r\n                                    <MenuItem value={'ridge'}>Ridge</MenuItem>\r\n                                    <MenuItem value={'none'}>None</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Box>\r\n                            </Box>\r\n                            \r\n                            {/* font */}\r\n                            <Box className={classes.inputGroup}> \r\n                                <Box display=\"flex\" flexDirection=\"row\" >  \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Font Size\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={fontSize}\r\n                                        onChange={ (e) => {setIsDisableBtn(false); setFontSize(Number(e.target.value))} }     \r\n                                    /> \r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.inputNumber}\r\n                                    >\r\n                                        <InputLabel id=\"weight-select-label\">Font Weight</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"weight-select-label\"\r\n                                            id=\"weight-select\"\r\n                                            value={fontWeight}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setFontWeight(Number(e.target.value)) }}\r\n                                        >\r\n                                        <MenuItem value={300}>Light</MenuItem>\r\n                                        <MenuItem value={400}>Regular</MenuItem>\r\n                                        <MenuItem value={700}>Bold</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                \r\n                                    \r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" >\r\n                                <TextField \r\n                                    className={classes.inputNumber}\r\n                                    type='number'\r\n                                    label=\"Line Height (em)\" \r\n                                    variant=\"filled\" \r\n                                    size='small'  \r\n                                    value={lineHeight}\r\n                                    onChange={ (e) => {setIsDisableBtn(false); setLineHeight(Number(e.target.value))} }     \r\n                                />\r\n                                <FormControl \r\n                                    variant='filled' \r\n                                    size='small'   \r\n                                    className={classes.inputNumber}\r\n                                >\r\n                                    <InputLabel id=\"align-select-label\">Text Align</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"align-select-label\"\r\n                                        id=\"align-select\"\r\n                                        value={textAlign}\r\n                                        onChange={(e) => {setIsDisableBtn(false); setTextAlign((e.target.value)) }}\r\n                                    >\r\n                                    <MenuItem value={'left'}>Left</MenuItem>\r\n                                    <MenuItem value={'center'}>Center</MenuItem>\r\n                                    <MenuItem value={'right'}>Right</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Box>\r\n                            </Box>\r\n                            \r\n                            <Box className={classes.btnSave}>\r\n                                <Button \r\n                                    disabled={isDisableBtn} \r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    size={'medium'} \r\n                                    onClick={saveData}\r\n                                >\r\n                                    Save\r\n                                </Button> \r\n                            </Box>\r\n                        \r\n                        </div>\r\n                    </Draggable>\r\n                    </DialogContent>\r\n                </Modal>\r\n                \r\n                <Grid item xs={12}  className={classes.dumbItemContainer }>  \r\n                        <div \r\n                            className={classes.dumbItem }\r\n                            onClick={handleInputFocus}\r\n                            aria-controls=\"simple-menu\" aria-haspopup=\"true\"  \r\n                        > \r\n                            <DumbComponent \r\n                                data={dataNew} \r\n                                className={myClassName}  \r\n                                prop={props.data.prop} \r\n                                textChildren={textInDumb} \r\n                            />\r\n                           \r\n                        </div>  \r\n                        <IconButton \r\n                            className={ classes.dumbItemDelete}\r\n                            size=\"small\"\r\n                            aria-label=\"delete\"\r\n                            onClick={removeItem}\r\n                        >\r\n                            <DeleteOutline/>\r\n                        </IconButton>\r\n \r\n                </Grid>\r\n            </Grid>\r\n           \r\n \r\n    )\r\n}\r\n\r\nexport default StyledComponent\r\n","import React from 'react' \r\n\r\nimport StyledComponent from \"./StyledComponent\"\r\nimport DumbComponent from \"./DumbComponent\"\r\n \r\nimport ModeContext from '../../../modeContext/ModeContext'\r\n \r\nfunction ElementCreator(props) {\r\n\r\n    const {modeDev} = React.useContext(ModeContext)   \r\n   \r\n    return (   \r\n        // !!data.classes &&\r\n        <React.Fragment>  \r\n            {\r\n                modeDev && \r\n                <StyledComponent  \r\n                    data={props.item} \r\n                    reSaveChildren={props.reSaveChildren}\r\n                    removeItem={props.removeItem}  \r\n                />\r\n            }\r\n \r\n            {\r\n                !modeDev && \r\n                <DumbComponent \r\n                    data={props.item} \r\n                    className={props.item.classes} \r\n                    prop={props.item.prop} \r\n                    textChildren={props.item.text} \r\n                />\r\n            } \r\n        </React.Fragment> \r\n    )\r\n}\r\n\r\nexport default ElementCreator\r\n","import React from 'react'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Typography, Tooltip } from '@material-ui/core';\r\n \r\n\r\nfunction DumbComponent(props) {\r\n  \r\n    const useStyles = makeStyles((theme) => ({\r\n        myClassName: props.className , \r\n        imageStyle: props.imageClassName ? props.imageClassName : {}\r\n      })); \r\n    const classes = useStyles();\r\n \r\n \r\n    return (\r\n        <React.Fragment>\r\n            \r\n            <Typography component={props.data.variant} className={classes.myClassName} >\r\n                {\r\n                    props.data.image.url &&\r\n                    <Tooltip title={props.data.image.title ? props.data.image.title : '' } placement={props.data.image.placement}>\r\n                         <img src={props.data.image.url} className={classes.imageStyle} /> \r\n                    </Tooltip> \r\n                }\r\n                {/* <div dangerouslySetInnerHTML={{__html: props.textChildren}}></div> */}\r\n               <span style={{display: 'inherit'}}>\r\n               { \r\n                    props.textChildren\r\n                } \r\n               </span>\r\n            </Typography> \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default DumbComponent\r\n","import React from 'react' \r\n \r\nimport { makeStyles } from '@material-ui/core/styles'; \r\nimport { Tooltip } from '@material-ui/core';\r\n\r\nfunction DumbComponent(props) {\r\n  \r\n    const useStyles = makeStyles((theme) => ({ \r\n        imageStyle: props.image.classes\r\n      }));\r\n    const classes = useStyles(); \r\n\r\n    const titleImg = props.image.title ? props.image.title : '' \r\n \r\n    return (\r\n        <React.Fragment> \r\n            <Tooltip title={titleImg} placement={props.image.placement}>\r\n                <img \r\n                    src={props.image.url} \r\n                    className={classes.imageStyle}   \r\n                    alt={titleImg}\r\n                />  \r\n            </Tooltip>\r\n          \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default DumbComponent\r\n","import React from 'react'  \r\n\r\nimport Draggable from 'react-draggable';\r\nimport { TwitterPicker } from 'react-color';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { \r\n    FormGroup, \r\n    Grid, \r\n    TextField, \r\n    Button, \r\n    FormControl,\r\n    InputLabel,\r\n    Select, \r\n    MenuItem,  \r\n    IconButton, \r\n    Typography,\r\n    Modal,\r\n    Box,\r\n    Accordion,\r\n    AccordionSummary,\r\n    DialogContent, \r\n\r\n} from '@material-ui/core'\r\n\r\nimport DumbComponent from \"./DumbComponent\" \r\nimport DumbImage from '../image/DumbComponent'\r\n \r\n\r\nimport OpenWithIcon from '@material-ui/icons/OpenWith';\r\nimport DeleteOutline  from '@material-ui/icons/DeleteOutline'; \r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\nconst StyledComponent = (props) => {  \r\n \r\n    let [padding, setPadding] = React.useState({ \r\n        top:  props.data.classes.paddingTop || 0, \r\n        left:  props.data.classes.paddingLeft || 0,\r\n        bottom: props.data.classes.paddingBottom || 0,\r\n        right: props.data.classes.paddingRight || 0\r\n    })\r\n    const [margin, setMargin] = React.useState({\r\n        top:  props.data.classes.marginTop || 0,\r\n        left:  props.data.classes.marginLeft || 0,\r\n        bottom: props.data.classes.marginBottom || 0, \r\n        right: props.data.classes.marginRight  || 0\r\n    })\r\n    \r\n    const [image, setImage] = React.useState(props.data.image || {})\r\n    const [imageTitle, setImageTitle] = React.useState(props.data.image.title || '')\r\n    const [imagePlacement, setImagePlacement] = React.useState(props.data.image.imagePlacement || 'top')\r\n    \r\n    const [color, setColor] = React.useState(props.data.classes.color || 'inherit')\r\n    const [backgroundColor, setBackgroundColor] = React.useState(props.data.classes.backgroundColor ||  'transperent')\r\n\r\n    const [borderColor, setBorderColor] = React.useState(props.data.classes.borderColor ||  'transperent')\r\n    const [borderStyle, setBorderStyle] = React.useState(props.data.classes.borderStyle ||  'solid')\r\n    const [borderWidth, setBorderWidth] = React.useState(props.data.classes.borderWidth ||  '0px')\r\n    const [borderRadius, setBorderRadius] = React.useState(props.data.classes.borderRadius ||  '0px')\r\n\r\n    const [textAlign, setTextAlign] = React.useState(props.data.classes.textAlign ||  'left')\r\n    const [display, setDisplay] = React.useState(props.data.classes.display ||  'block')\r\n    const [fontSize, setFontSize] = React.useState(props.data.classes.fontSize ||  16)\r\n    const [fontWeight, setFontWeight] = React.useState(props.data.classes.fontWeight ||  400)\r\n    const [lineHeight, setLineHeight] = React.useState(props.data.classes.lineHeight ||  1.38)\r\n\r\n\r\n    const [imageWidth, setImageWidth] = React.useState(props.data.image.classes.width || 100)\r\n    const [imageHeight, setImageHeight] = React.useState(props.data.image.classes.height || 100)\r\n    const [imageBorderColor, setImageBorderColor] = React.useState(props.data.image.classes.borderColor ||  'transperent')\r\n    const [imageBorderStyle, setImageBorderStyle] = React.useState(props.data.image.classes.borderStyle ||  'solid')\r\n    const [imageBorderWidth, setImageBorderWidth] = React.useState(props.data.image.classes.borderWidth ||  '0px')\r\n    const [imageBorderRadius, setImageBorderRadius] = React.useState(props.data.image.classes.borderRadius ||  '0px')\r\n    const [imageFloat, setImageFloat] = React.useState(props.data.image.classes.float || 'none')\r\n    const [imageMargin, setImageMargin] = React.useState({\r\n        top:  props.data.image.classes.marginTop || 0, \r\n        left:  props.data.image.classes.marginLeft || 0,\r\n        bottom: props.data.image.classes.marginBottom || 0, \r\n        right: props.data.image.classes.marginRight  || 0\r\n    })\r\n    const [textInDumb, setTextInDumb] = React.useState(props.data.text)\r\n    const [isDisableBtn, setIsDisableBtn] = React.useState(true) \r\n\r\n\r\n    \r\n    const [open, setOpen] = React.useState(false);\r\n         \r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n     \r\n        inputNumber: {\r\n            flexGrow: 1, \r\n            margin: 5, \r\n            width: \"100%\"\r\n        }, \r\n        inputGroup: {\r\n            border: \"1px solid #f5f5f5\", \r\n            padding: 3, \r\n            inputNumber: { \r\n                maxWidth: \"100%\"\r\n\r\n            }\r\n        },\r\n        btnSave: { \r\n            position: 'sticky', \r\n            zIndex: theme.zIndex.tooltip,\r\n            bottom: 0, \r\n            left: 0, \r\n            right: 0,\r\n            height: 80, \r\n            marginTop: 10, \r\n            backgroundColor: '#fff', \r\n            \r\n            '&>button': {\r\n                marginTop: 20, \r\n                marginBottom: 30, \r\n                marginLeft: 5, \r\n                opacity: 1,  \r\n                paddingLeft: 40, \r\n                paddingRight: 40\r\n            }\r\n        },\r\n        dumbItemContainer: { \r\n            position: 'relative', \r\n            outline: '1px solid #f000',\r\n            transition: `${theme.transitions.duration.shorter}ms ${theme.transitions.easing.easeIn} outline`,\r\n            '&:hover' : {   \r\n                boxShadow: theme.shadows[10], \r\n                cursor: 'pointer',\r\n                outlineColor: `${theme.palette.error.light}`,\r\n                '&>button' : { \r\n                    opacity: 1\r\n                }, \r\n            }, \r\n        },\r\n        \r\n       \r\n        dumbItem: { \r\n            position: 'relative',\r\n            transition: \"300ms cubic-bezier(0.4, 0, 1, 1)\",\r\n            // height: '100%'\r\n            \r\n        }, \r\n        dumbItemDelete : { \r\n            opacity: 0,\r\n            position: 'absolute', \r\n            zIndex: 9, \r\n            top: 3, \r\n            right: 5,\r\n            backgroundColor: '#fff',\r\n            transition: \"100ms cubic-bezier(0.4, 0, 1, 1)\",\r\n            '&:hover' : { \r\n                backgroundColor: theme.palette.error.light\r\n            }\r\n        }, \r\n         \r\n        menu: {    \r\n            position: \"absolute\", \r\n            left: \"calc(50% - 200px)\",\r\n            top: 50, \r\n            backgroundColor: '#fff',\r\n            padding: 10 , \r\n            paddingBottom: 0, \r\n            maxWidth: 400,  \r\n            width: 400, \r\n            maxHeight: 'calc(100vh - 100px)', \r\n            minHeight: 500,\r\n            overflowY: 'scroll'\r\n        },\r\n        menuTitle: {\r\n            display: 'flex', \r\n            alignItems: 'center', \r\n            justifyContent: 'space-between', \r\n            fontSize: 14, \r\n            borderBottom: '1px solid #eaeaea',\r\n            paddingBottom: 6,\r\n            marginBottom: 10, \r\n            cursor: 'move'\r\n        },\r\n        imageAccordion: { \r\n            marginBottom: 10,  \r\n        },\r\n        imagePreview: {\r\n            position: 'relative', \r\n            width: 105, \r\n            height: 105, \r\n            border: `1px solid ${theme.palette.primary.light}`, \r\n            '&>img' : {  \r\n                position: 'absolute',\r\n                top: 0, \r\n                bottom: 0, \r\n                left: 0, \r\n                right: 0, \r\n                margin: 0, \r\n                width: \"100%\", \r\n                maxWidth: \"100%\", \r\n                height: \"100%\", \r\n                maxHeight: \"100%\", \r\n            }, \r\n            '&>button' : {\r\n                position: 'absolute',\r\n                zIndex: 10, \r\n                top: 0, \r\n                bottom: 0, \r\n                left: 0, \r\n                right: 0, \r\n                width: \"100%\", \r\n                maxWidth: \"100%\", \r\n                height: \"100%\", \r\n                maxHeight: \"100%\", \r\n                backgroundColor: \"#0027ff70\", \r\n                borderRadius: 0, \r\n                transition: \"200ms cubic-bezier(0.4, 0, 1, 1)\",\r\n                \"&:hover\": {\r\n                    opacity: 0\r\n                } \r\n            }, \r\n        }\r\n        \r\n      }));\r\n    \r\n    const myClassName = { \r\n        display: display,\r\n        paddingTop: padding.top,\r\n        paddingBottom: padding.bottom,\r\n        paddingLeft: padding.left,\r\n        paddingRight: padding.right,\r\n        marginTop: margin.top,\r\n        marginBottom: margin.bottom,\r\n        marginLeft: margin.left,\r\n        marginRight: margin.right,\r\n        color: color,\r\n        backgroundColor: backgroundColor,\r\n        textAlign: textAlign,\r\n        fontSize: fontSize,\r\n        fontWeight: fontWeight, \r\n        lineHeight: lineHeight,\r\n        borderColor: borderColor,\r\n        borderStyle: borderStyle,\r\n        borderRadius: borderRadius,\r\n        borderWidth: borderWidth\r\n    } \r\n\r\n    const imageClassName = { \r\n        marginTop: imageMargin.top,\r\n        marginBottom: imageMargin.bottom,\r\n        marginLeft: imageMargin.left,\r\n        marginRight: imageMargin.right,\r\n        width: imageWidth, \r\n        height: imageHeight,\r\n        borderWidth: imageBorderWidth, \r\n        borderRadius: imageBorderRadius, \r\n        borderColor: imageBorderColor, \r\n        borderStyle: imageBorderStyle,\r\n        float : imageFloat\r\n    }\r\n    \r\n    const classes = useStyles();\r\n\r\n    //const dataNew - props for Dumb Component\r\n    const dataNew = {...props.data, ...{\r\n        classes: myClassName,\r\n    }} \r\n\r\n    // const handleImageSetting = (value, type) => {  \r\n    //     const newImData = { \r\n    //         [type]: value, \r\n\r\n    //     }\r\n    //     setImage(Object.assign(image, newImData))\r\n         \r\n    //     console.log(image)\r\n    // }\r\n    const handlePadding = (e, direction) => {  \r\n        let newPadding = Object.assign({}, padding)\r\n        newPadding[direction] = Number(e.target.value)\r\n        setPadding(newPadding)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n    const handleMargin = (e, direction) => {  \r\n        let newMargin = Object.assign({}, margin)\r\n        newMargin[direction] = Number(e.target.value)\r\n        setMargin(newMargin)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n    const handleImageMargin = (e, direction) => {  \r\n        let newMargin = Object.assign({}, imageMargin)\r\n        newMargin[direction] = Number(e.target.value)\r\n        setImageMargin(newMargin)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n\r\n    const saveData = () => {   \r\n        const sentData = Object.assign({}, props.data)\r\n\r\n        sentData.classes = myClassName\r\n        sentData.image = Object.assign(image, {\r\n            title: imageTitle, \r\n            placement: imagePlacement,\r\n            classes: imageClassName\r\n        })\r\n        sentData.text = textInDumb\r\n\r\n        props.reSaveChildren(props.data.id, sentData)\r\n        setIsDisableBtn(true); \r\n    }\r\n    const removeItem = () => {  \r\n        props.removeItem(props.data.id)\r\n    };\r\n    \r\n    const handleInputFocus = (event) => {  \r\n        setOpen(true);\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n    \r\n    \r\n\r\n    return ( \r\n            <Grid container style={{position: 'relative'}}> \r\n                <Modal \r\n                    open={open}  \r\n                    aria-labelledby=\"draggable-dialog-title\"\r\n                    onClose={handleClose} \r\n                >\r\n                    <DialogContent>\r\n                        <Draggable  handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'} >\r\n                        <div className={classes.menu}  >\r\n                            <Typography \r\n                                component='p' \r\n                                className={classes.menuTitle}\r\n                                id=\"draggable-dialog-title\"\r\n                            >\r\n                                Задать параграфу текст, стили и картинки <OpenWithIcon/>\r\n                            </Typography>\r\n                            <Box mb={3} >\r\n                                <TextField \r\n                                        type='text' \r\n                                        label=\"Text input\"\r\n                                        fullWidth\r\n                                        value={textInDumb}\r\n                                        multiline={true}\r\n                                        rowsMax={6}\r\n                                        variant=\"filled\"\r\n                                        onChange={(e) => { setIsDisableBtn(false); setTextInDumb(e.target.value) }}\r\n                                />    \r\n                            </Box>  \r\n \r\n                            <Accordion className={classes.imageAccordion}  >\r\n                                <AccordionSummary\r\n                                    expandIcon={<ExpandMoreIcon />}\r\n                                    aria-controls=\"image-settings-content\"\r\n                                    id=\"panel1a-header\" \r\n                                >\r\n                                    <Typography >Image Settings</Typography>\r\n                                </AccordionSummary>\r\n                                <Box px={2} pt={1} pb={2}>\r\n                                    <Grid container >\r\n                                        <Grid item xs={4} className={classes.imagePreview}>\r\n                                            <Button> \r\n                                                <ImageIcon color=\"action\" />\r\n\r\n                                                <label htmlFor='image-input-label' style={{\r\n                                                    position: 'absolute',\r\n                                                    zIndex: 10, \r\n                                                    top: 0, \r\n                                                    bottom: 0, \r\n                                                    left: 0, \r\n                                                    right: 0, \r\n                                                    width: \"100%\", \r\n                                                    maxWidth: \"100%\", \r\n                                                    height: \"100%\", \r\n                                                    maxHeight: \"100%\", \r\n                                                    cursor: 'pointer'\r\n                                                }}></label>\r\n                                                <input \r\n                                                    id=\"image-input-label\"\r\n                                                    type=\"file\" \r\n                                                    onChange={ () => {alert(\"Changed\")}} \r\n                                                    style={{ \r\n                                                        display: \"none\"\r\n                                                    }}\r\n                                                />\r\n                                            </Button>\r\n                                            <DumbImage\r\n                                                image={dataNew.image}   \r\n                                            /> \r\n                                        </Grid>\r\n                                        <Grid item xs={8}> \r\n                                            <Box ml={1}>\r\n                                                <TextField  \r\n                                                    type='text'\r\n                                                    label=\"Image title\" \r\n                                                    variant=\"filled\" \r\n                                                    size='small'  \r\n                                                    value={imageTitle}\r\n                                                    fullWidth\r\n                                                    onChange={ (e) => {setIsDisableBtn(false);  setImageTitle(e.target.value) } }     \r\n                                                />\r\n                                                <Box mt={1}>\r\n                                                    <FormControl \r\n                                                        variant='filled' \r\n                                                        size='small'    \r\n                                                        fullWidth\r\n                                                    >\r\n                                                        <InputLabel id=\"image-placement-label\">Title placement</InputLabel>\r\n                                                        <Select\r\n                                                            labelId=\"image-placement-label\"\r\n                                                            id=\"image-placement\"\r\n                                                            value={imagePlacement}\r\n                                                            onChange={(e) => {setIsDisableBtn(false); setImagePlacement(e.target.value) }}\r\n                                                        >\r\n                                                            <MenuItem value={'top-start'}>Top Start</MenuItem>\r\n                                                            <MenuItem value={'top'}>Top</MenuItem>\r\n                                                            <MenuItem value={'top-end'}>Top End</MenuItem>\r\n                                                            <MenuItem value={'left-start'}>Left Start</MenuItem>\r\n                                                            <MenuItem value={'left'}>Left</MenuItem>\r\n                                                            <MenuItem value={'left-end'}>Left End</MenuItem>\r\n                                                            <MenuItem value={'right-start'}>Right Start</MenuItem>\r\n                                                            <MenuItem value={'right'}>Right</MenuItem>\r\n                                                            <MenuItem value={'right-end'}>Right End</MenuItem>\r\n                                                            <MenuItem value={'bottom-start'}>Bottom Start</MenuItem>\r\n                                                            <MenuItem value={'bottom'}>Bottom</MenuItem>\r\n                                                            <MenuItem value={'bottom-end'}>Bottom End</MenuItem>\r\n\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                </Box>\r\n                                                    \r\n                                            </Box> \r\n                                        </Grid>\r\n                                    </Grid>  \r\n                                </Box>\r\n                                \r\n                                 {/* float */}\r\n                                <Box className={classes.inputGroup}>\r\n                                    <FormGroup row>\r\n                                        <FormControl \r\n                                            variant='filled' \r\n                                            size='small'   \r\n                                            className={classes.inputNumber}\r\n                                            fullWidth\r\n                                        >\r\n                                            <InputLabel id=\"display-style-label\">Float</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"display-style-label\"\r\n                                                id=\"display-style\"\r\n                                                value={imageFloat}\r\n                                                onChange={(e) => {setIsDisableBtn(false); setImageFloat(e.target.value) }}\r\n                                            >\r\n                                            <MenuItem value={'left'}>Left</MenuItem> \r\n                                            <MenuItem value={'right'}>Right</MenuItem> \r\n                                            <MenuItem value={'none'}>None</MenuItem>  \r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </FormGroup>\r\n                                </Box>                           \r\n                           \r\n                                {/* margin */}\r\n                                <Box className={classes.inputGroup}>\r\n                                    <Box display=\"flex\" flexDirection=\"row\"  > \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Image Margin Top\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={imageMargin.top}\r\n                                            onChange={ (e) => { setIsDisableBtn(false); handleImageMargin(e, 'top') } }     \r\n                                        />\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Margin Bottom\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={imageMargin.bottom}\r\n                                            onChange={ (e) => { setIsDisableBtn(false); handleImageMargin(e, 'bottom') } }     \r\n                                        />\r\n                                    </Box>\r\n                                    <Box display=\"flex\" flexDirection=\"row\" > \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Margin Left\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={imageMargin.left}\r\n                                            onChange={ (e) => { setIsDisableBtn(false); handleImageMargin(e, 'left') } }     \r\n                                        />\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Margin Right\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={imageMargin.right}\r\n                                            onChange={ (e) => { setIsDisableBtn(false);handleImageMargin(e, 'right') } }     \r\n                                        />\r\n                                    </Box>\r\n                                </Box>\r\n\r\n                                {/* width height*/}\r\n                                <Box className={classes.inputGroup}>\r\n                                    <Box display=\"flex\" flexDirection=\"row\"  > \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Image Width\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={imageWidth}\r\n                                            onChange={ (e) => { setIsDisableBtn(false); setImageWidth(Number(e.target.value)) } }     \r\n                                        />\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Image Height\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={imageHeight}\r\n                                            onChange={ (e) => {setIsDisableBtn(false); setImageHeight(Number(e.target.value)) } }     \r\n                                        />\r\n                                    </Box>\r\n                                </Box>\r\n                                \r\n                                {/* border */}\r\n                                <Box className={classes.inputGroup}> \r\n                                    <Box display=\"flex\" flexDirection=\"row\" > \r\n                                        <TextField \r\n                                                className={classes.inputNumber}\r\n                                                type='color'\r\n                                                label=\"Border Color\" \r\n                                                variant=\"filled\" \r\n                                                size='small'  \r\n                                                value={imageBorderColor}\r\n                                                onChange={ (e) => { setIsDisableBtn(false);  setImageBorderColor(e.target.value)} }     \r\n                                        />\r\n                                        <TextField \r\n                                                className={classes.inputNumber}\r\n                                                type='number'\r\n                                                label=\"Border Radius\" \r\n                                                variant=\"filled\" \r\n                                                size='small'  \r\n                                                value={imageBorderRadius}\r\n                                                onChange={ (e) => { setIsDisableBtn(false);  setImageBorderRadius(Number(e.target.value)) } }     \r\n                                        />\r\n\r\n                                    </Box>\r\n                                    <Box display=\"flex\" flexDirection=\"row\" > \r\n                            \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Border Width\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={imageBorderWidth}\r\n                                            onChange={ (e) => { setIsDisableBtn(false); setImageBorderWidth(Number(e.target.value))} }     \r\n                                        />\r\n                                        <FormControl \r\n                                            variant='filled' \r\n                                            size='small'   \r\n                                            className={classes.inputNumber}\r\n                                        >\r\n                                            <InputLabel id=\"image-border-style-label\">Border Style</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"image-border-style-label\"\r\n                                                id=\"image-border-style\"\r\n                                                value={imageBorderStyle}\r\n                                                onChange={(e) => {setIsDisableBtn(false); setImageBorderStyle(e.target.value) }}\r\n                                            >\r\n                                            <MenuItem value={'solid'}>Solid</MenuItem>\r\n                                            <MenuItem value={'dotted'}>Dotted</MenuItem>\r\n                                            <MenuItem value={'dashed'}>Dashed</MenuItem>\r\n                                            <MenuItem value={'double'}>Double</MenuItem>\r\n                                            <MenuItem value={'groove'}>Groove</MenuItem>\r\n                                            <MenuItem value={'inset'}>Inset</MenuItem>\r\n                                            <MenuItem value={'outset'}>Outset</MenuItem>\r\n                                            <MenuItem value={'ridge'}>Ridge</MenuItem>\r\n                                            <MenuItem value={'none'}>None</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Box>\r\n                                </Box>\r\n                            </Accordion>\r\n\r\n                            <Accordion>\r\n                                <AccordionSummary\r\n                                    expandIcon={<ExpandMoreIcon />}\r\n                                    aria-controls=\"paragraph-settings-content\"\r\n                                    id=\"panel2a-header\" \r\n                                >\r\n                                    <Typography >Paragraph Settings</Typography>\r\n                                </AccordionSummary>\r\n                            \r\n                            {/* display */}\r\n                            <Box className={classes.inputGroup}>\r\n                                <FormGroup row>\r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.inputNumber}\r\n                                        fullWidth\r\n                                    >\r\n                                        <InputLabel id=\"display-style-label\">Display</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"display-style-label\"\r\n                                            id=\"display-style\"\r\n                                            value={display}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setDisplay(e.target.value) }}\r\n                                        >\r\n                                        <MenuItem value={'block'}>Block</MenuItem> \r\n                                        <MenuItem value={'inline-block'}>Inline-block</MenuItem> \r\n                                        <MenuItem value={'flex'}>Flex</MenuItem> \r\n                                        <MenuItem value={'inline-flex'}>Inline-flex</MenuItem> \r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </FormGroup>\r\n                            </Box>                           \r\n                           \r\n                            {/* margin */}\r\n                            <Box className={classes.inputGroup}>\r\n                                <Box display=\"flex\" flexDirection=\"row\"  > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Top\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.top}\r\n                                        onChange={ (e) => { handleMargin(e, 'top') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Bottom\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.bottom}\r\n                                        onChange={ (e) => { handleMargin(e, 'bottom') } }     \r\n                                    />\r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Left\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.left}\r\n                                        onChange={ (e) => { handleMargin(e, 'left') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Right\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.right}\r\n                                        onChange={ (e) => { handleMargin(e, 'right') } }     \r\n                                    />\r\n                                </Box>\r\n                            </Box>\r\n                            \r\n                            {/* padding */}\r\n                            <Box className={classes.inputGroup}>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Top\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.top}\r\n                                        onChange={ (e) => { handlePadding(e, 'top') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Bottom\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.bottom}\r\n                                        onChange={ (e) => { handlePadding(e, 'bottom') } }     \r\n                                    />\r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Left\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.left}\r\n                                        onChange={ (e) => { handlePadding(e, 'left') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Right\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.right}\r\n                                        onChange={ (e) => { handlePadding(e, 'right') } }     \r\n                                    />\r\n                                </Box>\r\n            \r\n                            </Box>\r\n                          \r\n                            {/* bg-color */}\r\n                            <Box className={classes.inputGroup} display=\"flex\" flexDirection=\"row\" > \r\n                                <Box \r\n                                    className={classes.inputNumber}\r\n                                >\r\n                                    <Typography  component={'h6'} gutterBottom  >\r\n                                        Background  \r\n                                    </Typography>\r\n                                    <TwitterPicker\r\n                                        width={'100%'}\r\n                                        triangle={'hide'}\r\n                                        color={backgroundColor}\r\n                                        colors={[ '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                        onChangeComplete={(newColor) => {\r\n                                            setIsDisableBtn(false);\r\n                                            setBackgroundColor(newColor.hex) \r\n                                        }}\r\n\r\n                                    /> \r\n                                </Box> \r\n                                <Box \r\n                                    className={classes.inputNumber}\r\n                                >\r\n                                    <Typography  component={'h6'} gutterBottom  >\r\n                                        Color  \r\n                                    </Typography>\r\n                                    <TwitterPicker\r\n                                        width={'100%'}\r\n                                        triangle={'hide'}\r\n                                        colors={[ '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                        color={color}\r\n                                        onChangeComplete={(newColor) => {\r\n                                            setIsDisableBtn(false);\r\n                                            setColor(newColor.hex) \r\n                                        }}\r\n\r\n                                    /> \r\n                                </Box>  \r\n                            </Box>\r\n                                                    \r\n                            {/* border */}\r\n                            <Box className={classes.inputGroup}> \r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='color'\r\n                                            label=\"Border Color\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={borderColor}\r\n                                            onChange={ (e) => { setIsDisableBtn(false);  setBorderColor(e.target.value)} }     \r\n                                    />\r\n                                    <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Border Radius\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={borderRadius}\r\n                                            onChange={ (e) => { setIsDisableBtn(false);  setBorderRadius(Number(e.target.value)) } }     \r\n                                    />\r\n\r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                        \r\n                                <TextField \r\n                                    className={classes.inputNumber}\r\n                                    type='number'\r\n                                    label=\"Border Width\" \r\n                                    variant=\"filled\" \r\n                                    size='small'  \r\n                                    value={borderWidth}\r\n                                    onChange={ (e) => { setIsDisableBtn(false);setBorderWidth(Number(e.target.value))} }     \r\n                                />\r\n                                <FormControl \r\n                                    variant='filled' \r\n                                    size='small'   \r\n                                    className={classes.inputNumber}\r\n                                >\r\n                                    <InputLabel id=\"border-style-label\">Border Style</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"border-style-label\"\r\n                                        id=\"border-style\"\r\n                                        value={borderStyle}\r\n                                        onChange={(e) => {setIsDisableBtn(false); setBorderStyle(e.target.value) }}\r\n                                    >\r\n                                    <MenuItem value={'solid'}>Solid</MenuItem>\r\n                                    <MenuItem value={'dotted'}>Dotted</MenuItem>\r\n                                    <MenuItem value={'dashed'}>Dashed</MenuItem>\r\n                                    <MenuItem value={'double'}>Double</MenuItem>\r\n                                    <MenuItem value={'groove'}>Groove</MenuItem>\r\n                                    <MenuItem value={'inset'}>Inset</MenuItem>\r\n                                    <MenuItem value={'outset'}>Outset</MenuItem>\r\n                                    <MenuItem value={'ridge'}>Ridge</MenuItem>\r\n                                    <MenuItem value={'none'}>None</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Box>\r\n                            </Box>\r\n\r\n                            {/* font */}\r\n                            <Box className={classes.inputGroup}> \r\n                                <Box display=\"flex\" flexDirection=\"row\" >  \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Font Size\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={fontSize}\r\n                                        onChange={ (e) => {setIsDisableBtn(false); setFontSize(Number(e.target.value))} }     \r\n                                    /> \r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.inputNumber}\r\n                                    >\r\n                                        <InputLabel id=\"weight-select-label\">Font Weight</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"weight-select-label\"\r\n                                            id=\"weight-select\"\r\n                                            value={fontWeight}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setFontWeight(Number(e.target.value)) }}\r\n                                        >\r\n                                        <MenuItem value={300}>Light</MenuItem>\r\n                                        <MenuItem value={400}>Regular</MenuItem>\r\n                                        <MenuItem value={700}>Bold</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                \r\n                                    \r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" >\r\n                                <TextField \r\n                                    className={classes.inputNumber}\r\n                                    type='number'\r\n                                    label=\"Line Height (em)\" \r\n                                    variant=\"filled\" \r\n                                    size='small'  \r\n                                    value={lineHeight}\r\n                                    onChange={ (e) => {setIsDisableBtn(false); setLineHeight(Number(e.target.value))} }     \r\n                                />\r\n                                <FormControl \r\n                                    variant='filled' \r\n                                    size='small'   \r\n                                    className={classes.inputNumber}\r\n                                >\r\n                                    <InputLabel id=\"align-select-label\">Text Align</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"align-select-label\"\r\n                                        id=\"align-select\"\r\n                                        value={textAlign}\r\n                                        onChange={(e) => {setIsDisableBtn(false); setTextAlign((e.target.value)) }}\r\n                                    >\r\n                                    <MenuItem value={'left'}>Left</MenuItem>\r\n                                    <MenuItem value={'center'}>Center</MenuItem>\r\n                                    <MenuItem value={'right'}>Right</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Box>\r\n                            </Box>\r\n\r\n                           \r\n                            </Accordion>   \r\n                            <Box className={classes.btnSave}>\r\n                                <Button \r\n                                    disabled={isDisableBtn} \r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    size={'medium'} \r\n                                    onClick={saveData}\r\n                                >\r\n                                    Save\r\n                                </Button>  \r\n                            </Box>                \r\n                        </div>\r\n                    </Draggable>\r\n                    </DialogContent>\r\n                </Modal>\r\n                \r\n                <Grid item xs={12}  className={classes.dumbItemContainer }>  \r\n                 \r\n                      \r\n                        <div \r\n                            className={classes.dumbItem }\r\n                            onClick={handleInputFocus}\r\n                            aria-controls=\"simple-menu\" aria-haspopup=\"true\"  \r\n                        > \r\n                            <DumbComponent \r\n                                data={dataNew} \r\n                                className={myClassName}  \r\n                                imageClassName={imageClassName}\r\n                                prop={props.data.prop} \r\n                                textChildren={textInDumb} \r\n                            />\r\n                           \r\n                        </div>  \r\n                        <IconButton \r\n                            className={ classes.dumbItemDelete}\r\n                            size=\"small\"\r\n                            aria-label=\"delete\"\r\n                            onClick={removeItem}\r\n                        >\r\n                            <DeleteOutline/>\r\n                        </IconButton>\r\n \r\n                </Grid>\r\n            </Grid>\r\n           \r\n \r\n    )\r\n}\r\n\r\nexport default StyledComponent\r\n","import React from 'react' \r\n\r\nimport StyledComponent from \"./StyledComponent\"\r\nimport DumbComponent from \"./DumbComponent\"\r\n \r\nimport ModeContext from '../../../modeContext/ModeContext'\r\n \r\nfunction ElementCreator(props) {\r\n\r\n    const {modeDev} = React.useContext(ModeContext)   \r\n    // const modeDev = false   \r\n    \r\n    return (   \r\n        // !!data.classes && \r\n        <React.Fragment>  \r\n            {\r\n                modeDev && \r\n                <StyledComponent  \r\n                    data={props.item} \r\n                    reSaveChildren={props.reSaveChildren}\r\n                    removeItem={props.removeItem}  \r\n                />\r\n            }\r\n \r\n            {\r\n                !modeDev && \r\n                <DumbComponent \r\n                    data={props.item} \r\n                    className={props.item.classes} \r\n                    imageClassName={props.item.image.classes}\r\n                    prop={props.item.prop} \r\n                    textChildren={props.item.text} \r\n                />\r\n            } \r\n        </React.Fragment> \r\n    )\r\n}\r\n\r\nexport default ElementCreator\r\n","import React from 'react'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container } from '@material-ui/core';\r\n\r\nimport ModeContext from '../../../modeContext/ModeContext'\r\n\r\n\r\nimport HeadingCreator from '../heading/ElementCreator'\r\nimport ParagraphCreator from '../paragraph/ElementCreator'\r\nimport ParagraphImageCreator from '../paragraphImage/ElementCreator'\r\n\r\nfunction DumbComponent(props) {\r\n \r\n    const {modeDev} = React.useContext(ModeContext)\r\n  \r\n    const useStyles = makeStyles((theme) => ({\r\n        myClassName: props.classes ,  \r\n      }));\r\n    const classes = useStyles(); \r\n  \r\n \r\n    return (\r\n        <React.Fragment>\r\n            <Container  \r\n                maxWidth={props.settings.maxWidth} \r\n                fixed={props.settings.fixed} \r\n                disableGutters={props.settings.disableGutters} \r\n                className={classes.myClassName}\r\n            > \r\n                {  \r\n                    props.settings.innerContainer && \r\n                    <Container\r\n                        maxWidth={'lg'}\r\n                        fixed={props.settings.fixed} \r\n                        disableGutters={props.settings.disableGutters} \r\n                    >\r\n                        { \r\n                            modeDev && \r\n                            props.data.children.map((item) => {   \r\n                                switch(item.type) { \r\n                                    case 'heading' :  \r\n                                        return ( \r\n                                            <HeadingCreator \r\n                                                key={item.id} \r\n                                                item={item}\r\n                                                reSaveChildren={props.reSaveChildren}\r\n                                                removeItem={props.removeItem}\r\n                                            />\r\n                                        ) \r\n                                    case 'paragraph' :  \r\n                                        return (\r\n                                            <ParagraphCreator\r\n                                                key={item.id} \r\n                                                item={item}\r\n                                                reSaveChildren={props.reSaveChildren}\r\n                                                removeItem={props.removeItem}\r\n                                            />\r\n                                        ) \r\n                                    case 'paragraphImage' :  \r\n                                        return (\r\n                                            <ParagraphImageCreator\r\n                                                key={item.id} \r\n                                                item={item}\r\n                                                reSaveChildren={props.reSaveChildren}\r\n                                                removeItem={props.removeItem}\r\n                                            />\r\n                                        ) \r\n                                    default: break;\r\n                                }  \r\n                                return null\r\n                            })\r\n                        }\r\n                        {   !modeDev &&\r\n                            props.data.children.map((item) => {  \r\n                                switch(item.type) { \r\n                                    case 'heading' :  \r\n                                        return ( \r\n                                            <HeadingCreator \r\n                                                key={item.id} \r\n                                                item={item} \r\n                                            />\r\n                                        ) \r\n                                    case 'paragraph' :  \r\n                                        return (\r\n                                            <ParagraphCreator\r\n                                                key={item.id} \r\n                                                item={item} \r\n                                            />\r\n                                        ) \r\n                                    case 'paragraphImage' :  \r\n                                        return (\r\n                                            <ParagraphImageCreator\r\n                                                key={item.id} \r\n                                                item={item} \r\n                                            />\r\n                                        ) \r\n                                    default: break;\r\n                                }  \r\n                                return null\r\n                            })\r\n                        }\r\n                    </Container>\r\n                }\r\n                {  \r\n                    !props.settings.innerContainer && \r\n                    <React.Fragment>\r\n                        { \r\n                            modeDev && \r\n                            props.data.children.map((item) => {   \r\n                                switch(item.type) { \r\n                                    case 'heading' :  \r\n                                        return ( \r\n                                            <HeadingCreator \r\n                                                key={item.id} \r\n                                                item={item}\r\n                                                reSaveChildren={props.reSaveChildren}\r\n                                                removeItem={props.removeItem}\r\n                                            />\r\n                                        ) \r\n                                    case 'paragraph' :  \r\n                                        return (\r\n                                            <ParagraphCreator\r\n                                                key={item.id} \r\n                                                item={item}\r\n                                                reSaveChildren={props.reSaveChildren}\r\n                                                removeItem={props.removeItem}\r\n                                            />\r\n                                        ) \r\n                                    case 'paragraphImage' :  \r\n                                        return (\r\n                                            <ParagraphImageCreator\r\n                                                key={item.id} \r\n                                                item={item}\r\n                                                reSaveChildren={props.reSaveChildren}\r\n                                                removeItem={props.removeItem}\r\n                                            />\r\n                                        ) \r\n                                    default: break;\r\n                                }  \r\n                                return null\r\n                            })\r\n                        }\r\n                        {   !modeDev &&\r\n                            props.data.children.map((item) => {  \r\n                                switch(item.type) { \r\n                                    case 'heading' :  \r\n                                        return ( \r\n                                            <HeadingCreator \r\n                                                key={item.id} \r\n                                                item={item} \r\n                                            />\r\n                                        ) \r\n                                    case 'paragraph' :  \r\n                                        return (\r\n                                            <ParagraphCreator\r\n                                                key={item.id} \r\n                                                item={item} \r\n                                            />\r\n                                        ) \r\n                                    case 'paragraphImage' :  \r\n                                        return (\r\n                                            <ParagraphImageCreator\r\n                                                key={item.id} \r\n                                                item={item} \r\n                                            />\r\n                                        ) \r\n                                    default: break;\r\n                                }  \r\n                                return null\r\n                            })\r\n                        }\r\n                    </React.Fragment>\r\n                }\r\n                \r\n            </Container> \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default DumbComponent\r\n","import React from 'react' \r\nimport uuid from 'react-uuid' \r\nimport { TwitterPicker } from 'react-color';\r\n \r\nimport DumbComponent from './DumbComponent' \r\n  \r\nimport { \r\n    MenuItem,   FormGroup,  Button,\r\n    Box,  Menu,   Drawer,  Tooltip,\r\n    TextField, FormControl, InputLabel,\r\n    Select,  Container, Typography,\r\n} from '@material-ui/core'\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\n \r\nimport libraryHeading from '../heading/headingLayout.json'\r\nimport libraryParagraph from '../paragraph/paragraphLayout.json'\r\nimport libraryParagraphImage from '../paragraphImage/paragraphImageLayout.json'\r\n \r\n\r\nimport { makeStyles } from '@material-ui/core/styles';  \r\n\r\nfunction ContainerElement(props) { \r\n    console.log('styled Container work')\r\n  \r\n    const [padding, setPadding] = React.useState({ \r\n        top:  props.data.classes.paddingTop ,  \r\n        bottom: props.data.classes.paddingBottom ,  \r\n    })\r\n    const [margin, setMargin] = React.useState({\r\n        top:  props.data.classes.marginTop ,  \r\n        bottom: props.data.classes.marginBottom ,  \r\n    })\r\n    \r\n    const [color, setColor] = React.useState(props.data.classes.color || 'inherit')\r\n    const [backgroundColor, setBackgroundColor] = React.useState(props.data.classes.backgroundColor ||  'transparent')\r\n    const [shadow, setShadow] = React.useState(props.data.classes.boxShadow || 'none')\r\n\r\n    const [borderColor, setBorderColor] = React.useState(props.data.classes.borderColor ||  'transperent')\r\n    const [borderStyle, setBorderStyle] = React.useState(props.data.classes.borderStyle ||  'solid')\r\n    const [borderWidth, setBorderWidth] = React.useState(props.data.classes.borderWidth ||  '0px')\r\n    const [borderRadius, setBorderRadius] = React.useState(props.data.classes.borderRadius ||  '0px')\r\n\r\n    const [isDisableBtn, setIsDisableBtn] = React.useState(true) \r\n \r\n    const [children, setChildren] = React.useState(props.data.children) \r\n\r\n    const [settingGutter, setSettingGutter] = React.useState(props.data.disableGutters)\r\n    const [settingFixed, setSettingFixed] = React.useState(props.data.fixed)\r\n    const [settingMaxWidth, setSettingMaxWidth] = React.useState(props.data.maxWidth)\r\n    const [settingInnerContainer, setSettingInnerContainer] = React.useState(props.data.innerContainer || false )\r\n\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [open, setOpen] = React.useState(false)\r\n     \r\n\r\n    const propsSettings = {\r\n        maxWidth: settingMaxWidth,\r\n        disableGutters: settingGutter,\r\n        fixed: settingFixed,\r\n        innerContainer: settingInnerContainer\r\n    }\r\n\r\n\r\n    const useStyles = makeStyles((theme) => {\r\n         \r\n        console.log(theme)\r\n        return ( {  \r\n            btnDrawerStyle : {\r\n                position: 'absolute', \r\n                top: 0, \r\n                left: 0, \r\n                zIndex: 10,  \r\n                borderTopLeftRadius: 0, \r\n                borderTopRightRadius: 0,\r\n                minWidth: 50, \r\n                opacity: 0, \r\n                transition: `${theme.transitions.duration.shorter}ms ${theme.transitions.easing.easeIn} opacity`,\r\n            }, \r\n            containerWrapper: {\r\n                position: 'relative', \r\n                outline: \"1px solid #ffffff00\", \r\n                outlineOffset: -1, \r\n                transition: `${theme.transitions.duration.shorter}ms ${theme.transitions.easing.easeIn} outline`,\r\n                '&:hover' : {\r\n                    outlineColor: `${theme.palette.error.main}`,\r\n                    '& $mtView' : { \r\n                        opacity: 1\r\n                    },\r\n                    '& $mbView' : { \r\n                        opacity: 1\r\n                    }, \r\n                    '& $btnDrawerStyle': {\r\n                        opacity: 1\r\n                    }\r\n                },   \r\n               \r\n            },\r\n            mtView: {  \r\n                position: 'absolute', \r\n                top: `-${margin.top}px`, \r\n                left: 0, \r\n                right: 0,\r\n                zIndex: 10, \r\n                backgroundColor: '#fff7003d',\r\n                height: `${margin.top}px`, \r\n                opacity: 0,\r\n                transition: `${theme.transitions.duration.shortest}ms ${theme.transitions.easing.easeIn} opacity`\r\n            },\r\n            mbView: {  \r\n                position: 'absolute', \r\n                bottom: `-${margin.bottom}px`, \r\n                left: 0, \r\n                right: 0,\r\n                zIndex: 10, \r\n                backgroundColor: '#fff7003d',\r\n                height: `${margin.bottom}px`, \r\n                opacity: 0,\r\n                transition: `180ms ${theme.transitions.easing.easeIn} opacity`\r\n            },\r\n            settingsItem: {\r\n                marginRight: 5, \r\n                marginBottom: 10, \r\n                flexGrow: 1\r\n            },\r\n            inputNumber: {\r\n                flexGrow: 1, \r\n                margin: 5, \r\n                width: \"100%\", \r\n                maxWidth: '50%'\r\n            }, \r\n            inputGroup: {\r\n                border: \"1px solid #f5f5f5\", \r\n                padding: 3, \r\n                inputNumber: { \r\n                    maxWidth: \"100%\"\r\n    \r\n                }\r\n            },\r\n            btnSave: { \r\n                position: 'sticky', \r\n                zIndex: theme.zIndex.tooltip,\r\n                bottom: 0, \r\n                left: 20, \r\n                right: 0,\r\n                height: 80, \r\n                backgroundColor: '#fff', \r\n                \r\n                '&>button': {\r\n                    marginTop: 20, \r\n                    marginBottom: 30, \r\n                    opacity: 1,  \r\n                    paddingLeft: 40, \r\n                    paddingRight: 40\r\n                }\r\n            }\r\n            \r\n        } )\r\n    })\r\n    \r\n    const classes = useStyles();\r\n    \r\n    const myClassName = {  \r\n        paddingTop: padding.top,\r\n        paddingBottom: padding.bottom, \r\n        marginTop: margin.top,\r\n        marginBottom: margin.bottom, \r\n        color: color,\r\n        backgroundColor: backgroundColor, \r\n        borderColor: borderColor,\r\n        borderStyle: borderStyle,\r\n        borderRadius: borderRadius,\r\n        borderWidth: borderWidth,\r\n        boxShadow: shadow\r\n    } \r\n  \r\n\r\n    const handlePadding = (e, direction) => {  \r\n        let newPadding = Object.assign({}, padding)\r\n        newPadding[direction] = Number(e.target.value)\r\n        setPadding(newPadding)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n    const handleMargin = (e, direction) => {  \r\n        let newMargin = Object.assign({}, margin)\r\n        newMargin[direction] = Number(e.target.value)\r\n        setMargin(newMargin)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n     \r\n    const toggleDrawer =  () => {  \r\n        setOpen(!open)\r\n    }; \r\n\r\n    const handleHeadingMenuClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleHeadingMenuClose = (variant, type) => {\r\n        setAnchorEl(null); \r\n        addHeading(variant, type)\r\n    }; \r\n  \r\n    const addHeading = async (variant, type) => { \r\n          \r\n        let newChildren = children.slice()\r\n\r\n        let newItem = {}\r\n        \r\n\r\n        switch(type) { \r\n            case 'heading' :  \r\n                newItem = Object.assign({}, libraryHeading) \r\n                newItem.id = uuid()\r\n                newItem.variant = newItem.variant[variant] \r\n                newItem.text += \" - \" + newItem.variant \r\n                break;\r\n            case 'paragraph' :  \r\n                console.log('paragraph')\r\n                newItem = Object.assign({}, libraryParagraph)\r\n                newItem.id = uuid() \r\n                break;\r\n            case 'paragraphImage' :  \r\n                console.log('paragraphImage')\r\n                newItem = Object.assign({}, libraryParagraphImage)\r\n                newItem.id = uuid() \r\n                break;\r\n            default: break;\r\n        }  \r\n\r\n        newChildren.push(newItem) \r\n  \r\n        setChildren(newChildren) \r\n \r\n        // save in firestore\r\n        props.reSaveContainer(props.data.id, newChildren)\r\n \r\n    } \r\n    const reSaveClassesSettings = () => {    \r\n        props.reSaveContainerStyleSettings(props.data.id, myClassName, propsSettings)\r\n        setIsDisableBtn(true); \r\n    }\r\n \r\n    \r\n    const reSaveChildren = async (id, data) => {   \r\n        let slicedChild = children.slice()\r\n        slicedChild.forEach((item) => {\r\n            if(item.id === id) {\r\n                for( let key in item) { \r\n                    item[key] = data[key]\r\n                } \r\n            }\r\n        }) \r\n        // console.log(slicedChild)\r\n        // save in firestore\r\n        props.reSaveContainer(props.data.id, slicedChild)\r\n \r\n    }\r\n\r\n    const removeItem = async (id) => {\r\n        let conf = window.confirm(\"Delete ?\");\r\n \r\n        if(conf) {\r\n            \r\n            let filtered = children.filter((item) => (item.id !== id))  \r\n            setChildren(filtered) \r\n            \r\n            // save in firestore\r\n            props.reSaveContainer(props.data.id, filtered) \r\n        }\r\n    }\r\n\r\n    const removeContainer = () => { \r\n        props.removeContainer(props.data.id)\r\n    }\r\n    \r\n\r\n    return (\r\n        <Container \r\n            maxWidth={propsSettings.maxWidth} \r\n            fixed={propsSettings.fixed} \r\n            disableGutters={true}\r\n            className={classes.containerWrapper} \r\n        >    \r\n            <div className={classes.mtView}></div>\r\n            <div className={classes.mbView}></div>\r\n            <Box style={{position: 'relative'}} >\r\n                {/*  DrawerContainer */}\r\n                    <Tooltip title='Container Settings' placement='bottom'>\r\n                        <Button  \r\n                            onClick={toggleDrawer} \r\n                            size='medium'\r\n                            variant='contained'\r\n                            color='primary'\r\n                            className={classes.btnDrawerStyle}\r\n                        >  \r\n                            <SettingsIcon style={{ color: '#fff' }} fontSize='small'/>\r\n                        </Button>\r\n                    </Tooltip>\r\n                    \r\n                    <Drawer anchor={'left'} open={open} onClose={toggleDrawer}>\r\n                         \r\n                            <Box  \r\n                                pt={3}\r\n                                pb={10} \r\n                                px={2}\r\n                                maxWidth={600}    \r\n                                position={'relative'}\r\n                            > \r\n                                <FormGroup> \r\n                                    <Typography   variant={'h6'} gutterBottom  >\r\n                                        Container actions \r\n                                    </Typography>\r\n                                   <Box mb={2}> \r\n                                        {/* <Button\r\n                                            // onClick={addContainer}\r\n                                            variant='outlined'\r\n                                            color=\"primary\" \r\n                                            disabled={true}\r\n                                            \r\n                                        >\r\n                                            Add Container\r\n                                        </Button>   */}\r\n                                        <Button\r\n                                            onClick={removeContainer}\r\n                                            variant='outlined'\r\n                                            color=\"secondary\" \r\n                                            // disabled={true}\r\n                                        >\r\n                                            Remove Container\r\n                                        </Button> \r\n                                   </Box>\r\n                                </FormGroup>\r\n                                \r\n                                <FormGroup > \r\n                                    <Typography  variant={'h6'} gutterBottom  >\r\n                                        Add item from libs\r\n                                    </Typography>\r\n                                    <Box>\r\n                                            <Box mr={2} mb={1} clone={true} >\r\n                                                <Button \r\n                                                    aria-controls=\"heading-menu\" \r\n                                                    aria-haspopup=\"true\" \r\n                                                    onClick={handleHeadingMenuClick}\r\n                                                    variant='outlined'\r\n                                                    color=\"primary\"\r\n                                                >\r\n                                                    Heading\r\n                                                </Button>\r\n                                            </Box>\r\n                                            \r\n                                            <Menu\r\n                                                id=\"heading-menu\"\r\n                                                anchorEl={anchorEl}\r\n                                                keepMounted\r\n                                                open={Boolean(anchorEl)}\r\n                                                onClose={handleHeadingMenuClose}\r\n                                            >\r\n                                                <MenuItem value={0} onClick={(e) => {handleHeadingMenuClose(e.target.value, \"heading\")}} >Heading h1</MenuItem>\r\n                                                <MenuItem value={1} onClick={(e) => {handleHeadingMenuClose(e.target.value, \"heading\")}} >Heading h2</MenuItem>\r\n                                                <MenuItem value={2} onClick={(e) => {handleHeadingMenuClose(e.target.value, \"heading\")}} >Heading h3</MenuItem>\r\n                                                <MenuItem value={3} onClick={(e) => {handleHeadingMenuClose(e.target.value, \"heading\")}} >Heading h4</MenuItem>\r\n                                                <MenuItem value={4} onClick={(e) => {handleHeadingMenuClose(e.target.value, \"heading\")}} >Heading h5</MenuItem>\r\n                                                <MenuItem value={5} onClick={(e) => {handleHeadingMenuClose(e.target.value, \"heading\")}} >Heading h6</MenuItem> \r\n                                            </Menu>\r\n\r\n                                            <Box mr={2} mb={1} clone={true} >\r\n                                                <Button\r\n                                                    onClick={() => {addHeading('p', 'paragraph')}}\r\n                                                    variant='outlined'\r\n                                                    color=\"primary\"\r\n                                                >\r\n                                                    Paragraph\r\n                                                </Button>\r\n                                            </Box>\r\n                                            <Box mr={2} mb={1} clone={true} >\r\n                                                <Button\r\n                                                    onClick={() => {addHeading('p', 'paragraphImage')}}\r\n                                                    variant='outlined'\r\n                                                    color=\"primary\" \r\n                                                >\r\n                                                    Paragraph-Image\r\n                                                </Button>\r\n                                            </Box> \r\n                                    </Box>\r\n\r\n                                </FormGroup>\r\n \r\n                                <Typography  variant={'h6'} gutterBottom  >\r\n                                    Settings \r\n                                </Typography>\r\n                                <FormGroup row>\r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.settingsItem}\r\n                                    >\r\n                                        <InputLabel id=\"dis-gutters-style-label\">Disable Gutters</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"dis-gutters-label\"\r\n                                            id=\"dis-gutters-style\"\r\n                                            value={settingGutter}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setSettingGutter(e.target.value) }}\r\n                                        >\r\n                                            <MenuItem value={false}>False</MenuItem>\r\n                                            <MenuItem value={true}>True</MenuItem> \r\n                                        </Select>\r\n                                    </FormControl>\r\n\r\n                                    \r\n\r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.settingsItem}\r\n                                    >\r\n                                        <InputLabel id=\"fixed-style-label\">Fixed</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"fixed-label\"\r\n                                            id=\"fixed-style\"\r\n                                            value={settingFixed}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setSettingFixed(e.target.value) }}\r\n                                        >\r\n                                            <MenuItem value={false}>False</MenuItem>\r\n                                            <MenuItem value={true}>True</MenuItem> \r\n                                        </Select>\r\n                                    </FormControl>  \r\n                                </FormGroup>\r\n                                \r\n                                <FormGroup row> \r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.settingsItem}\r\n                                    >\r\n                                        <InputLabel id=\"maxWidth-style-label\">Max-Width</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"maxWidth-label\"\r\n                                            id=\"maxWidth-style\"\r\n                                            value={settingMaxWidth}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setSettingMaxWidth(e.target.value) }}\r\n                                        >\r\n                                            <MenuItem value={false}>False</MenuItem>\r\n                                            <MenuItem value={'xl'}>xl - 1920 </MenuItem> \r\n                                            <MenuItem value={'lg'}>lg - 1280 </MenuItem> \r\n                                            <MenuItem value={'md'}>md - 960 </MenuItem> \r\n                                            <MenuItem value={'sm'}>sm - 600 </MenuItem> \r\n                                            <MenuItem value={'xs'}>xs - 0 </MenuItem> \r\n                                        </Select>\r\n                                    </FormControl>\r\n\r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.settingsItem}\r\n                                    >\r\n                                        <InputLabel id=\"inner-container-style-label\">Inner Container</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"inner-container-label\"\r\n                                            id=\"inner-container-style\"\r\n                                            value={settingInnerContainer}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setSettingInnerContainer(e.target.value) }}\r\n                                        >\r\n                                            <MenuItem value={false}>False</MenuItem>\r\n                                            <MenuItem value={true}>True</MenuItem> \r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </FormGroup>\r\n                                \r\n                                <Typography  variant={'h6'} gutterBottom  >\r\n                                    Styles \r\n                                </Typography>\r\n                                <React.Fragment>\r\n                                    {/* margin */}\r\n                                    <Box className={classes.inputGroup}>\r\n                                        <Box display=\"flex\" flexDirection=\"row\"  > \r\n                                            <TextField \r\n                                                className={classes.inputNumber}\r\n                                                type='number'\r\n                                                label=\"Margin Top\" \r\n                                                variant=\"filled\" \r\n                                                size='small'  \r\n                                                value={margin.top}\r\n                                                onChange={ (e) => { setIsDisableBtn(false); handleMargin(e, 'top');  } }     \r\n                                            />\r\n                                            <TextField \r\n                                                className={classes.inputNumber}\r\n                                                type='number'\r\n                                                label=\"Margin Bottom\" \r\n                                                variant=\"filled\" \r\n                                                size='small'  \r\n                                                value={margin.bottom}\r\n                                                onChange={ (e) => { setIsDisableBtn(false); handleMargin(e, 'bottom') } }     \r\n                                            />\r\n                                        </Box>\r\n                                    </Box>\r\n                                    \r\n                                    {/* padding */}\r\n                                    <Box className={classes.inputGroup}>\r\n                                        <Box display=\"flex\" flexDirection=\"row\" > \r\n                                            <TextField \r\n                                                className={classes.inputNumber}\r\n                                                type='number'\r\n                                                label=\"Padding Top\" \r\n                                                variant=\"filled\" \r\n                                                size='small'  \r\n                                                value={padding.top}\r\n                                                onChange={ (e) => { setIsDisableBtn(false); handlePadding(e, 'top') } }     \r\n                                            />\r\n                                            <TextField \r\n                                                className={classes.inputNumber}\r\n                                                type='number'\r\n                                                label=\"Padding Bottom\" \r\n                                                variant=\"filled\" \r\n                                                size='small'  \r\n                                                value={padding.bottom}\r\n                                                onChange={ (e) => {setIsDisableBtn(false); handlePadding(e, 'bottom') } }     \r\n                                            />\r\n                                        </Box>\r\n                                        \r\n\r\n                                    </Box>\r\n                                    \r\n                                    {/* bg-color */}\r\n                                    <Box className={classes.inputGroup} display=\"flex\" flexDirection=\"row\" > \r\n                                \r\n                                        <Box \r\n                                            className={classes.inputNumber}\r\n                                        >\r\n                                             <Typography  component={'h6'} gutterBottom  >\r\n                                                Background  \r\n                                            </Typography>\r\n                                            <TwitterPicker\r\n                                                width={'100%'}\r\n                                                triangle={'hide'}\r\n                                                colors={[   '#f44336', '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                                onChangeComplete={(newColor) => {\r\n                                                    setIsDisableBtn(false);\r\n                                                    setBackgroundColor(newColor.hex) \r\n                                                }}\r\n\r\n                                            /> \r\n                                        </Box> \r\n                                        <Box \r\n                                            className={classes.inputNumber}\r\n                                        >\r\n                                            <Typography component={'h6'} gutterBottom  >\r\n                                                Color text\r\n                                            </Typography>\r\n                                            <TwitterPicker\r\n                                                width={'100%'}\r\n                                                triangle={'hide'}\r\n                                                colors={[   '#f44336', '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                                onChangeComplete={(newColor) => {\r\n                                                    setIsDisableBtn(false);\r\n                                                    setColor(newColor.hex) \r\n                                                }} \r\n                                            /> \r\n                                        </Box> \r\n                                      \r\n                                    </Box>\r\n                                    \r\n                                    {/* color */}\r\n                                    <Box className={classes.inputGroup} display=\"flex\" flexDirection=\"row\" > \r\n                                        <FormControl \r\n                                            variant='filled' \r\n                                            size='small'   \r\n                                            className={classes.inputNumber}\r\n                                        >\r\n                                            <InputLabel id=\"shadow-style-label\">Box Shadow</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"shadow-style-label\"\r\n                                                id=\"shadow-style\"\r\n                                                value={shadow}\r\n                                                onChange={(e) => {setIsDisableBtn(false); setShadow(e.target.value) }}\r\n                                            >\r\n                                                <MenuItem value={'none'}>None</MenuItem>\r\n                                                <MenuItem value={`0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),\r\n                                                0px 1px 5px 0px rgba(0,0,0,0.12)`}>Small</MenuItem>\r\n                                                <MenuItem value={`0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),\r\n                                                0px 3px 16px 2px rgba(0,0,0,0.12)`}>Medium</MenuItem>\r\n                                                <MenuItem value={`0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),\r\n                                                0px 9px 46px 8px rgba(0,0,0,0.12)`}>Large</MenuItem> \r\n                                            </Select>\r\n                                        </FormControl> \r\n                                        \r\n                                    </Box>\r\n                                     \r\n                                    {/* border */}\r\n                                    <Box className={classes.inputGroup}> \r\n                                        <Box display=\"flex\" flexDirection=\"row\" > \r\n                                            <TextField \r\n                                                    className={classes.inputNumber}\r\n                                                    type='color'\r\n                                                    label=\"Border Color\" \r\n                                                    variant=\"filled\" \r\n                                                    size='small'  \r\n                                                    value={borderColor}\r\n                                                    onChange={ (e) => { setIsDisableBtn(false);  setBorderColor(e.target.value)} }     \r\n                                            />\r\n                                            <TextField \r\n                                                    className={classes.inputNumber}\r\n                                                    type='number'\r\n                                                    label=\"Border Radius\" \r\n                                                    variant=\"filled\" \r\n                                                    size='small'  \r\n                                                    value={borderRadius}\r\n                                                    onChange={ (e) => { setIsDisableBtn(false);  setBorderRadius(Number(e.target.value)) } }     \r\n                                            />\r\n\r\n                                        </Box>\r\n                                        <Box display=\"flex\" flexDirection=\"row\" > \r\n\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Border Width\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={borderWidth}\r\n                                            onChange={ (e) => { setIsDisableBtn(false);setBorderWidth(Number(e.target.value))} }     \r\n                                        />\r\n                                        <FormControl \r\n                                            variant='filled' \r\n                                            size='small'   \r\n                                            className={classes.inputNumber}\r\n                                        >\r\n                                            <InputLabel id=\"border-style-label\">Border Style</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"border-style-label\"\r\n                                                id=\"border-style\"\r\n                                                value={borderStyle}\r\n                                                onChange={(e) => {setIsDisableBtn(false); setBorderStyle(e.target.value) }}\r\n                                            >\r\n                                                <MenuItem value={'solid'}>Solid</MenuItem>\r\n                                                <MenuItem value={'dotted'}>Dotted</MenuItem>\r\n                                                <MenuItem value={'dashed'}>Dashed</MenuItem>\r\n                                                <MenuItem value={'double'}>Double</MenuItem>\r\n                                                <MenuItem value={'groove'}>Groove</MenuItem>\r\n                                                <MenuItem value={'inset'}>Inset</MenuItem>\r\n                                                <MenuItem value={'outset'}>Outset</MenuItem>\r\n                                                <MenuItem value={'ridge'}>Ridge</MenuItem>\r\n                                                <MenuItem value={'none'}>None</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Box>\r\n                                    </Box>\r\n\r\n                                    <Box  className={classes.btnSave}>\r\n                                        <Button\r\n                                            disabled={isDisableBtn}\r\n                                        \r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            size={'medium'} \r\n                                            onClick={reSaveClassesSettings}\r\n                                        >\r\n                                            Save\r\n                                        </Button> \r\n                                    </Box>\r\n                                   \r\n                                </React.Fragment> \r\n\r\n                            </Box> \r\n                    </Drawer>\r\n                {/*  DrawerContainer */} \r\n            </Box>\r\n           \r\n                <DumbComponent\r\n                    reSaveChildren={reSaveChildren}\r\n                    removeItem={removeItem}\r\n                    data={props.data} \r\n                    classes={myClassName}\r\n                    settings={propsSettings}\r\n                />  \r\n           \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ContainerElement\r\n","import React from 'react' \r\n\r\nimport StyledComponent from \"./StyledComponent\"\r\nimport DumbComponent from \"./DumbComponent\"\r\n \r\nimport ModeContext from '../../../modeContext/ModeContext'\r\n\r\n \r\nfunction ElementCreator(props) {\r\n\r\n    const {modeDev} = React.useContext(ModeContext)   \r\n    \r\n    const propsSettings = {\r\n        maxWidth: props.data.maxWidth,\r\n        disableGutters: props.data.disableGutters,\r\n        fixed: props.data.fixed\r\n    }\r\n    \r\n    return (    \r\n        <React.Fragment>   \r\n            { \r\n                modeDev && \r\n                <StyledComponent   \r\n                    data={props.data} \r\n                    reSaveContainer={props.reSaveContainer}\r\n                    reSaveContainerStyleSettings={props.reSaveContainerStyleSettings}  \r\n                    removeContainer={props.removeContainer}   \r\n                    reSaveContainerSettings={props.reSaveContainerSettings}\r\n                />\r\n            }\r\n \r\n            {\r\n                !modeDev &&  \r\n                <DumbComponent \r\n                    data={props.data}  \r\n                    classes={props.data.classes}\r\n                    reSaveContainer={props.reSaveContainer} \r\n                    settings={propsSettings}\r\n                />\r\n            }\r\n        </React.Fragment> \r\n    )\r\n}\r\n\r\nexport default ElementCreator\r\n","import React from 'react';\r\n\r\nimport ModeContext from './ModeContext'\r\n\r\nexport default class ModeProvider extends React.Component { \r\n\r\n    state = { \r\n        modeDev: true\r\n        // modeDev: false\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <ModeContext.Provider\r\n                value={{\r\n                    modeDev: this.state.modeDev\r\n                }}\r\n            >\r\n                {this.props.children}\r\n            </ModeContext.Provider>\r\n        )\r\n    }\r\n}","import firebase from 'firebase'\r\n\r\n// import dataJson from '../data/db.json'\r\n \r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBmMnCcIyz_t3G5Ia3zaiiMTLtQyrUt1Eg\",\r\n    authDomain: \"sitebuilder-74d57.firebaseapp.com\",\r\n    projectId: \"sitebuilder-74d57\",\r\n    storageBucket: \"sitebuilder-74d57.appspot.com\",\r\n    messagingSenderId: \"590275119909\",\r\n    appId: \"1:590275119909:web:5d50bcbd54a317647428cc\"\r\n}; \r\n\r\nconst dataJson = {\r\n    \"title\": \"Page 1 Title\",\r\n    \"children\": [\r\n      {\r\n        \"id\": \"27ff711-b10-c22e-e00b-2d107ba81883\",\r\n        \"type\": \"heading\",\r\n        \"variant\": \"h1\",\r\n        \"responseFont\": true,\r\n        \"classes\": {\r\n          \"display\": \"block\",\r\n          \"paddingTop\": 0,\r\n          \"paddingBottom\": 0,\r\n          \"paddingLeft\": 0,\r\n          \"paddingRight\": 0,\r\n          \"marginTop\": 0,\r\n          \"marginBottom\": 15,\r\n          \"marginLeft\": 0,\r\n          \"marginRight\": 0,\r\n          \"color\": \"#161616\",\r\n          \"backgroundColor\": \"#ffffff\",\r\n          \"textAlign\": \"center\",\r\n          \"fontSize\": 25,\r\n          \"fontWeight\": 300,\r\n          \"lineHeight\": 1.43\r\n        },\r\n        \"text\": \"Main Title of <b>Page</b>\",\r\n        \"prop\": {}\r\n      },\r\n      {\r\n        \"id\": \"6742bff-a65b-eecf-ae85-8eb7fc035eca\",\r\n        \"type\": \"paragraph\",\r\n        \"variant\": \"p\",\r\n        \"classes\": {\r\n          \"display\": \"block\",\r\n          \"paddingTop\": 0,\r\n          \"paddingBottom\": 0,\r\n          \"paddingLeft\": 0,\r\n          \"paddingRight\": 0,\r\n          \"marginTop\": 0,\r\n          \"marginBottom\": 16,\r\n          \"marginLeft\": 0,\r\n          \"marginRight\": 0,\r\n          \"color\": \"#141414\",\r\n          \"backgroundColor\": \"transparent\",\r\n          \"textAlign\": \"left\",\r\n          \"fontSize\": 14,\r\n          \"fontWeight\": 400,\r\n          \"lineHeight\": 1.4,\r\n          \"borderColor\": \"transperent\",\r\n          \"borderStyle\": \"solid\",\r\n          \"borderRadius\": \"0px\",\r\n          \"borderWidth\": \"0px\"\r\n        },\r\n        \"text\": \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Iste veritatis in optio incidunt, nobis beatae molestiae, ea soluta facilis maxime quis officia at quaerat, ipsam architecto excepturi! Voluptas inventore explicabo quidem non blanditiis repellat laboriosam magni. Ullam deserunt dolorem labore eum corrupti quae impedit cumque?\",\r\n        \"prop\": {}\r\n      },\r\n      {\r\n        \"id\": \"1fb643-5b8a-4e3b-307a-30afae3144\",\r\n        \"type\": \"heading\",\r\n        \"variant\": \"h3\",\r\n        \"classes\": {\r\n          \"display\": \"block\",\r\n          \"paddingTop\": 0,\r\n          \"paddingBottom\": 0,\r\n          \"paddingLeft\": 0,\r\n          \"paddingRight\": 0,\r\n          \"marginTop\": 0,\r\n          \"marginBottom\": 5,\r\n          \"marginLeft\": 0,\r\n          \"marginRight\": 0,\r\n          \"color\": \"inherit\",\r\n          \"backgroundColor\": \"transparent\",\r\n          \"textAlign\": \"left\",\r\n          \"fontSize\": 14,\r\n          \"fontWeight\": 700,\r\n          \"lineHeight\": 1.43\r\n        },\r\n        \"text\": \"Second heading with <i> italic </i>\",\r\n        \"prop\": {},\r\n        \"responseFont\": false\r\n      },\r\n      {\r\n        \"id\": \"4e070d3-bfee-da-28cc-652a6ab50cff\",\r\n        \"type\": \"paragraph\",\r\n        \"variant\": \"p\",\r\n        \"classes\": {\r\n          \"display\": \"block\",\r\n          \"paddingTop\": 12,\r\n          \"paddingBottom\": 12,\r\n          \"paddingLeft\": 12,\r\n          \"paddingRight\": 12,\r\n          \"marginTop\": 0,\r\n          \"marginBottom\": 8,\r\n          \"marginLeft\": 0,\r\n          \"marginRight\": 0,\r\n          \"color\": \"#11d801\",\r\n          \"backgroundColor\": \"#fcfff4\",\r\n          \"textAlign\": \"left\",\r\n          \"fontSize\": 14,\r\n          \"fontWeight\": 700,\r\n          \"lineHeight\": 1.4,\r\n          \"borderColor\": \"#cdff91\",\r\n          \"borderStyle\": \"solid\",\r\n          \"borderRadius\": 8,\r\n          \"borderWidth\": 3\r\n        },\r\n        \"text\": \"Paragraph Block with text and green colors and border \",\r\n        \"prop\": {}\r\n      },\r\n      {\r\n        \"id\": \"c7c14e3-801b-e011-67b5-58f84381a6f5\",\r\n        \"type\": \"paragraphImage\",\r\n        \"variant\": \"p\",\r\n        \"image\": {\r\n          \"url\": \"https://panor.ru/img/default/category.png\",\r\n          \"classes\": {\r\n            \"marginTop\": 0,\r\n            \"marginRight\": 8,\r\n            \"width\": 40,\r\n            \"height\": 40,\r\n            \"borderWidth\": \"0px\",\r\n            \"borderRadius\": 100,\r\n            \"borderColor\": \"inherit\",\r\n            \"borderStyle\": \"none\",\r\n            \"float\": \"none\"\r\n          },\r\n          \"title\": \"title\",\r\n          \"placement\": \"top\"\r\n        },\r\n        \"classes\": {\r\n          \"display\": \"flex\",\r\n          \"paddingTop\": 0,\r\n          \"paddingBottom\": 0,\r\n          \"paddingLeft\": 0,\r\n          \"paddingRight\": 0,\r\n          \"marginTop\": 0,\r\n          \"marginBottom\": 30,\r\n          \"marginLeft\": 0,\r\n          \"marginRight\": 0,\r\n          \"color\": \"inherit\",\r\n          \"backgroundColor\": \"transparent\",\r\n          \"textAlign\": \"left\",\r\n          \"fontSize\": 14,\r\n          \"fontWeight\": 400,\r\n          \"lineHeight\": 1.4,\r\n          \"borderColor\": \"inherit\",\r\n          \"borderStyle\": \"none\",\r\n          \"borderRadius\": \"0px\",\r\n          \"borderWidth\": \"0px\"\r\n        },\r\n        \"text\": \"Paragraph  Lorem ipsum dolor sit amet consectetur adipisicing elit. Iste veritatis in optio incidunt, nobis beatae molestiae, ea soluta facilis maxime quis officia at quaerat, ipsam architecto excepturi! Voluptas inventore explicabo quidem non blanditiis repellat laboriosam magni. Ullam deserunt dolorem labore eum corrupti quae impedit cumque? Lorem ipsum dolor sit amet consectetur adipisicing elit. Iste veritatis in optio incidunt, nobis beatae molestiae, ea soluta facilis maxime quis officia at quaerat, ipsam architecto excepturi! Voluptas inventore explicabo quidem non blanditiis repellat laboriosam magni. Ullam deserunt dolorem labore eum corrupti quae impedit cumque?\",\r\n        \"prop\": {}\r\n      }, \r\n      {\r\n        \"id\": \"344e26a-b5ef-ba6c-7035-24faee7a28\",\r\n        \"type\": \"paragraphImage\",\r\n        \"variant\": \"p\",\r\n        \"image\": {\r\n          \"url\": \"https://panor.ru/img/default/category.png\",\r\n          \"title\": \"5\",\r\n          \"placement\": \"top\",\r\n          \"classes\": {\r\n            \"width\": 100,\r\n            \"height\": 100,\r\n            \"borderWitdh\": 0,\r\n            \"borderRadius\": 0,\r\n            \"borderColor\": \"inherit\",\r\n            \"borderStyle\": \"none\",\r\n            \"float\": \"none\"\r\n          }\r\n        },\r\n        \"classes\": {\r\n          \"display\": \"flex\",\r\n          \"paddingTop\": 0,\r\n          \"paddingBottom\": 0,\r\n          \"paddingLeft\": 0,\r\n          \"paddingRight\": 0,\r\n          \"marginTop\": 0,\r\n          \"marginBottom\": 8,\r\n          \"marginLeft\": 0,\r\n          \"marginRight\": 0,\r\n          \"color\": \"inherit\",\r\n          \"backgroundColor\": \"transparent\",\r\n          \"textAlign\": \"left\",\r\n          \"fontSize\": 14,\r\n          \"fontWeight\": 400,\r\n          \"lineHeight\": 1.4,\r\n          \"borderColor\": \"inherit\",\r\n          \"borderStyle\": \"none\",\r\n          \"borderRadius\": \"0px\",\r\n          \"borderWidth\": \"0px\"\r\n        },\r\n        \"text\": \"Paragraph with Image\",\r\n        \"prop\": {}\r\n      },\r\n      {\r\n        \"id\": \"c80bac-4fad-ccb-f10b-d7210b5caa\",\r\n        \"type\": \"paragraph\",\r\n        \"variant\": \"p\",\r\n        \"classes\": {\r\n          \"display\": \"block\",\r\n          \"paddingTop\": 0,\r\n          \"paddingBottom\": 0,\r\n          \"paddingLeft\": 0,\r\n          \"paddingRight\": 0,\r\n          \"marginTop\": 0,\r\n          \"marginBottom\": 8,\r\n          \"marginLeft\": 0,\r\n          \"marginRight\": 0,\r\n          \"color\": \"inherit\",\r\n          \"backgroundColor\": \"transparent\",\r\n          \"textAlign\": \"left\",\r\n          \"fontSize\": 14,\r\n          \"fontWeight\": 400,\r\n          \"lineHeight\": 1.4,\r\n          \"borderColor\": \"inherit\",\r\n          \"borderStyle\": \"none\",\r\n          \"borderRadius\": \"0px\",\r\n          \"borderWidth\": \"0px\"\r\n        },\r\n        \"text\": \"Paragraph <strong>With Strong Text</strong>\",\r\n        \"prop\": {}\r\n      }\r\n    ]\r\n  }\r\n\r\nclass Firebase { \r\n    constructor() {\r\n        const firebaseApp =  firebase.initializeApp(firebaseConfig)\r\n        this.db = firebaseApp.firestore()\r\n        console.log(\"constructor\")\r\n    } \r\n    \r\n    async test() {\r\n        return this.db.collection('site1').doc('page1').set(dataJson)\r\n    } \r\n    // async getTest() { \r\n    //     const citiesRef = this.db.collection(\"test\");\r\n    //     const snapshot = await citiesRef.get();\r\n\r\n    //     if (snapshot.empty) {\r\n    //         console.log('No matching documents.');\r\n    //         return;\r\n    //       }  \r\n    //     snapshot.forEach(doc => {\r\n    //         console.log(doc.id, '=>', doc.data());\r\n    //     });\r\n        \r\n    // } \r\n     \r\n}\r\n\r\n// .collection('test') - имя сайта (site1, site2)\r\n// .doc() - имя документа для обозначения страницы (можно использовать дефолтные, но тогда нужно передавать какую именно страницу обновляем )\r\n\r\n\r\n// firebase.initializeApp(firebaseConfig)\r\n\r\n// const db = firebase.firestore()\r\n\r\n// export default db \r\n\r\n\r\nexport default new Firebase()","import React, { useState } from \"react\"\nimport uuid from 'react-uuid' \nimport { AppBar, Toolbar, Typography, Button, Box } from \"@material-ui/core\";\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { indigo } from '@material-ui/core/colors'\n  \nimport ContainerElement from './components/library/container/ElementCreator' \nimport ContainerLayout from './components/library/container/containerLayout.json' \n\nimport ModeProvider from './modeContext/ModeProvider'\n\nimport firebase from './firebase/firebase'\n  \nfunction App() { \n\n  console.log('App')\n\n  const [data, setData] = useState({})\n  const [items, setItems] = useState([])\n  //  title\n//  slug\n//  id\n\n  React.useEffect( () => {\n    fetchData()\n  }, [])\n\n  const fetchData = async () => {  \n     \n    const pageRef = firebase.db.collection(\"site1\").doc('page1')\n    const doc = await pageRef.get();\n    \n    if (!doc.exists) {\n      console.log('No such document!');\n    } else {\n      console.log('Document data:', doc.data());\n      \n      setData(doc.data())  \n      setItems(doc.data().items)  \n    }\n \n  }\n\n\n  // childrenContainer - массив новых заголовков,параграфов для контейнера под номером id \n  const reSaveContainer = async (id, childrenContainer) => { \n\n    console.log('reSaveContainer')\n      \n    let newData = Object.assign({}, data)\n    newData.items = items\n\n    Object.keys(newData.items).map( (elem) => { \n       if(newData.items[elem].id === id) {\n          newData.items[elem].children = childrenContainer \n      }\n    })\n \n    setData(newData)\n    setItems(newData.items)\n\n    await firebase.db.collection(\"site1\").doc('page1').update({\n      items: newData.items, \n    }); \n  }\n\n\n\n  const reSaveContainerStyleSettings = async (id, classes, settings) => { \n    console.log('reSaveContainerStyleSettings')\n    let newData = Object.assign({}, data)\n      \n    Object.keys(newData.items).map( (elem) => { \n      if(newData.items[elem].id === id) {\n          newData.items[elem].classes = classes \n          newData.items[elem].disableGutters = settings.disableGutters \n          newData.items[elem].fixed = settings.fixed \n          newData.items[elem].maxWidth = settings.maxWidth \n          newData.items[elem].innerContainer = settings.innerContainer \n      }\n    }) \n\n    setData(newData)\n    setItems(newData.items)\n\n    await firebase.db.collection(\"site1\").doc('page1').update({\n      items: newData.items\n    }); \n  }\n \n \n  const addContainer = async () => {  \n    let newItems = items.slice()\n\n    let newCont = Object.assign({}, ContainerLayout) \n    newCont.id = uuid()\n \n    newItems.push(newCont) \n\n    console.log(newCont, ContainerLayout)\n\n    setItems(newItems)\n    await firebase.db.collection(\"site1\").doc('page1').update({\n      items: newItems\n    });  \n    \n  }\n\n  const removeContainer = async (id) => { \n    const filtered = items.filter((item) => (item.id !== id))  \n    setItems(filtered) \n     \n    await firebase.db.collection(\"site1\").doc('page1').update({\n      items: filtered\n    });\n    console.log(filtered)\n  }\n\n  function renderContainers () { \n    // console.log(data)\n    return Object.keys(items).map( (key) => { \n       return ( \n        <ContainerElement \n          key={items[key].id} \n          data={items[key]} \n          reSaveContainer={reSaveContainer}\n          reSaveContainerStyleSettings={reSaveContainerStyleSettings} \n          removeContainer={removeContainer}\n        /> \n      ) \n    })\n  } \n  \n\n\n  return (\n    <ModeProvider>  \n      <div className=\"App\">\n        <CssBaseline/>  \n         \n          <AppBar position=\"static\" style={{backgroundColor: indigo[200] }}>\n            <Toolbar variant=\"dense\">\n              <Typography variant=\"h6\" >\n                Page actions\n              </Typography>\n              <Box mx={2}>\n                <Button color={'primary'} variant={'contained'} onClick={addContainer}>\n                    Add new container\n                </Button> \n              </Box>\n              <Box mx={2}>\n                <Button color={'primary'} variant={'outlined'} disabled={true} >\n                    More settings\n                </Button> \n              </Box>\n            </Toolbar>\n          </AppBar>\n          \n\n          <div> \n            { \n              renderContainers()  \n            }\n          </div>\n      </div>\n    </ModeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom'; \nimport App from './App';\n\n// import \"./assets/style.scss\"\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}