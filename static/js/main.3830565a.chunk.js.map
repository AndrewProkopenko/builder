{"version":3,"sources":["modeContext/ModeContext.js","modeContext/ModeProvider.js","components/Home.js","components/Error.js","components/library/heading/DumbComponent.js","components/library/heading/StyledComponent.js","components/library/heading/ElementCreator.js","components/library/paragraph/DumbComponent.js","components/library/paragraph/StyledComponent.js","components/library/paragraph/ElementCreator.js","components/library/paragraphImage/DumbComponent.js","components/library/image/DumbComponent.js","components/library/paragraphImage/StyledComponent.js","components/library/paragraphImage/ElementCreator.js","components/library/container/DumbComponent.js","components/library/container/StyledComponent.js","components/library/container/ElementCreator.js","firebase/firebase.js","components/pages/SinglePage.js","Router/RouterComponent.js","App.js","reportWebVitals.js","index.js"],"names":["ModeContext","React","createContext","ModeProvider","state","modeDev","Provider","value","this","props","children","Component","Home","Error","Box","display","flexDirection","alignItems","mt","Typography","variant","gutterBottom","to","DumbComponent","classes","makeStyles","theme","myClassName","className","useStyles","classeForResp","isResponsiveFont","Fragment","component","data","textChildren","dangerouslySetInnerHTML","__html","renderText","StyledComponent","console","log","useState","top","paddingTop","left","paddingLeft","bottom","paddingBottom","right","paddingRight","padding","setPadding","marginTop","marginLeft","marginBottom","marginRight","margin","setMargin","color","setColor","backgroundColor","setBackgroundColor","textAlign","setTextAlign","fontSize","setFontSize","fontWeight","setFontWeight","lineHeight","setLineHeight","responseFont","setIsResponsiveFont","text","textInDumb","setTextInDumb","isDisableBtn","setIsDisableBtn","open","setOpen","inputNumber","flexGrow","width","inputGroup","border","maxWidth","btnSave","position","zIndex","tooltip","height","opacity","dumbItemContainer","outline","transition","transitions","duration","shorter","easing","easeIn","boxShadow","shadows","cursor","outlineColor","palette","error","light","dumbItem","dumbItemDelete","menu","maxHeight","minHeight","overflowY","menuTitle","justifyContent","borderBottom","showInput","dataNew","handlePadding","e","direction","newPadding","Object","assign","Number","target","handleMargin","newMargin","Grid","container","style","Modal","aria-labelledby","onClose","DialogContent","handle","cancel","id","mb","TextField","type","label","fullWidth","onChange","focus","FormControlLabel","control","Switch","checked","name","Tooltip","title","IconButton","InfoOutlined","size","triangle","colors","onChangeComplete","newColor","hex","FormControl","InputLabel","Select","labelId","MenuItem","Button","disabled","onClick","sentData","reSaveChildren","item","xs","event","aria-controls","aria-haspopup","prop","aria-label","removeItem","DeleteOutline","ElementCreator","useContext","imageStyle","image","borderColor","setBorderColor","borderStyle","setBorderStyle","borderWidth","setBorderWidth","borderRadius","setBorderRadius","setDisplay","imageAccordion","imagePreview","primary","multiline","rowsMax","FormGroup","row","imageClassName","url","placement","src","alt","titleImg","imageTitle","setImageTitle","imagePlacement","setImagePlacement","imageWidth","setImageWidth","imageHeight","setImageHeight","imageBorderColor","setImageBorderColor","imageBorderStyle","setImageBorderStyle","imageBorderWidth","setImageBorderWidth","imageBorderRadius","setImageBorderRadius","float","imageFloat","setImageFloat","imageMargin","setImageMargin","handleImageMargin","Accordion","AccordionSummary","expandIcon","px","pt","pb","htmlFor","alert","ml","Container","settings","fixed","disableGutters","innerContainer","map","ContainerElement","setFlexDirection","shadow","setShadow","setChildren","settingGutter","setSettingGutter","settingFixed","setSettingFixed","settingMaxWidth","setSettingMaxWidth","settingInnerContainer","setSettingInnerContainer","anchorEl","setAnchorEl","propsSettings","btnDrawerStyle","minWidth","containerWrapper","main","mtView","shortest","mbView","settingsItem","toggleDrawer","handleHeadingMenuClose","addHeading","a","newChildren","slice","newItem","libraryHeading","uuid","libraryParagraph","libraryParagraphImage","push","reSaveContainer","slicedChild","forEach","key","window","confirm","filtered","filter","swapContainer","ButtonGroup","orientation","Drawer","anchor","removeContainer","mr","clone","currentTarget","Menu","keepMounted","Boolean","reSaveContainerStyleSettings","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","dataJson","firebaseApp","firebase","initializeApp","db","firestore","collection","doc","set","SinglePage","pageId","match","params","setData","items","setItems","isUpdate","setIsUpdate","useEffect","fetchData","pageRef","get","exists","childrenContainer","newData","keys","elem","update","then","addContainer","newItems","newCont","ContainerLayout","activeIndex","indexOf","length","movedItem","placeItem","AppBar","indigo","Toolbar","mx","CircularProgress","thickness","RouterComponent","exact","path","render","App","CssBaseline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3830565a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ModeContext = React.createContext()\r\n\r\nexport default ModeContext","import React from 'react';\r\n\r\nimport ModeContext from './ModeContext'\r\n\r\nexport default class ModeProvider extends React.Component { \r\n\r\n    state = { \r\n        modeDev: true\r\n        // modeDev: false\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <ModeContext.Provider\r\n                value={{\r\n                    modeDev: this.state.modeDev\r\n                }}\r\n            >\r\n                {this.props.children}\r\n            </ModeContext.Provider>\r\n        )\r\n    }\r\n}","import React from 'react'\r\n\r\nfunction Home() {\r\n    return (\r\n        <div>\r\n            Home\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","\r\nimport React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { Box, Typography} from '@material-ui/core'\r\n\r\nfunction Error() {\r\n    return ( \r\n        <Box \r\n            display='flex' \r\n            flexDirection=\"column\" \r\n            alignItems='center'\r\n            mt={5}\r\n        >\r\n            <Typography variant='h5' gutterBottom>\r\n                This page isn`t available\r\n            </Typography>\r\n            <NavLink to='/'>\r\n                Home\r\n            </NavLink>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Error\r\n","import React from 'react'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Box } from '@material-ui/core';\r\n// import { Typography } from '@material-ui/core';\r\n\r\nfunction DumbComponent(props) {\r\n  \r\n    const useStyles = makeStyles((theme) => ({\r\n        myClassName: props.className \r\n      }));\r\n    const classes = useStyles();\r\n \r\n    \r\n    const classeForResp = props.isResponsiveFont ? 'resposive-font-size' : '' \r\n\r\n    const renderText = () => {\r\n        if(props.textChildren) { \r\n            return  <span dangerouslySetInnerHTML={{__html: props.textChildren}}></span>\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <React.Fragment>\r\n             <Box \r\n                component={props.data.variant} \r\n                className={`${classes.myClassName} ${classeForResp}`} \r\n            >\r\n                { renderText() } \r\n            </Box>\r\n\r\n\r\n            {/* <Typography variant={props.data.variant} className={[classes.myClassName, classeForResp]} >\r\n                { \r\n                    props.textChildren\r\n                }\r\n            </Typography> */} \r\n            \r\n\r\n            {/* {  \r\n                React.createElement(`${props.data.variant}`, { className: `${classes.myClassName} ${classeForResp}` }, renderText() ) \r\n            } */}\r\n        </React.Fragment>\r\n    )\r\n} \r\n\r\nexport default DumbComponent\r\n","import React from 'react'  \r\n\r\nimport Draggable from 'react-draggable';\r\nimport { TwitterPicker } from 'react-color';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { \r\n    FormControlLabel, \r\n    Switch,\r\n    Grid, \r\n    TextField, \r\n    Button, \r\n    FormControl,\r\n    InputLabel,\r\n    Select, \r\n    MenuItem,  \r\n    IconButton, \r\n    Typography,\r\n    Modal,\r\n    Box,\r\n    Tooltip,\r\n    DialogContent\r\n\r\n} from '@material-ui/core'\r\n\r\nimport DumbComponent from \"./DumbComponent\" \r\n \r\n\r\nimport OpenWithIcon from '@material-ui/icons/OpenWith';\r\nimport { DeleteOutline, InfoOutlined } from '@material-ui/icons';\r\n\r\nconst StyledComponent = (props) => {  \r\n\r\n    console.log('styled heading work')\r\n\r\n    const [padding, setPadding] = React.useState({ \r\n        top:  props.data.classes.paddingTop , \r\n        left:  props.data.classes.paddingLeft ,\r\n        bottom: props.data.classes.paddingBottom , \r\n        right: props.data.classes.paddingRight \r\n    })\r\n    const [margin, setMargin] = React.useState({\r\n        top:  props.data.classes.marginTop , \r\n        left:  props.data.classes.marginLeft ,\r\n        bottom: props.data.classes.marginBottom , \r\n        right: props.data.classes.marginRight \r\n    })\r\n    \r\n    const [color, setColor] = React.useState(props.data.classes.color || 'inherit')\r\n    const [backgroundColor, setBackgroundColor] = React.useState(props.data.classes.backgroundColor ||  'transperent')\r\n    const [textAlign, setTextAlign] = React.useState(props.data.classes.textAlign ||  'left')\r\n    const [display, setDisplay] = React.useState(props.data.classes.display ||  'block')\r\n    const [fontSize, setFontSize] = React.useState(props.data.classes.fontSize ||  16)\r\n    const [fontWeight, setFontWeight] = React.useState(props.data.classes.fontWeight ||  400)\r\n    const [lineHeight, setLineHeight] = React.useState(props.data.classes.lineHeight ||  1.38)\r\n\r\n    const [isResponsiveFont, setIsResponsiveFont] = React.useState(props.data.responseFont || false)\r\n\r\n    const [textInDumb, setTextInDumb] = React.useState(props.data.text)\r\n    const [isDisableBtn, setIsDisableBtn] = React.useState(true) \r\n\r\n    \r\n    const [open, setOpen] = React.useState(false);\r\n         \r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        inputNumber: {\r\n            flexGrow: 1, \r\n            margin: 5, \r\n            width: \"100%\"\r\n        }, \r\n        inputGroup: {\r\n            border: \"1px solid #f5f5f5\", \r\n            padding: 3, \r\n            inputNumber: { \r\n                maxWidth: \"100%\"\r\n\r\n            }\r\n        }, \r\n        btnSave: { \r\n            position: 'sticky', \r\n            zIndex: theme.zIndex.tooltip,\r\n            bottom: 0, \r\n            left: 0, \r\n            right: 0,\r\n            height: 80, \r\n            backgroundColor: '#fff', \r\n            \r\n            '&>button': {\r\n                marginTop: 20, \r\n                marginBottom: 30, \r\n                marginLeft: 5, \r\n                opacity: 1,  \r\n                paddingLeft: 40, \r\n                paddingRight: 40\r\n            }\r\n        },\r\n        dumbItemContainer: { \r\n            position: 'relative', \r\n            outline: '1px solid #f000',\r\n            transition: `${theme.transitions.duration.shorter}ms ${theme.transitions.easing.easeIn} outline`,\r\n            '&:hover' : {   \r\n                boxShadow: theme.shadows[10], \r\n                cursor: 'pointer',\r\n                outlineColor: `${theme.palette.error.light}`,\r\n                '&>button' : { \r\n                    opacity: 1\r\n                }\r\n            }, \r\n        },\r\n        dumbItem: { \r\n            position: 'relative',\r\n            transition: \"300ms cubic-bezier(0.4, 0, 1, 1)\",\r\n            \r\n        }, \r\n        dumbItemDelete : { \r\n            opacity: 0,\r\n            position: 'absolute', \r\n            zIndex: 9, \r\n            top: 3, \r\n            right: 5,\r\n            backgroundColor: '#fff',\r\n            transition: \"100ms cubic-bezier(0.4, 0, 1, 1)\",\r\n            '&:hover' : { \r\n                backgroundColor: theme.palette.error.light\r\n            }\r\n        }, \r\n         \r\n        menu: {    \r\n            position: \"absolute\", \r\n            left: \"calc(50% - 200px)\",\r\n            top: 50, \r\n            backgroundColor: '#fff',\r\n            padding: 10 , \r\n            paddingBottom: 0, \r\n            maxWidth: 400,  \r\n            width: 400,\r\n            maxHeight: 'calc(100vh - 100px)', \r\n            minHeight: 500,\r\n            overflowY: 'scroll'\r\n        },\r\n        menuTitle: {\r\n            display: 'flex', \r\n            alignItems: 'center', \r\n            justifyContent: 'space-between', \r\n            fontSize: 14, \r\n            borderBottom: '1px solid #eaeaea',\r\n            paddingBottom: 6,\r\n            marginBottom: 10, \r\n            cursor: 'move'\r\n        },\r\n        showInput: {\r\n        }\r\n        \r\n      }));\r\n    \r\n    const myClassName = { \r\n        display: display,\r\n        paddingTop: padding.top,\r\n        paddingBottom: padding.bottom,\r\n        paddingLeft: padding.left,\r\n        paddingRight: padding.right,\r\n        marginTop: margin.top,\r\n        marginBottom: margin.bottom,\r\n        marginLeft: margin.left,\r\n        marginRight: margin.right,\r\n        color: color,\r\n        backgroundColor: backgroundColor,\r\n        textAlign: textAlign,\r\n        fontSize: fontSize,\r\n        fontWeight: fontWeight, \r\n        lineHeight: lineHeight\r\n    } \r\n    const classes = useStyles();\r\n\r\n    //const dataNew - props for Dumb Component\r\n    const dataNew = {...props.data, ...{\r\n        classes: myClassName\r\n    }}  \r\n\r\n    const handlePadding = (e, direction) => {  \r\n        let newPadding = Object.assign({}, padding)\r\n        newPadding[direction] = Number(e.target.value)\r\n        setPadding(newPadding)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n    const handleMargin= (e, direction) => {  \r\n        let newMargin = Object.assign({}, margin)\r\n        newMargin[direction] = Number(e.target.value)\r\n        setMargin(newMargin)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n\r\n    const saveData = () => {   \r\n        const sentData = Object.assign({}, props.data)\r\n\r\n        sentData.classes = myClassName\r\n        sentData.text = textInDumb\r\n        sentData.responseFont = isResponsiveFont\r\n        props.reSaveChildren(props.data.id, sentData)\r\n        setIsDisableBtn(true); \r\n    }\r\n    const removeItem = () => {  \r\n        props.removeItem(props.data.id)\r\n    };\r\n    \r\n    const handleInputFocus = (event) => {  \r\n        setOpen(true);\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n    \r\n\r\n    return ( \r\n            <Grid container style={{position: 'relative'}}> \r\n                <Modal \r\n                    open={open} \r\n                    // PaperComponent={PaperComponent}\r\n                    aria-labelledby=\"draggable-dialog-title\"\r\n                    onClose={handleClose} \r\n                >\r\n                    <DialogContent>\r\n                        <Draggable  handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'} >\r\n                            <div className={classes.menu}  >\r\n                                <Typography \r\n                                    component='p' \r\n                                    className={classes.menuTitle}\r\n                                    id=\"draggable-dialog-title\"\r\n                                >\r\n                                    Задать заголовку текст и стили <OpenWithIcon/>\r\n                                </Typography>\r\n\r\n                                {/* text input */}\r\n                                <Box mb={2} >\r\n                                    <TextField \r\n                                        type='text' \r\n                                        label=\"Text input\"\r\n                                        fullWidth\r\n                                        value={textInDumb}\r\n                                        onChange={(e) => { setIsDisableBtn(false); setTextInDumb(e.target.value); e.target.focus() }}\r\n                                    />    \r\n                                </Box>  \r\n\r\n                                {/* Responsive font */}\r\n                                <Box mb={2}>\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Switch\r\n                                                    checked={isResponsiveFont}\r\n                                                    onChange={() => {  setIsDisableBtn(false); setIsResponsiveFont(!isResponsiveFont) }}\r\n                                                    name=\"checkedB\"\r\n                                                    color=\"primary\"\r\n                                                />\r\n                                            }\r\n                                            label=\"Set Responsive Font Size\"\r\n                                        />\r\n                                        <Tooltip title=\"Если включено, шрифт будет меньше размером на мобильных устройствах. \"  >\r\n                                            <IconButton>\r\n                                                <InfoOutlined/>\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                </Box>\r\n\r\n                                {/* margin */}\r\n                                <Box className={classes.inputGroup}>\r\n                                    <Box display=\"flex\" flexDirection=\"row\"  > \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Margin Top\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={margin.top}\r\n                                            onChange={ (e) => { handleMargin(e, 'top') } }     \r\n                                        />\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Margin Bottom\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={margin.bottom}\r\n                                            onChange={ (e) => { handleMargin(e, 'bottom') } }     \r\n                                        />\r\n                                    </Box>\r\n                                    <Box display=\"flex\" flexDirection=\"row\" > \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Margin Left\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={margin.left}\r\n                                            onChange={ (e) => { handleMargin(e, 'left') } }     \r\n                                        />\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Margin Right\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={margin.right}\r\n                                            onChange={ (e) => { handleMargin(e, 'right') } }     \r\n                                        />\r\n                                    </Box>\r\n                                </Box>\r\n                                \r\n                                {/* padding */}\r\n                                <Box className={classes.inputGroup}>\r\n                                    <Box display=\"flex\" flexDirection=\"row\" > \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Padding Top\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={padding.top}\r\n                                            onChange={ (e) => { handlePadding(e, 'top') } }     \r\n                                        />\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Padding Bottom\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={padding.bottom}\r\n                                            onChange={ (e) => { handlePadding(e, 'bottom') } }     \r\n                                        />\r\n                                    </Box>\r\n                                    <Box display=\"flex\" flexDirection=\"row\" > \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Padding Left\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={padding.left}\r\n                                            onChange={ (e) => { handlePadding(e, 'left') } }     \r\n                                        />\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Padding Right\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={padding.right}\r\n                                            onChange={ (e) => { handlePadding(e, 'right') } }     \r\n                                        />\r\n                                    </Box>\r\n                \r\n                                </Box>\r\n                                \r\n                                {/* bg-color */}\r\n                                <Box className={classes.inputGroup} display=\"flex\" flexDirection=\"row\" > \r\n                                    <Box \r\n                                        className={classes.inputNumber}\r\n                                    >\r\n                                        <Typography  component={'h6'} gutterBottom  >\r\n                                            Background  \r\n                                        </Typography>\r\n                                        <TwitterPicker\r\n                                            width={'100%'}\r\n                                            triangle={'hide'}\r\n                                            color={backgroundColor}\r\n                                            colors={[ '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                            onChangeComplete={(newColor) => {\r\n                                                setIsDisableBtn(false);\r\n                                                setBackgroundColor(newColor.hex) \r\n                                            }}\r\n\r\n                                        /> \r\n                                    </Box> \r\n                                    <Box \r\n                                        className={classes.inputNumber}\r\n                                    >\r\n                                        <Typography  component={'h6'} gutterBottom  >\r\n                                            Color  \r\n                                        </Typography>\r\n                                        <TwitterPicker\r\n                                            width={'100%'}\r\n                                            triangle={'hide'}\r\n                                            colors={[ '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                            color={color}\r\n                                            onChangeComplete={(newColor) => {\r\n                                                setIsDisableBtn(false);\r\n                                                setColor(newColor.hex) \r\n                                            }}\r\n\r\n                                        /> \r\n                                    </Box>  \r\n                                </Box>\r\n                                \r\n                                {/* font */}\r\n                                <Box className={classes.inputGroup}> \r\n                                    <Box display=\"flex\" flexDirection=\"row\" >  \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Font Size\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={fontSize}\r\n                                            onChange={ (e) => {setIsDisableBtn(false); setFontSize(Number(e.target.value))} }     \r\n                                        /> \r\n                                        <FormControl \r\n                                            variant='filled' \r\n                                            size='small'   \r\n                                            className={classes.inputNumber}\r\n                                        >\r\n                                            <InputLabel id=\"weight-select-label\">Font Weight</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"weight-select-label\"\r\n                                                id=\"weight-select\"\r\n                                                value={fontWeight}\r\n                                                onChange={(e) => {setIsDisableBtn(false); setFontWeight(Number(e.target.value)) }}\r\n                                            >\r\n                                            <MenuItem value={300}>Light</MenuItem>\r\n                                            <MenuItem value={400}>Regular</MenuItem>\r\n                                            <MenuItem value={700}>Bold</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    \r\n                                        \r\n                                    </Box>\r\n                                    <Box display=\"flex\" flexDirection=\"row\" >\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Line Height (em)\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={lineHeight}\r\n                                        onChange={ (e) => {setIsDisableBtn(false); setLineHeight(Number(e.target.value))} }     \r\n                                    />\r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.inputNumber}\r\n                                    >\r\n                                        <InputLabel id=\"align-select-label\">Text Align</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"align-select-label\"\r\n                                            id=\"align-select\"\r\n                                            value={textAlign}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setTextAlign((e.target.value)) }}\r\n                                        >\r\n                                        <MenuItem value={'left'}>Left</MenuItem>\r\n                                        <MenuItem value={'center'}>Center</MenuItem>\r\n                                        <MenuItem value={'right'}>Right</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Box>\r\n                                </Box>\r\n                                \r\n                                <Box className={classes.btnSave}>\r\n                                    <Button \r\n                                        disabled={isDisableBtn} \r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        size={'medium'} \r\n                                        onClick={saveData}\r\n                                    >\r\n                                        Save\r\n                                    </Button> \r\n                                </Box>\r\n                            \r\n                            </div>\r\n                        </Draggable>\r\n                    </DialogContent>\r\n                    \r\n                </Modal>\r\n                \r\n                <Grid item xs={12}  className={classes.dumbItemContainer }>  \r\n                        <div \r\n                            className={classes.dumbItem }\r\n                            onClick={handleInputFocus}\r\n                            aria-controls=\"simple-menu\" aria-haspopup=\"true\"  \r\n                        >\r\n                            <DumbComponent \r\n                                data={dataNew} \r\n                                className={myClassName}\r\n                                isResponsiveFont={isResponsiveFont}\r\n                                prop={props.data.prop} \r\n                                textChildren={textInDumb}\r\n                            />\r\n                           \r\n                        </div>  \r\n                        <IconButton \r\n                            className={ classes.dumbItemDelete}\r\n                            size=\"small\"\r\n                            aria-label=\"delete\"\r\n                            onClick={removeItem}\r\n                        >\r\n                            <DeleteOutline/>\r\n                        </IconButton>\r\n \r\n                </Grid>\r\n            </Grid>\r\n           \r\n \r\n    )\r\n}\r\n\r\nexport default StyledComponent\r\n","import React from 'react' \r\n\r\nimport StyledComponent from \"./StyledComponent\"\r\nimport DumbComponent from \"./DumbComponent\"\r\n \r\nimport ModeContext from '../../../modeContext/ModeContext'\r\n \r\nfunction ElementCreator(props) {\r\n\r\n    const {modeDev} = React.useContext(ModeContext)  \r\n   \r\n    return (   \r\n        // !!data.classes &&\r\n        <React.Fragment>  \r\n            {\r\n                modeDev && \r\n                <StyledComponent  \r\n                    data={props.item} \r\n                    reSaveChildren={props.reSaveChildren}\r\n                    removeItem={props.removeItem}\r\n                />\r\n            }\r\n \r\n            {\r\n                !modeDev && \r\n                <DumbComponent \r\n                    data={props.item} \r\n                    className={props.item.classes} \r\n                    prop={props.item.prop} \r\n                    textChildren={props.item.text}\r\n                />\r\n            } \r\n        </React.Fragment> \r\n    )\r\n}\r\n\r\nexport default ElementCreator\r\n","import React from 'react'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nfunction DumbComponent(props) {\r\n  \r\n    const useStyles = makeStyles((theme) => ({\r\n        myClassName: props.className , \r\n        imageStyle: props.data.image ? props.data.image.classes : {}\r\n      }));\r\n    const classes = useStyles();\r\n \r\n \r\n    return (\r\n        <React.Fragment>\r\n            \r\n            <Typography component={props.data.variant} className={classes.myClassName} > \r\n                { \r\n                    props.textChildren\r\n                } \r\n            </Typography> \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default DumbComponent\r\n","import React from 'react'  \r\n\r\nimport Draggable from 'react-draggable';\r\nimport { TwitterPicker } from 'react-color';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport {\r\n    FormGroup, \r\n    Grid, \r\n    TextField, \r\n    Button, \r\n    FormControl,\r\n    InputLabel,\r\n    Select, \r\n    MenuItem,  \r\n    IconButton, \r\n    Typography,\r\n    Modal,\r\n    Box,\r\n    DialogContent, \r\n\r\n} from '@material-ui/core'\r\n\r\nimport DumbComponent from \"./DumbComponent\"  \r\n \r\n\r\nimport OpenWithIcon from '@material-ui/icons/OpenWith';\r\nimport DeleteOutline  from '@material-ui/icons/DeleteOutline';  \r\n\r\nconst StyledComponent = (props) => {  \r\n\r\n    console.log('styled paragraph work')\r\n    let [padding, setPadding] = React.useState({ \r\n        top:  props.data.classes.paddingTop  , \r\n        left:  props.data.classes.paddingLeft ,\r\n        bottom: props.data.classes.paddingBottom , \r\n        right: props.data.classes.paddingRight \r\n    })\r\n    const [margin, setMargin] = React.useState({\r\n        top:  props.data.classes.marginTop , \r\n        left:  props.data.classes.marginLeft ,\r\n        bottom: props.data.classes.marginBottom , \r\n        right: props.data.classes.marginRight \r\n    })\r\n     \r\n    \r\n    const [color, setColor] = React.useState(props.data.classes.color || 'inherit')\r\n    const [backgroundColor, setBackgroundColor] = React.useState(props.data.classes.backgroundColor ||  'transperent')\r\n\r\n    const [borderColor, setBorderColor] = React.useState(props.data.classes.borderColor ||  'transperent')\r\n    const [borderStyle, setBorderStyle] = React.useState(props.data.classes.borderStyle ||  'solid')\r\n    const [borderWidth, setBorderWidth] = React.useState(props.data.classes.borderWidth ||  0 )\r\n    const [borderRadius, setBorderRadius] = React.useState(props.data.classes.borderRadius || 0)\r\n\r\n    const [textAlign, setTextAlign] = React.useState(props.data.classes.textAlign ||  'left')\r\n    const [display, setDisplay] = React.useState(props.data.classes.display ||  'block')\r\n    const [fontSize, setFontSize] = React.useState(props.data.classes.fontSize ||  16)\r\n    const [fontWeight, setFontWeight] = React.useState(props.data.classes.fontWeight ||  400)\r\n    const [lineHeight, setLineHeight] = React.useState(props.data.classes.lineHeight ||  1.38)\r\n\r\n    const [textInDumb, setTextInDumb] = React.useState(props.data.text)\r\n    const [isDisableBtn, setIsDisableBtn] = React.useState(true) \r\n\r\n    \r\n    const [open, setOpen] = React.useState(false);\r\n         \r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n     \r\n        inputNumber: {\r\n            flexGrow: 1, \r\n            margin: 5, \r\n            width: \"100%\"\r\n        }, \r\n        inputGroup: {\r\n            border: \"1px solid #f5f5f5\", \r\n            padding: 3, \r\n            inputNumber: { \r\n                maxWidth: \"100%\"\r\n\r\n            }\r\n        },\r\n        btnSave: { \r\n            position: 'sticky', \r\n            zIndex: theme.zIndex.tooltip,\r\n            bottom: 0, \r\n            left: 0, \r\n            right: 0,\r\n            height: 80, \r\n            backgroundColor: '#fff', \r\n            \r\n            '&>button': {\r\n                marginTop: 20, \r\n                marginBottom: 30, \r\n                marginLeft: 5, \r\n                opacity: 1,  \r\n                paddingLeft: 40, \r\n                paddingRight: 40\r\n            }\r\n        },\r\n        dumbItemContainer: { \r\n            position: 'relative', \r\n            outline: '.1px solid #f000',\r\n            transition: `${theme.transitions.duration.shorter}ms ${theme.transitions.easing.easeIn} outline`,\r\n            '&:hover' : {   \r\n                boxShadow: theme.shadows[10], \r\n                cursor: 'pointer',\r\n                outlineColor: `${theme.palette.error.light}`,\r\n                '&>button' : { \r\n                    opacity: 1\r\n                }\r\n            }, \r\n        },\r\n       \r\n        dumbItem: { \r\n            position: 'relative',\r\n            transition: \"300ms cubic-bezier(0.4, 0, 1, 1)\",\r\n            // height: '100%'\r\n            \r\n        }, \r\n        dumbItemDelete : { \r\n            opacity: 0,\r\n            position: 'absolute', \r\n            zIndex: 9, \r\n            top: 3, \r\n            right: 5,\r\n            backgroundColor: '#fff',\r\n            transition: \"100ms cubic-bezier(0.4, 0, 1, 1)\",\r\n            '&:hover' : { \r\n                backgroundColor: theme.palette.error.light\r\n            }\r\n        }, \r\n         \r\n        menu: {    \r\n            position: \"absolute\", \r\n            left: \"calc(50% - 200px)\",\r\n            top: 50, \r\n            backgroundColor: '#fff',\r\n            padding: 10 , \r\n            paddingBottom: 0, \r\n            maxWidth: 400,  \r\n            width: 400, \r\n            maxHeight: 'calc(100vh - 100px)', \r\n            minHeight: 500,\r\n            overflowY: 'scroll'\r\n        },\r\n        menuTitle: {\r\n            display: 'flex', \r\n            alignItems: 'center', \r\n            justifyContent: 'space-between', \r\n            fontSize: 14, \r\n            borderBottom: '1px solid #eaeaea',\r\n            paddingBottom: 6,\r\n            marginBottom: 10, \r\n            cursor: 'move'\r\n        },\r\n        imageAccordion: { \r\n            marginBottom: 10,  \r\n        },\r\n        imagePreview: {\r\n            position: 'relative', \r\n            width: 100, \r\n            height: 100, \r\n            border: `1px solid ${theme.palette.primary.light}`, \r\n            '&>img' : {  \r\n                position: 'absolute',\r\n                top: 0, \r\n                bottom: 0, \r\n                left: 0, \r\n                right: 0, \r\n                margin: 0, \r\n                width: \"100%\", \r\n                maxWidth: \"100%\", \r\n                height: \"100%\", \r\n                maxHeight: \"100%\", \r\n            }, \r\n            '&>button' : {\r\n                position: 'absolute',\r\n                zIndex: 10, \r\n                top: 0, \r\n                bottom: 0, \r\n                left: 0, \r\n                right: 0, \r\n                width: \"100%\", \r\n                maxWidth: \"100%\", \r\n                height: \"100%\", \r\n                maxHeight: \"100%\", \r\n                backgroundColor: \"#0027ff70\", \r\n                borderRadius: 0, \r\n                transition: \"200ms cubic-bezier(0.4, 0, 1, 1)\",\r\n                \"&:hover\": {\r\n                    opacity: 0\r\n                } \r\n            }, \r\n        }\r\n        \r\n      }));\r\n    \r\n    const myClassName = { \r\n        display: display,\r\n        paddingTop: padding.top,\r\n        paddingBottom: padding.bottom,\r\n        paddingLeft: padding.left,\r\n        paddingRight: padding.right,\r\n        marginTop: margin.top,\r\n        marginBottom: margin.bottom,\r\n        marginLeft: margin.left,\r\n        marginRight: margin.right,\r\n        color: color,\r\n        backgroundColor: backgroundColor,\r\n        textAlign: textAlign,\r\n        fontSize: fontSize,\r\n        fontWeight: fontWeight, \r\n        lineHeight: lineHeight,\r\n        borderColor: borderColor,\r\n        borderStyle: borderStyle,\r\n        borderRadius: borderRadius,\r\n        borderWidth: borderWidth\r\n    } \r\n    const classes = useStyles();\r\n\r\n    //const dataNew - props for Dumb Component\r\n    const dataNew = {...props.data, ...{\r\n        classes: myClassName\r\n    }} \r\n\r\n     \r\n    const handlePadding = (e, direction) => {  \r\n        let newPadding = Object.assign({}, padding)\r\n        newPadding[direction] = Number(e.target.value)\r\n        setPadding(newPadding)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n    const handleMargin= (e, direction) => {  \r\n        let newMargin = Object.assign({}, margin)\r\n        newMargin[direction] = Number(e.target.value)\r\n        setMargin(newMargin)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n\r\n    const saveData = () => {    \r\n        const sentData = Object.assign({}, props.data)\r\n\r\n        sentData.classes = myClassName \r\n        sentData.text = textInDumb\r\n\r\n\r\n        props.reSaveChildren(props.data.id, sentData)\r\n        setIsDisableBtn(true); \r\n    }\r\n    const removeItem = () => {  \r\n        props.removeItem(props.data.id)\r\n    };\r\n    \r\n    const handleInputFocus = (event) => {  \r\n        setOpen(true);\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n    \r\n    \r\n\r\n    return ( \r\n            <Grid container style={{position: 'relative'}}> \r\n                <Modal \r\n                    open={open}  \r\n                    aria-labelledby=\"draggable-dialog-title\"\r\n                    onClose={handleClose} \r\n                >\r\n                    <DialogContent>\r\n                        <Draggable  handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'} >\r\n                        <div className={classes.menu}  >\r\n                            <Typography \r\n                                component='p' \r\n                                className={classes.menuTitle}\r\n                                id=\"draggable-dialog-title\"\r\n                            >\r\n                                Задать параграфу текст и стили <OpenWithIcon/>\r\n                            </Typography>\r\n                            <Box mb={3} >\r\n                                <TextField \r\n                                        type='text' \r\n                                        label=\"Text input\"\r\n                                        fullWidth\r\n                                        value={textInDumb}\r\n                                        multiline={true}\r\n                                        rowsMax={6}\r\n                                        variant=\"filled\"\r\n                                        onChange={(e) => { setIsDisableBtn(false); setTextInDumb(e.target.value) }}\r\n                                />    \r\n                            </Box>  \r\n\r\n                            \r\n                            {/* display */}\r\n                            <Box className={classes.inputGroup}>\r\n                                <FormGroup row>\r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.inputNumber}\r\n                                        fullWidth\r\n                                    >\r\n                                        <InputLabel id=\"display-style-label\">Display</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"display-style-label\"\r\n                                            id=\"display-style\"\r\n                                            value={display}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setDisplay(e.target.value) }}\r\n                                        >\r\n                                        <MenuItem value={'block'}>Block</MenuItem> \r\n                                        <MenuItem value={'inline-block'}>Inline-block</MenuItem> \r\n                                        <MenuItem value={'flex'}>Flex</MenuItem> \r\n                                        <MenuItem value={'inline-flex'}>Inline-flex</MenuItem> \r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </FormGroup>\r\n                            </Box>                           \r\n                           \r\n                            {/* margin */}\r\n                            <Box className={classes.inputGroup}>\r\n                                <Box display=\"flex\" flexDirection=\"row\"  > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Top\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.top}\r\n                                        onChange={ (e) => { handleMargin(e, 'top') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Bottom\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.bottom}\r\n                                        onChange={ (e) => { handleMargin(e, 'bottom') } }     \r\n                                    />\r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Left\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.left}\r\n                                        onChange={ (e) => { handleMargin(e, 'left') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Right\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.right}\r\n                                        onChange={ (e) => { handleMargin(e, 'right') } }     \r\n                                    />\r\n                                </Box>\r\n                            </Box>\r\n                            \r\n                            {/* padding */}\r\n                            <Box className={classes.inputGroup}>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Top\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.top}\r\n                                        onChange={ (e) => { handlePadding(e, 'top') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Bottom\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.bottom}\r\n                                        onChange={ (e) => { handlePadding(e, 'bottom') } }     \r\n                                    />\r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Left\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.left}\r\n                                        onChange={ (e) => { handlePadding(e, 'left') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Right\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.right}\r\n                                        onChange={ (e) => { handlePadding(e, 'right') } }     \r\n                                    />\r\n                                </Box>\r\n            \r\n                            </Box>\r\n                          \r\n                            {/* bg-color */}\r\n                            <Box className={classes.inputGroup} display=\"flex\" flexDirection=\"row\" > \r\n                                    <Box \r\n                                        className={classes.inputNumber}\r\n                                    >\r\n                                        <Typography  component={'h6'} gutterBottom  >\r\n                                            Background  \r\n                                        </Typography>\r\n                                        <TwitterPicker\r\n                                            width={'100%'}\r\n                                            triangle={'hide'}\r\n                                            color={backgroundColor}\r\n                                            colors={[ '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                            onChangeComplete={(newColor) => {\r\n                                                setIsDisableBtn(false);\r\n                                                setBackgroundColor(newColor.hex) \r\n                                            }}\r\n\r\n                                        /> \r\n                                    </Box> \r\n                                    <Box \r\n                                        className={classes.inputNumber}\r\n                                    >\r\n                                        <Typography  component={'h6'} gutterBottom  >\r\n                                            Color  \r\n                                        </Typography>\r\n                                        <TwitterPicker\r\n                                            width={'100%'}\r\n                                            triangle={'hide'}\r\n                                            colors={[ '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                            color={color}\r\n                                            onChangeComplete={(newColor) => {\r\n                                                setIsDisableBtn(false);\r\n                                                setColor(newColor.hex) \r\n                                            }}\r\n\r\n                                        /> \r\n                                    </Box>  \r\n                            </Box>\r\n                                                    \r\n                            {/* border */}\r\n                            <Box className={classes.inputGroup}> \r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='color'\r\n                                            label=\"Border Color\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={borderColor}\r\n                                            onChange={ (e) => { setIsDisableBtn(false);  setBorderColor(e.target.value)} }     \r\n                                    />\r\n                                    <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Border Radius\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={borderRadius}\r\n                                            onChange={ (e) => { setIsDisableBtn(false);  setBorderRadius(Number(e.target.value)) } }     \r\n                                    />\r\n\r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                        \r\n                                <TextField \r\n                                    className={classes.inputNumber}\r\n                                    type='number'\r\n                                    label=\"Border Width\" \r\n                                    variant=\"filled\" \r\n                                    size='small'  \r\n                                    value={borderWidth}\r\n                                    onChange={ (e) => { setIsDisableBtn(false);setBorderWidth(Number(e.target.value))} }     \r\n                                />\r\n                                <FormControl \r\n                                    variant='filled' \r\n                                    size='small'   \r\n                                    className={classes.inputNumber}\r\n                                >\r\n                                    <InputLabel id=\"border-style-label\">Border Style</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"border-style-label\"\r\n                                        id=\"border-style\"\r\n                                        value={borderStyle}\r\n                                        onChange={(e) => {setIsDisableBtn(false); setBorderStyle(e.target.value) }}\r\n                                    >\r\n                                    <MenuItem value={'solid'}>Solid</MenuItem>\r\n                                    <MenuItem value={'dotted'}>Dotted</MenuItem>\r\n                                    <MenuItem value={'dashed'}>Dashed</MenuItem>\r\n                                    <MenuItem value={'double'}>Double</MenuItem>\r\n                                    <MenuItem value={'groove'}>Groove</MenuItem>\r\n                                    <MenuItem value={'inset'}>Inset</MenuItem>\r\n                                    <MenuItem value={'outset'}>Outset</MenuItem>\r\n                                    <MenuItem value={'ridge'}>Ridge</MenuItem>\r\n                                    <MenuItem value={'none'}>None</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Box>\r\n                            </Box>\r\n                            \r\n                            {/* font */}\r\n                            <Box className={classes.inputGroup}> \r\n                                <Box display=\"flex\" flexDirection=\"row\" >  \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Font Size\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={fontSize}\r\n                                        onChange={ (e) => {setIsDisableBtn(false); setFontSize(Number(e.target.value))} }     \r\n                                    /> \r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.inputNumber}\r\n                                    >\r\n                                        <InputLabel id=\"weight-select-label\">Font Weight</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"weight-select-label\"\r\n                                            id=\"weight-select\"\r\n                                            value={fontWeight}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setFontWeight(Number(e.target.value)) }}\r\n                                        >\r\n                                        <MenuItem value={300}>Light</MenuItem>\r\n                                        <MenuItem value={400}>Regular</MenuItem>\r\n                                        <MenuItem value={700}>Bold</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                \r\n                                    \r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" >\r\n                                <TextField \r\n                                    className={classes.inputNumber}\r\n                                    type='number'\r\n                                    label=\"Line Height (em)\" \r\n                                    variant=\"filled\" \r\n                                    size='small'  \r\n                                    value={lineHeight}\r\n                                    onChange={ (e) => {setIsDisableBtn(false); setLineHeight(Number(e.target.value))} }     \r\n                                />\r\n                                <FormControl \r\n                                    variant='filled' \r\n                                    size='small'   \r\n                                    className={classes.inputNumber}\r\n                                >\r\n                                    <InputLabel id=\"align-select-label\">Text Align</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"align-select-label\"\r\n                                        id=\"align-select\"\r\n                                        value={textAlign}\r\n                                        onChange={(e) => {setIsDisableBtn(false); setTextAlign((e.target.value)) }}\r\n                                    >\r\n                                    <MenuItem value={'left'}>Left</MenuItem>\r\n                                    <MenuItem value={'center'}>Center</MenuItem>\r\n                                    <MenuItem value={'right'}>Right</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Box>\r\n                            </Box>\r\n                            \r\n                            <Box className={classes.btnSave}>\r\n                                <Button \r\n                                    disabled={isDisableBtn} \r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    size={'medium'} \r\n                                    onClick={saveData}\r\n                                >\r\n                                    Save\r\n                                </Button> \r\n                            </Box>\r\n                        \r\n                        </div>\r\n                    </Draggable>\r\n                    </DialogContent>\r\n                </Modal>\r\n                \r\n                <Grid item xs={12}  className={classes.dumbItemContainer }>  \r\n                        <div \r\n                            className={classes.dumbItem }\r\n                            onClick={handleInputFocus}\r\n                            aria-controls=\"simple-menu\" aria-haspopup=\"true\"  \r\n                        > \r\n                            <DumbComponent \r\n                                data={dataNew} \r\n                                className={myClassName}  \r\n                                prop={props.data.prop} \r\n                                textChildren={textInDumb} \r\n                            />\r\n                           \r\n                        </div>  \r\n                        <IconButton \r\n                            className={ classes.dumbItemDelete}\r\n                            size=\"small\"\r\n                            aria-label=\"delete\"\r\n                            onClick={removeItem}\r\n                        >\r\n                            <DeleteOutline/>\r\n                        </IconButton>\r\n \r\n                </Grid>\r\n            </Grid>\r\n           \r\n \r\n    )\r\n}\r\n\r\nexport default StyledComponent\r\n","import React from 'react' \r\n\r\nimport StyledComponent from \"./StyledComponent\"\r\nimport DumbComponent from \"./DumbComponent\"\r\n \r\nimport ModeContext from '../../../modeContext/ModeContext'\r\n \r\nfunction ElementCreator(props) {\r\n\r\n    const {modeDev} = React.useContext(ModeContext)   \r\n   \r\n    return (   \r\n        // !!data.classes &&\r\n        <React.Fragment>  \r\n            {\r\n                modeDev && \r\n                <StyledComponent  \r\n                    data={props.item} \r\n                    reSaveChildren={props.reSaveChildren}\r\n                    removeItem={props.removeItem}  \r\n                />\r\n            }\r\n \r\n            {\r\n                !modeDev && \r\n                <DumbComponent \r\n                    data={props.item} \r\n                    className={props.item.classes} \r\n                    prop={props.item.prop} \r\n                    textChildren={props.item.text} \r\n                />\r\n            } \r\n        </React.Fragment> \r\n    )\r\n}\r\n\r\nexport default ElementCreator\r\n","import React from 'react'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Typography, Tooltip } from '@material-ui/core';\r\n \r\n\r\nfunction DumbComponent(props) {\r\n  \r\n    const useStyles = makeStyles((theme) => ({\r\n        myClassName: props.className , \r\n        imageStyle: props.imageClassName ? props.imageClassName : {}\r\n      })); \r\n    const classes = useStyles();\r\n \r\n    const title = props.data.image.title ? props.data.image.title : ''\r\n \r\n    return (\r\n        <React.Fragment>\r\n            \r\n            <Typography component={props.data.variant} className={classes.myClassName} >\r\n                {\r\n                    props.data.image.url &&\r\n                    <Tooltip title={title} placement={props.data.image.placement}>\r\n                         <img src={props.data.image.url} className={classes.imageStyle} alt={title} /> \r\n                    </Tooltip> \r\n                }\r\n                {/* <div dangerouslySetInnerHTML={{__html: props.textChildren}}></div> */}\r\n               <span style={{ display: 'inherit' }}>\r\n                { \r\n                    props.textChildren\r\n                } \r\n               </span>\r\n            </Typography> \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default DumbComponent\r\n","import React from 'react' \r\n \r\nimport { makeStyles } from '@material-ui/core/styles'; \r\nimport { Tooltip } from '@material-ui/core';\r\n\r\nfunction DumbComponent(props) {\r\n  \r\n    const useStyles = makeStyles((theme) => ({ \r\n        imageStyle: props.image.classes\r\n      }));\r\n    const classes = useStyles(); \r\n\r\n    const titleImg = props.image.title ? props.image.title : '' \r\n \r\n    return (\r\n        <React.Fragment> \r\n            <Tooltip title={titleImg} placement={props.image.placement}>\r\n                <img \r\n                    src={props.image.url} \r\n                    className={classes.imageStyle}   \r\n                    alt={titleImg}\r\n                />  \r\n            </Tooltip>\r\n          \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default DumbComponent\r\n","import React from 'react'  \r\n\r\nimport Draggable from 'react-draggable';\r\nimport { TwitterPicker } from 'react-color';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { \r\n    FormGroup, \r\n    Grid, \r\n    TextField, \r\n    Button, \r\n    FormControl,\r\n    InputLabel,\r\n    Select, \r\n    MenuItem,  \r\n    IconButton, \r\n    Typography,\r\n    Modal,\r\n    Box,\r\n    Accordion,\r\n    AccordionSummary,\r\n    DialogContent, \r\n\r\n} from '@material-ui/core'\r\n\r\nimport DumbComponent from \"./DumbComponent\" \r\nimport DumbImage from '../image/DumbComponent'\r\n \r\n\r\nimport OpenWithIcon from '@material-ui/icons/OpenWith';\r\nimport DeleteOutline  from '@material-ui/icons/DeleteOutline'; \r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\nconst StyledComponent = (props) => {  \r\n \r\n    let [padding, setPadding] = React.useState({ \r\n        top:  props.data.classes.paddingTop || 0, \r\n        left:  props.data.classes.paddingLeft || 0,\r\n        bottom: props.data.classes.paddingBottom || 0,\r\n        right: props.data.classes.paddingRight || 0\r\n    })\r\n    const [margin, setMargin] = React.useState({\r\n        top:  props.data.classes.marginTop || 0,\r\n        left:  props.data.classes.marginLeft || 0,\r\n        bottom: props.data.classes.marginBottom || 0, \r\n        right: props.data.classes.marginRight  || 0\r\n    })\r\n    \r\n    const [image, setImage] = React.useState(props.data.image || {})\r\n    const [imageTitle, setImageTitle] = React.useState(props.data.image.title || '')\r\n    const [imagePlacement, setImagePlacement] = React.useState(props.data.image.imagePlacement || 'top')\r\n    \r\n    const [color, setColor] = React.useState(props.data.classes.color || 'inherit')\r\n    const [backgroundColor, setBackgroundColor] = React.useState(props.data.classes.backgroundColor ||  'transperent')\r\n\r\n    const [borderColor, setBorderColor] = React.useState(props.data.classes.borderColor ||  'transperent')\r\n    const [borderStyle, setBorderStyle] = React.useState(props.data.classes.borderStyle ||  'solid')\r\n    const [borderWidth, setBorderWidth] = React.useState(props.data.classes.borderWidth ||  '0px')\r\n    const [borderRadius, setBorderRadius] = React.useState(props.data.classes.borderRadius ||  '0px')\r\n\r\n    const [textAlign, setTextAlign] = React.useState(props.data.classes.textAlign ||  'left')\r\n    const [display, setDisplay] = React.useState(props.data.classes.display ||  'block')\r\n    const [fontSize, setFontSize] = React.useState(props.data.classes.fontSize ||  16)\r\n    const [fontWeight, setFontWeight] = React.useState(props.data.classes.fontWeight ||  400)\r\n    const [lineHeight, setLineHeight] = React.useState(props.data.classes.lineHeight ||  1.38)\r\n\r\n\r\n    const [imageWidth, setImageWidth] = React.useState(props.data.image.classes.width || 100)\r\n    const [imageHeight, setImageHeight] = React.useState(props.data.image.classes.height || 100)\r\n    const [imageBorderColor, setImageBorderColor] = React.useState(props.data.image.classes.borderColor ||  'transperent')\r\n    const [imageBorderStyle, setImageBorderStyle] = React.useState(props.data.image.classes.borderStyle ||  'solid')\r\n    const [imageBorderWidth, setImageBorderWidth] = React.useState(props.data.image.classes.borderWidth ||  '0px')\r\n    const [imageBorderRadius, setImageBorderRadius] = React.useState(props.data.image.classes.borderRadius ||  '0px')\r\n    const [imageFloat, setImageFloat] = React.useState(props.data.image.classes.float || 'none')\r\n    const [imageMargin, setImageMargin] = React.useState({\r\n        top:  props.data.image.classes.marginTop || 0, \r\n        left:  props.data.image.classes.marginLeft || 0,\r\n        bottom: props.data.image.classes.marginBottom || 0, \r\n        right: props.data.image.classes.marginRight  || 0\r\n    })\r\n    const [textInDumb, setTextInDumb] = React.useState(props.data.text)\r\n    const [isDisableBtn, setIsDisableBtn] = React.useState(true) \r\n\r\n\r\n    \r\n    const [open, setOpen] = React.useState(false);\r\n         \r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n     \r\n        inputNumber: {\r\n            flexGrow: 1, \r\n            margin: 5, \r\n            width: \"100%\"\r\n        }, \r\n        inputGroup: {\r\n            border: \"1px solid #f5f5f5\", \r\n            padding: 3, \r\n            inputNumber: { \r\n                maxWidth: \"100%\"\r\n\r\n            }\r\n        },\r\n        btnSave: { \r\n            position: 'sticky', \r\n            zIndex: theme.zIndex.tooltip,\r\n            bottom: 0, \r\n            left: 0, \r\n            right: 0,\r\n            height: 80, \r\n            marginTop: 10, \r\n            backgroundColor: '#fff', \r\n            \r\n            '&>button': {\r\n                marginTop: 20, \r\n                marginBottom: 30, \r\n                marginLeft: 5, \r\n                opacity: 1,  \r\n                paddingLeft: 40, \r\n                paddingRight: 40\r\n            }\r\n        },\r\n        dumbItemContainer: { \r\n            position: 'relative', \r\n            outline: '1px solid #f000',\r\n            transition: `${theme.transitions.duration.shorter}ms ${theme.transitions.easing.easeIn} outline`,\r\n            '&:hover' : {   \r\n                boxShadow: theme.shadows[10], \r\n                cursor: 'pointer',\r\n                outlineColor: `${theme.palette.error.light}`,\r\n                '&>button' : { \r\n                    opacity: 1\r\n                }, \r\n            }, \r\n        },\r\n        \r\n       \r\n        dumbItem: { \r\n            position: 'relative',\r\n            transition: \"300ms cubic-bezier(0.4, 0, 1, 1)\",\r\n            // height: '100%'\r\n            \r\n        }, \r\n        dumbItemDelete : { \r\n            opacity: 0,\r\n            position: 'absolute', \r\n            zIndex: 9, \r\n            top: 3, \r\n            right: 5,\r\n            backgroundColor: '#fff',\r\n            transition: \"100ms cubic-bezier(0.4, 0, 1, 1)\",\r\n            '&:hover' : { \r\n                backgroundColor: theme.palette.error.light\r\n            }\r\n        }, \r\n         \r\n        menu: {    \r\n            position: \"absolute\", \r\n            left: \"calc(50% - 200px)\",\r\n            top: 50, \r\n            backgroundColor: '#fff',\r\n            padding: 10 , \r\n            paddingBottom: 0, \r\n            maxWidth: 400,  \r\n            width: 400, \r\n            maxHeight: 'calc(100vh - 100px)', \r\n            minHeight: 500,\r\n            overflowY: 'scroll'\r\n        },\r\n        menuTitle: {\r\n            display: 'flex', \r\n            alignItems: 'center', \r\n            justifyContent: 'space-between', \r\n            fontSize: 14, \r\n            borderBottom: '1px solid #eaeaea',\r\n            paddingBottom: 6,\r\n            marginBottom: 10, \r\n            cursor: 'move'\r\n        },\r\n        imageAccordion: { \r\n            marginBottom: 10,  \r\n        },\r\n        imagePreview: {\r\n            position: 'relative', \r\n            width: 105, \r\n            height: 105, \r\n            border: `1px solid ${theme.palette.primary.light}`, \r\n            '&>img' : {  \r\n                position: 'absolute',\r\n                top: 0, \r\n                bottom: 0, \r\n                left: 0, \r\n                right: 0, \r\n                margin: 0, \r\n                width: \"100%\", \r\n                maxWidth: \"100%\", \r\n                height: \"100%\", \r\n                maxHeight: \"100%\", \r\n            }, \r\n            '&>button' : {\r\n                position: 'absolute',\r\n                zIndex: 10, \r\n                top: 0, \r\n                bottom: 0, \r\n                left: 0, \r\n                right: 0, \r\n                width: \"100%\", \r\n                maxWidth: \"100%\", \r\n                height: \"100%\", \r\n                maxHeight: \"100%\", \r\n                backgroundColor: \"#0027ff70\", \r\n                borderRadius: 0, \r\n                transition: \"200ms cubic-bezier(0.4, 0, 1, 1)\",\r\n                \"&:hover\": {\r\n                    opacity: 0\r\n                } \r\n            }, \r\n        }\r\n        \r\n      }));\r\n    \r\n    const myClassName = { \r\n        display: display,\r\n        paddingTop: padding.top,\r\n        paddingBottom: padding.bottom,\r\n        paddingLeft: padding.left,\r\n        paddingRight: padding.right,\r\n        marginTop: margin.top,\r\n        marginBottom: margin.bottom,\r\n        marginLeft: margin.left,\r\n        marginRight: margin.right,\r\n        color: color,\r\n        backgroundColor: backgroundColor,\r\n        textAlign: textAlign,\r\n        fontSize: fontSize,\r\n        fontWeight: fontWeight, \r\n        lineHeight: lineHeight,\r\n        borderColor: borderColor,\r\n        borderStyle: borderStyle,\r\n        borderRadius: borderRadius,\r\n        borderWidth: borderWidth\r\n    } \r\n\r\n    const imageClassName = { \r\n        marginTop: imageMargin.top,\r\n        marginBottom: imageMargin.bottom,\r\n        marginLeft: imageMargin.left,\r\n        marginRight: imageMargin.right,\r\n        width: imageWidth, \r\n        height: imageHeight,\r\n        borderWidth: imageBorderWidth, \r\n        borderRadius: imageBorderRadius, \r\n        borderColor: imageBorderColor, \r\n        borderStyle: imageBorderStyle,\r\n        float : imageFloat\r\n    }\r\n    \r\n    const classes = useStyles();\r\n\r\n    //const dataNew - props for Dumb Component\r\n    const dataNew = {...props.data, ...{\r\n        classes: myClassName,\r\n    }} \r\n\r\n    // const handleImageSetting = (value, type) => {  \r\n    //     const newImData = { \r\n    //         [type]: value, \r\n\r\n    //     }\r\n    //     setImage(Object.assign(image, newImData))\r\n         \r\n    //     console.log(image)\r\n    // }\r\n    const handlePadding = (e, direction) => {  \r\n        let newPadding = Object.assign({}, padding)\r\n        newPadding[direction] = Number(e.target.value)\r\n        setPadding(newPadding)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n    const handleMargin = (e, direction) => {  \r\n        let newMargin = Object.assign({}, margin)\r\n        newMargin[direction] = Number(e.target.value)\r\n        setMargin(newMargin)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n    const handleImageMargin = (e, direction) => {  \r\n        let newMargin = Object.assign({}, imageMargin)\r\n        newMargin[direction] = Number(e.target.value)\r\n        setImageMargin(newMargin)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n\r\n    const saveData = () => {   \r\n        const sentData = Object.assign({}, props.data)\r\n\r\n        sentData.classes = myClassName\r\n        sentData.image = Object.assign(image, {\r\n            title: imageTitle, \r\n            placement: imagePlacement,\r\n            classes: imageClassName\r\n        })\r\n        sentData.text = textInDumb\r\n\r\n        props.reSaveChildren(props.data.id, sentData)\r\n        setIsDisableBtn(true); \r\n    }\r\n    const removeItem = () => {  \r\n        props.removeItem(props.data.id)\r\n    };\r\n    \r\n    const handleInputFocus = (event) => {  \r\n        setOpen(true);\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n    \r\n    \r\n\r\n    return ( \r\n            <Grid container style={{position: 'relative'}}> \r\n                <Modal \r\n                    open={open}  \r\n                    aria-labelledby=\"draggable-dialog-title\"\r\n                    onClose={handleClose} \r\n                >\r\n                    <DialogContent>\r\n                        <Draggable  handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'} >\r\n                        <div className={classes.menu}  >\r\n                            <Typography \r\n                                component='p' \r\n                                className={classes.menuTitle}\r\n                                id=\"draggable-dialog-title\"\r\n                            >\r\n                                Задать параграфу текст, стили и картинки <OpenWithIcon/>\r\n                            </Typography>\r\n                            <Box mb={3} >\r\n                                <TextField \r\n                                        type='text' \r\n                                        label=\"Text input\"\r\n                                        fullWidth\r\n                                        value={textInDumb}\r\n                                        multiline={true}\r\n                                        rowsMax={6}\r\n                                        variant=\"filled\"\r\n                                        onChange={(e) => { setIsDisableBtn(false); setTextInDumb(e.target.value) }}\r\n                                />    \r\n                            </Box>  \r\n \r\n                            <Accordion className={classes.imageAccordion}  >\r\n                                <AccordionSummary\r\n                                    expandIcon={<ExpandMoreIcon />}\r\n                                    aria-controls=\"image-settings-content\"\r\n                                    id=\"panel1a-header\" \r\n                                >\r\n                                    <Typography >Image Settings</Typography>\r\n                                </AccordionSummary>\r\n                                <Box px={2} pt={1} pb={2}>\r\n                                    <Grid container >\r\n                                        <Grid item xs={4} className={classes.imagePreview}>\r\n                                            <Button> \r\n                                                <ImageIcon color=\"action\" />\r\n\r\n                                                <label htmlFor='image-input-label' style={{\r\n                                                    position: 'absolute',\r\n                                                    zIndex: 10, \r\n                                                    top: 0, \r\n                                                    bottom: 0, \r\n                                                    left: 0, \r\n                                                    right: 0, \r\n                                                    width: \"100%\", \r\n                                                    maxWidth: \"100%\", \r\n                                                    height: \"100%\", \r\n                                                    maxHeight: \"100%\", \r\n                                                    cursor: 'pointer'\r\n                                                }}></label>\r\n                                                <input \r\n                                                    id=\"image-input-label\"\r\n                                                    type=\"file\" \r\n                                                    onChange={ () => {alert(\"Changed\")}} \r\n                                                    style={{ \r\n                                                        display: \"none\"\r\n                                                    }}\r\n                                                />\r\n                                            </Button>\r\n                                            <DumbImage\r\n                                                image={dataNew.image}   \r\n                                            /> \r\n                                        </Grid>\r\n                                        <Grid item xs={8}> \r\n                                            <Box ml={1}>\r\n                                                <TextField  \r\n                                                    type='text'\r\n                                                    label=\"Image title\" \r\n                                                    variant=\"filled\" \r\n                                                    size='small'  \r\n                                                    value={imageTitle}\r\n                                                    fullWidth\r\n                                                    onChange={ (e) => {setIsDisableBtn(false);  setImageTitle(e.target.value) } }     \r\n                                                />\r\n                                                <Box mt={1}>\r\n                                                    <FormControl \r\n                                                        variant='filled' \r\n                                                        size='small'    \r\n                                                        fullWidth\r\n                                                    >\r\n                                                        <InputLabel id=\"image-placement-label\">Title placement</InputLabel>\r\n                                                        <Select\r\n                                                            labelId=\"image-placement-label\"\r\n                                                            id=\"image-placement\"\r\n                                                            value={imagePlacement}\r\n                                                            onChange={(e) => {setIsDisableBtn(false); setImagePlacement(e.target.value) }}\r\n                                                        >\r\n                                                            <MenuItem value={'top-start'}>Top Start</MenuItem>\r\n                                                            <MenuItem value={'top'}>Top</MenuItem>\r\n                                                            <MenuItem value={'top-end'}>Top End</MenuItem>\r\n                                                            <MenuItem value={'left-start'}>Left Start</MenuItem>\r\n                                                            <MenuItem value={'left'}>Left</MenuItem>\r\n                                                            <MenuItem value={'left-end'}>Left End</MenuItem>\r\n                                                            <MenuItem value={'right-start'}>Right Start</MenuItem>\r\n                                                            <MenuItem value={'right'}>Right</MenuItem>\r\n                                                            <MenuItem value={'right-end'}>Right End</MenuItem>\r\n                                                            <MenuItem value={'bottom-start'}>Bottom Start</MenuItem>\r\n                                                            <MenuItem value={'bottom'}>Bottom</MenuItem>\r\n                                                            <MenuItem value={'bottom-end'}>Bottom End</MenuItem>\r\n\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                </Box>\r\n                                                    \r\n                                            </Box> \r\n                                        </Grid>\r\n                                    </Grid>  \r\n                                </Box>\r\n                                \r\n                                 {/* float */}\r\n                                <Box className={classes.inputGroup}>\r\n                                    <FormGroup row>\r\n                                        <FormControl \r\n                                            variant='filled' \r\n                                            size='small'   \r\n                                            className={classes.inputNumber}\r\n                                            fullWidth\r\n                                        >\r\n                                            <InputLabel id=\"display-style-label\">Float</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"display-style-label\"\r\n                                                id=\"display-style\"\r\n                                                value={imageFloat}\r\n                                                onChange={(e) => {setIsDisableBtn(false); setImageFloat(e.target.value) }}\r\n                                            >\r\n                                            <MenuItem value={'left'}>Left</MenuItem> \r\n                                            <MenuItem value={'right'}>Right</MenuItem> \r\n                                            <MenuItem value={'none'}>None</MenuItem>  \r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </FormGroup>\r\n                                </Box>                           \r\n                           \r\n                                {/* margin */}\r\n                                <Box className={classes.inputGroup}>\r\n                                    <Box display=\"flex\" flexDirection=\"row\"  > \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Image Margin Top\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={imageMargin.top}\r\n                                            onChange={ (e) => { setIsDisableBtn(false); handleImageMargin(e, 'top') } }     \r\n                                        />\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Margin Bottom\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={imageMargin.bottom}\r\n                                            onChange={ (e) => { setIsDisableBtn(false); handleImageMargin(e, 'bottom') } }     \r\n                                        />\r\n                                    </Box>\r\n                                    <Box display=\"flex\" flexDirection=\"row\" > \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Margin Left\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={imageMargin.left}\r\n                                            onChange={ (e) => { setIsDisableBtn(false); handleImageMargin(e, 'left') } }     \r\n                                        />\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Margin Right\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={imageMargin.right}\r\n                                            onChange={ (e) => { setIsDisableBtn(false);handleImageMargin(e, 'right') } }     \r\n                                        />\r\n                                    </Box>\r\n                                </Box>\r\n\r\n                                {/* width height*/}\r\n                                <Box className={classes.inputGroup}>\r\n                                    <Box display=\"flex\" flexDirection=\"row\"  > \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Image Width\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={imageWidth}\r\n                                            onChange={ (e) => { setIsDisableBtn(false); setImageWidth(Number(e.target.value)) } }     \r\n                                        />\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Image Height\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={imageHeight}\r\n                                            onChange={ (e) => {setIsDisableBtn(false); setImageHeight(Number(e.target.value)) } }     \r\n                                        />\r\n                                    </Box>\r\n                                </Box>\r\n                                \r\n                                {/* border */}\r\n                                <Box className={classes.inputGroup}> \r\n                                    <Box display=\"flex\" flexDirection=\"row\" > \r\n                                        <TextField \r\n                                                className={classes.inputNumber}\r\n                                                type='color'\r\n                                                label=\"Border Color\" \r\n                                                variant=\"filled\" \r\n                                                size='small'  \r\n                                                value={imageBorderColor}\r\n                                                onChange={ (e) => { setIsDisableBtn(false);  setImageBorderColor(e.target.value)} }     \r\n                                        />\r\n                                        <TextField \r\n                                                className={classes.inputNumber}\r\n                                                type='number'\r\n                                                label=\"Border Radius\" \r\n                                                variant=\"filled\" \r\n                                                size='small'  \r\n                                                value={imageBorderRadius}\r\n                                                onChange={ (e) => { setIsDisableBtn(false);  setImageBorderRadius(Number(e.target.value)) } }     \r\n                                        />\r\n\r\n                                    </Box>\r\n                                    <Box display=\"flex\" flexDirection=\"row\" > \r\n                            \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Border Width\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={imageBorderWidth}\r\n                                            onChange={ (e) => { setIsDisableBtn(false); setImageBorderWidth(Number(e.target.value))} }     \r\n                                        />\r\n                                        <FormControl \r\n                                            variant='filled' \r\n                                            size='small'   \r\n                                            className={classes.inputNumber}\r\n                                        >\r\n                                            <InputLabel id=\"image-border-style-label\">Border Style</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"image-border-style-label\"\r\n                                                id=\"image-border-style\"\r\n                                                value={imageBorderStyle}\r\n                                                onChange={(e) => {setIsDisableBtn(false); setImageBorderStyle(e.target.value) }}\r\n                                            >\r\n                                            <MenuItem value={'solid'}>Solid</MenuItem>\r\n                                            <MenuItem value={'dotted'}>Dotted</MenuItem>\r\n                                            <MenuItem value={'dashed'}>Dashed</MenuItem>\r\n                                            <MenuItem value={'double'}>Double</MenuItem>\r\n                                            <MenuItem value={'groove'}>Groove</MenuItem>\r\n                                            <MenuItem value={'inset'}>Inset</MenuItem>\r\n                                            <MenuItem value={'outset'}>Outset</MenuItem>\r\n                                            <MenuItem value={'ridge'}>Ridge</MenuItem>\r\n                                            <MenuItem value={'none'}>None</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Box>\r\n                                </Box>\r\n                            </Accordion>\r\n\r\n                            <Accordion>\r\n                                <AccordionSummary\r\n                                    expandIcon={<ExpandMoreIcon />}\r\n                                    aria-controls=\"paragraph-settings-content\"\r\n                                    id=\"panel2a-header\" \r\n                                >\r\n                                    <Typography >Paragraph Settings</Typography>\r\n                                </AccordionSummary>\r\n                            \r\n                            {/* display */}\r\n                            <Box className={classes.inputGroup}>\r\n                                <FormGroup row>\r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.inputNumber}\r\n                                        fullWidth\r\n                                    >\r\n                                        <InputLabel id=\"display-style-label\">Display</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"display-style-label\"\r\n                                            id=\"display-style\"\r\n                                            value={display}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setDisplay(e.target.value) }}\r\n                                        >\r\n                                        <MenuItem value={'block'}>Block</MenuItem> \r\n                                        <MenuItem value={'inline-block'}>Inline-block</MenuItem> \r\n                                        <MenuItem value={'flex'}>Flex</MenuItem> \r\n                                        <MenuItem value={'inline-flex'}>Inline-flex</MenuItem> \r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </FormGroup>\r\n                            </Box>                           \r\n                           \r\n                            {/* margin */}\r\n                            <Box className={classes.inputGroup}>\r\n                                <Box display=\"flex\" flexDirection=\"row\"  > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Top\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.top}\r\n                                        onChange={ (e) => { handleMargin(e, 'top') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Bottom\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.bottom}\r\n                                        onChange={ (e) => { handleMargin(e, 'bottom') } }     \r\n                                    />\r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Left\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.left}\r\n                                        onChange={ (e) => { handleMargin(e, 'left') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Right\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.right}\r\n                                        onChange={ (e) => { handleMargin(e, 'right') } }     \r\n                                    />\r\n                                </Box>\r\n                            </Box>\r\n                            \r\n                            {/* padding */}\r\n                            <Box className={classes.inputGroup}>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Top\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.top}\r\n                                        onChange={ (e) => { handlePadding(e, 'top') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Bottom\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.bottom}\r\n                                        onChange={ (e) => { handlePadding(e, 'bottom') } }     \r\n                                    />\r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Left\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.left}\r\n                                        onChange={ (e) => { handlePadding(e, 'left') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Right\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.right}\r\n                                        onChange={ (e) => { handlePadding(e, 'right') } }     \r\n                                    />\r\n                                </Box>\r\n            \r\n                            </Box>\r\n                          \r\n                            {/* bg-color */}\r\n                            <Box className={classes.inputGroup} display=\"flex\" flexDirection=\"row\" > \r\n                                <Box \r\n                                    className={classes.inputNumber}\r\n                                >\r\n                                    <Typography  component={'h6'} gutterBottom  >\r\n                                        Background  \r\n                                    </Typography>\r\n                                    <TwitterPicker\r\n                                        width={'100%'}\r\n                                        triangle={'hide'}\r\n                                        color={backgroundColor}\r\n                                        colors={[ '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                        onChangeComplete={(newColor) => {\r\n                                            setIsDisableBtn(false);\r\n                                            setBackgroundColor(newColor.hex) \r\n                                        }}\r\n\r\n                                    /> \r\n                                </Box> \r\n                                <Box \r\n                                    className={classes.inputNumber}\r\n                                >\r\n                                    <Typography  component={'h6'} gutterBottom  >\r\n                                        Color  \r\n                                    </Typography>\r\n                                    <TwitterPicker\r\n                                        width={'100%'}\r\n                                        triangle={'hide'}\r\n                                        colors={[ '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                        color={color}\r\n                                        onChangeComplete={(newColor) => {\r\n                                            setIsDisableBtn(false);\r\n                                            setColor(newColor.hex) \r\n                                        }}\r\n\r\n                                    /> \r\n                                </Box>  \r\n                            </Box>\r\n                                                    \r\n                            {/* border */}\r\n                            <Box className={classes.inputGroup}> \r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='color'\r\n                                            label=\"Border Color\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={borderColor}\r\n                                            onChange={ (e) => { setIsDisableBtn(false);  setBorderColor(e.target.value)} }     \r\n                                    />\r\n                                    <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Border Radius\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={borderRadius}\r\n                                            onChange={ (e) => { setIsDisableBtn(false);  setBorderRadius(Number(e.target.value)) } }     \r\n                                    />\r\n\r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                        \r\n                                <TextField \r\n                                    className={classes.inputNumber}\r\n                                    type='number'\r\n                                    label=\"Border Width\" \r\n                                    variant=\"filled\" \r\n                                    size='small'  \r\n                                    value={borderWidth}\r\n                                    onChange={ (e) => { setIsDisableBtn(false);setBorderWidth(Number(e.target.value))} }     \r\n                                />\r\n                                <FormControl \r\n                                    variant='filled' \r\n                                    size='small'   \r\n                                    className={classes.inputNumber}\r\n                                >\r\n                                    <InputLabel id=\"border-style-label\">Border Style</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"border-style-label\"\r\n                                        id=\"border-style\"\r\n                                        value={borderStyle}\r\n                                        onChange={(e) => {setIsDisableBtn(false); setBorderStyle(e.target.value) }}\r\n                                    >\r\n                                    <MenuItem value={'solid'}>Solid</MenuItem>\r\n                                    <MenuItem value={'dotted'}>Dotted</MenuItem>\r\n                                    <MenuItem value={'dashed'}>Dashed</MenuItem>\r\n                                    <MenuItem value={'double'}>Double</MenuItem>\r\n                                    <MenuItem value={'groove'}>Groove</MenuItem>\r\n                                    <MenuItem value={'inset'}>Inset</MenuItem>\r\n                                    <MenuItem value={'outset'}>Outset</MenuItem>\r\n                                    <MenuItem value={'ridge'}>Ridge</MenuItem>\r\n                                    <MenuItem value={'none'}>None</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Box>\r\n                            </Box>\r\n\r\n                            {/* font */}\r\n                            <Box className={classes.inputGroup}> \r\n                                <Box display=\"flex\" flexDirection=\"row\" >  \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Font Size\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={fontSize}\r\n                                        onChange={ (e) => {setIsDisableBtn(false); setFontSize(Number(e.target.value))} }     \r\n                                    /> \r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.inputNumber}\r\n                                    >\r\n                                        <InputLabel id=\"weight-select-label\">Font Weight</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"weight-select-label\"\r\n                                            id=\"weight-select\"\r\n                                            value={fontWeight}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setFontWeight(Number(e.target.value)) }}\r\n                                        >\r\n                                        <MenuItem value={300}>Light</MenuItem>\r\n                                        <MenuItem value={400}>Regular</MenuItem>\r\n                                        <MenuItem value={700}>Bold</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                \r\n                                    \r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" >\r\n                                <TextField \r\n                                    className={classes.inputNumber}\r\n                                    type='number'\r\n                                    label=\"Line Height (em)\" \r\n                                    variant=\"filled\" \r\n                                    size='small'  \r\n                                    value={lineHeight}\r\n                                    onChange={ (e) => {setIsDisableBtn(false); setLineHeight(Number(e.target.value))} }     \r\n                                />\r\n                                <FormControl \r\n                                    variant='filled' \r\n                                    size='small'   \r\n                                    className={classes.inputNumber}\r\n                                >\r\n                                    <InputLabel id=\"align-select-label\">Text Align</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"align-select-label\"\r\n                                        id=\"align-select\"\r\n                                        value={textAlign}\r\n                                        onChange={(e) => {setIsDisableBtn(false); setTextAlign((e.target.value)) }}\r\n                                    >\r\n                                    <MenuItem value={'left'}>Left</MenuItem>\r\n                                    <MenuItem value={'center'}>Center</MenuItem>\r\n                                    <MenuItem value={'right'}>Right</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Box>\r\n                            </Box>\r\n\r\n                           \r\n                            </Accordion>   \r\n                            <Box className={classes.btnSave}>\r\n                                <Button \r\n                                    disabled={isDisableBtn} \r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    size={'medium'} \r\n                                    onClick={saveData}\r\n                                >\r\n                                    Save\r\n                                </Button>  \r\n                            </Box>                \r\n                        </div>\r\n                    </Draggable>\r\n                    </DialogContent>\r\n                </Modal>\r\n                \r\n                <Grid item xs={12}  className={classes.dumbItemContainer }>  \r\n                 \r\n                      \r\n                        <div \r\n                            className={classes.dumbItem }\r\n                            onClick={handleInputFocus}\r\n                            aria-controls=\"simple-menu\" aria-haspopup=\"true\"  \r\n                        > \r\n                            <DumbComponent \r\n                                data={dataNew} \r\n                                className={myClassName}  \r\n                                imageClassName={imageClassName}\r\n                                prop={props.data.prop} \r\n                                textChildren={textInDumb} \r\n                            />\r\n                           \r\n                        </div>  \r\n                        <IconButton \r\n                            className={ classes.dumbItemDelete}\r\n                            size=\"small\"\r\n                            aria-label=\"delete\"\r\n                            onClick={removeItem}\r\n                        >\r\n                            <DeleteOutline/>\r\n                        </IconButton>\r\n \r\n                </Grid>\r\n            </Grid>\r\n           \r\n \r\n    )\r\n}\r\n\r\nexport default StyledComponent\r\n","import React from 'react' \r\n\r\nimport StyledComponent from \"./StyledComponent\"\r\nimport DumbComponent from \"./DumbComponent\"\r\n \r\nimport ModeContext from '../../../modeContext/ModeContext'\r\n \r\nfunction ElementCreator(props) {\r\n\r\n    const {modeDev} = React.useContext(ModeContext)   \r\n    // const modeDev = false   \r\n    \r\n    return (   \r\n        // !!data.classes && \r\n        <React.Fragment>  \r\n            {\r\n                modeDev && \r\n                <StyledComponent  \r\n                    data={props.item} \r\n                    reSaveChildren={props.reSaveChildren}\r\n                    removeItem={props.removeItem}  \r\n                />\r\n            }\r\n \r\n            {\r\n                !modeDev && \r\n                <DumbComponent \r\n                    data={props.item} \r\n                    className={props.item.classes} \r\n                    imageClassName={props.item.image.classes}\r\n                    prop={props.item.prop} \r\n                    textChildren={props.item.text} \r\n                />\r\n            } \r\n        </React.Fragment> \r\n    )\r\n}\r\n\r\nexport default ElementCreator\r\n","import React from 'react'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container } from '@material-ui/core';\r\n\r\nimport ModeContext from '../../../modeContext/ModeContext'\r\n\r\n\r\nimport HeadingCreator from '../heading/ElementCreator'\r\nimport ParagraphCreator from '../paragraph/ElementCreator'\r\nimport ParagraphImageCreator from '../paragraphImage/ElementCreator'\r\n\r\nfunction DumbComponent(props) {\r\n \r\n    const {modeDev} = React.useContext(ModeContext)\r\n  \r\n    const useStyles = makeStyles((theme) => ({\r\n        myClassName: props.classes ,  \r\n      }));\r\n    const classes = useStyles(); \r\n  \r\n \r\n    return (\r\n        <React.Fragment>\r\n            <Container  \r\n                maxWidth={props.settings.maxWidth} \r\n                fixed={props.settings.fixed} \r\n                disableGutters={props.settings.disableGutters} \r\n                className={classes.myClassName}\r\n            > \r\n                {  \r\n                    props.settings.innerContainer && \r\n                    <Container\r\n                        maxWidth={'lg'}\r\n                        fixed={props.settings.fixed} \r\n                        disableGutters={props.settings.disableGutters} \r\n                    >\r\n                        { \r\n                            modeDev && \r\n                            props.data.children.map((item) => {   \r\n                                switch(item.type) { \r\n                                    case 'heading' :  \r\n                                        return ( \r\n                                            <HeadingCreator \r\n                                                key={item.id} \r\n                                                item={item}\r\n                                                reSaveChildren={props.reSaveChildren}\r\n                                                removeItem={props.removeItem}\r\n                                            />\r\n                                        ) \r\n                                    case 'paragraph' :  \r\n                                        return (\r\n                                            <ParagraphCreator\r\n                                                key={item.id} \r\n                                                item={item}\r\n                                                reSaveChildren={props.reSaveChildren}\r\n                                                removeItem={props.removeItem}\r\n                                            />\r\n                                        ) \r\n                                    case 'paragraphImage' :  \r\n                                        return (\r\n                                            <ParagraphImageCreator\r\n                                                key={item.id} \r\n                                                item={item}\r\n                                                reSaveChildren={props.reSaveChildren}\r\n                                                removeItem={props.removeItem}\r\n                                            />\r\n                                        ) \r\n                                    default: break;\r\n                                }  \r\n                                return null\r\n                            })\r\n                        }\r\n                        {   !modeDev &&\r\n                            props.data.children.map((item) => {  \r\n                                switch(item.type) { \r\n                                    case 'heading' :  \r\n                                        return ( \r\n                                            <HeadingCreator \r\n                                                key={item.id} \r\n                                                item={item} \r\n                                            />\r\n                                        ) \r\n                                    case 'paragraph' :  \r\n                                        return (\r\n                                            <ParagraphCreator\r\n                                                key={item.id} \r\n                                                item={item} \r\n                                            />\r\n                                        ) \r\n                                    case 'paragraphImage' :  \r\n                                        return (\r\n                                            <ParagraphImageCreator\r\n                                                key={item.id} \r\n                                                item={item} \r\n                                            />\r\n                                        ) \r\n                                    default: break;\r\n                                }  \r\n                                return null\r\n                            })\r\n                        }\r\n                    </Container>\r\n                }\r\n                {  \r\n                    !props.settings.innerContainer && \r\n                    <React.Fragment>\r\n                        { \r\n                            modeDev && \r\n                            props.data.children.map((item) => {   \r\n                                switch(item.type) { \r\n                                    case 'heading' :  \r\n                                        return ( \r\n                                            <HeadingCreator \r\n                                                key={item.id} \r\n                                                item={item}\r\n                                                reSaveChildren={props.reSaveChildren}\r\n                                                removeItem={props.removeItem}\r\n                                            />\r\n                                        ) \r\n                                    case 'paragraph' :  \r\n                                        return (\r\n                                            <ParagraphCreator\r\n                                                key={item.id} \r\n                                                item={item}\r\n                                                reSaveChildren={props.reSaveChildren}\r\n                                                removeItem={props.removeItem}\r\n                                            />\r\n                                        ) \r\n                                    case 'paragraphImage' :  \r\n                                        return (\r\n                                            <ParagraphImageCreator\r\n                                                key={item.id} \r\n                                                item={item}\r\n                                                reSaveChildren={props.reSaveChildren}\r\n                                                removeItem={props.removeItem}\r\n                                            />\r\n                                        ) \r\n                                    default: break;\r\n                                }  \r\n                                return null\r\n                            })\r\n                        }\r\n                        {   !modeDev &&\r\n                            props.data.children.map((item) => {  \r\n                                switch(item.type) { \r\n                                    case 'heading' :  \r\n                                        return ( \r\n                                            <HeadingCreator \r\n                                                key={item.id} \r\n                                                item={item} \r\n                                            />\r\n                                        ) \r\n                                    case 'paragraph' :  \r\n                                        return (\r\n                                            <ParagraphCreator\r\n                                                key={item.id} \r\n                                                item={item} \r\n                                            />\r\n                                        ) \r\n                                    case 'paragraphImage' :  \r\n                                        return (\r\n                                            <ParagraphImageCreator\r\n                                                key={item.id} \r\n                                                item={item} \r\n                                            />\r\n                                        ) \r\n                                    default: break;\r\n                                }  \r\n                                return null\r\n                            })\r\n                        }\r\n                    </React.Fragment>\r\n                }\r\n                \r\n            </Container> \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default DumbComponent\r\n","import React from 'react' \r\nimport uuid from 'react-uuid' \r\nimport { TwitterPicker } from 'react-color';\r\n \r\nimport DumbComponent from './DumbComponent' \r\n  \r\nimport { \r\n    MenuItem,   FormGroup,  Button,\r\n    Box,  Menu,   Drawer,  Tooltip,\r\n    TextField, FormControl, InputLabel,\r\n    Select,  Container, Typography, ButtonGroup, IconButton\r\n} from '@material-ui/core'\r\n\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport ExpandLessOutlinedIcon from '@material-ui/icons/ExpandLessOutlined';\r\nimport ExpandMoreOutlinedIcon from '@material-ui/icons/ExpandMoreOutlined';\r\n \r\nimport libraryHeading from '../heading/headingLayout.json'\r\nimport libraryParagraph from '../paragraph/paragraphLayout.json'\r\nimport libraryParagraphImage from '../paragraphImage/paragraphImageLayout.json'\r\n \r\n\r\nimport { makeStyles } from '@material-ui/core/styles';  \r\nimport { InfoOutlined } from '@material-ui/icons';\r\n\r\nfunction ContainerElement(props) { \r\n    console.log('styled Container work')\r\n  \r\n    const [padding, setPadding] = React.useState({ \r\n        top:  props.data.classes.paddingTop ,  \r\n        bottom: props.data.classes.paddingBottom ,  \r\n    })\r\n    const [margin, setMargin] = React.useState({\r\n        top:  props.data.classes.marginTop ,  \r\n        bottom: props.data.classes.marginBottom ,  \r\n    })\r\n    \r\n    const [display, setDisplay] = React.useState(props.data.classes.display || 'flex')\r\n    const [flexDirection, setFlexDirection] = React.useState(props.data.classes.flexDirection || 'column')\r\n\r\n    const [color, setColor] = React.useState(props.data.classes.color || 'inherit')\r\n    const [backgroundColor, setBackgroundColor] = React.useState(props.data.classes.backgroundColor ||  'transparent')\r\n    const [shadow, setShadow] = React.useState(props.data.classes.boxShadow || 'none')\r\n\r\n    const [borderColor, setBorderColor] = React.useState(props.data.classes.borderColor ||  'transperent')\r\n    const [borderStyle, setBorderStyle] = React.useState(props.data.classes.borderStyle ||  'solid')\r\n    const [borderWidth, setBorderWidth] = React.useState(props.data.classes.borderWidth ||  '0px')\r\n    const [borderRadius, setBorderRadius] = React.useState(props.data.classes.borderRadius ||  '0px')\r\n\r\n    const [isDisableBtn, setIsDisableBtn] = React.useState(true) \r\n \r\n    const [children, setChildren] = React.useState(props.data.children) \r\n\r\n    const [settingGutter, setSettingGutter] = React.useState(props.data.disableGutters)\r\n    const [settingFixed, setSettingFixed] = React.useState(props.data.fixed)\r\n    const [settingMaxWidth, setSettingMaxWidth] = React.useState(props.data.maxWidth)\r\n    const [settingInnerContainer, setSettingInnerContainer] = React.useState(props.data.innerContainer || false )\r\n\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [open, setOpen] = React.useState(false)\r\n     \r\n\r\n    const propsSettings = {\r\n        maxWidth: settingMaxWidth,\r\n        disableGutters: settingGutter,\r\n        fixed: settingFixed,\r\n        innerContainer: settingInnerContainer\r\n    }\r\n\r\n\r\n    const useStyles = makeStyles((theme) => {\r\n         \r\n        console.log(theme)\r\n        return ( {  \r\n            btnDrawerStyle : {\r\n                position: 'absolute', \r\n                top: 0, \r\n                left: 0, \r\n                zIndex: 10,   \r\n                minWidth: 50, \r\n                opacity: 0, \r\n                transition: `${theme.transitions.duration.shorter}ms ${theme.transitions.easing.easeIn} opacity`,\r\n            }, \r\n            containerWrapper: {\r\n                position: 'relative', \r\n                outline: \"1px solid #ffffff00\", \r\n                transition: `${theme.transitions.duration.shorter}ms ${theme.transitions.easing.easeIn} outline`,\r\n                '&:hover' : {\r\n                    outlineColor: `${theme.palette.error.main}`,\r\n                    '& $mtView' : { \r\n                        opacity: 1\r\n                    },\r\n                    '& $mbView' : { \r\n                        opacity: 1\r\n                    }, \r\n                    '& $btnDrawerStyle': {\r\n                        opacity: 1\r\n                    }\r\n                },   \r\n               \r\n            },\r\n            mtView: {  \r\n                position: 'absolute', \r\n                top: `-${margin.top}px`, \r\n                left: 0, \r\n                right: 0,\r\n                zIndex: 10, \r\n                backgroundColor: '#fff7003d',\r\n                height: `${margin.top}px`, \r\n                opacity: 0,\r\n                transition: `${theme.transitions.duration.shortest}ms ${theme.transitions.easing.easeIn} opacity`\r\n            },\r\n            mbView: {  \r\n                position: 'absolute', \r\n                bottom: `-${margin.bottom}px`, \r\n                left: 0, \r\n                right: 0,\r\n                zIndex: 10, \r\n                backgroundColor: '#fff7003d',\r\n                height: `${margin.bottom}px`, \r\n                opacity: 0,\r\n                transition: `180ms ${theme.transitions.easing.easeIn} opacity`\r\n            },\r\n            settingsItem: {\r\n                marginRight: 5, \r\n                marginBottom: 10, \r\n                flexGrow: 1\r\n            },\r\n            inputNumber: {\r\n                flexGrow: 1, \r\n                margin: 5, \r\n                width: \"100%\", \r\n                maxWidth: '50%'\r\n            }, \r\n            inputGroup: {\r\n                border: \"1px solid #f5f5f5\", \r\n                padding: 3, \r\n                inputNumber: { \r\n                    maxWidth: \"100%\"\r\n    \r\n                }\r\n            },\r\n            btnSave: { \r\n                position: 'sticky', \r\n                zIndex: theme.zIndex.tooltip,\r\n                bottom: 0, \r\n                left: 20, \r\n                right: 0,\r\n                height: 80, \r\n                backgroundColor: '#fff', \r\n                \r\n                '&>button': {\r\n                    marginTop: 20, \r\n                    marginBottom: 30, \r\n                    opacity: 1,  \r\n                    paddingLeft: 40, \r\n                    paddingRight: 40\r\n                }\r\n            }\r\n            \r\n        } )\r\n    })\r\n    \r\n    const classes = useStyles();\r\n    \r\n    const myClassName = {  \r\n        paddingTop: padding.top,\r\n        paddingBottom: padding.bottom, \r\n        marginTop: margin.top,\r\n        marginBottom: margin.bottom, \r\n        color: color,\r\n        backgroundColor: backgroundColor, \r\n        borderColor: borderColor,\r\n        borderStyle: borderStyle,\r\n        borderRadius: borderRadius,\r\n        borderWidth: borderWidth,\r\n        boxShadow: shadow, \r\n        display: display, \r\n        flexDirection: flexDirection\r\n    } \r\n  \r\n\r\n    const handlePadding = (e, direction) => {  \r\n        let newPadding = Object.assign({}, padding)\r\n        newPadding[direction] = Number(e.target.value)\r\n        setPadding(newPadding)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n    const handleMargin = (e, direction) => {  \r\n        let newMargin = Object.assign({}, margin)\r\n        newMargin[direction] = Number(e.target.value)\r\n        setMargin(newMargin)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n     \r\n    const toggleDrawer =  () => {  \r\n        setOpen(!open)\r\n    }; \r\n\r\n    const handleHeadingMenuClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleHeadingMenuClose = (variant, type) => {\r\n        setAnchorEl(null); \r\n        addHeading(variant, type)\r\n    }; \r\n  \r\n    const addHeading = async (variant, type) => { \r\n          \r\n        let newChildren = children.slice()\r\n\r\n        let newItem = {}\r\n        \r\n\r\n        switch(type) { \r\n            case 'heading' :  \r\n                newItem = Object.assign({}, libraryHeading) \r\n                newItem.id = uuid()\r\n                newItem.variant = newItem.variant[variant] \r\n                newItem.text += \" - \" + newItem.variant \r\n                break;\r\n            case 'paragraph' :  \r\n                console.log('paragraph')\r\n                newItem = Object.assign({}, libraryParagraph)\r\n                newItem.id = uuid() \r\n                break;\r\n            case 'paragraphImage' :  \r\n                console.log('paragraphImage')\r\n                newItem = Object.assign({}, libraryParagraphImage)\r\n                newItem.id = uuid() \r\n                break;\r\n            default: break;\r\n        }  \r\n\r\n        newChildren.push(newItem) \r\n  \r\n        setChildren(newChildren) \r\n \r\n        // save in firestore\r\n        props.reSaveContainer(props.data.id, newChildren)\r\n \r\n    } \r\n\r\n    const reSaveClassesSettings = () => {    \r\n        props.reSaveContainerStyleSettings(props.data.id, myClassName, propsSettings)\r\n        setIsDisableBtn(true); \r\n    } \r\n    \r\n    const reSaveChildren = async (id, data) => {   \r\n        let slicedChild = children.slice()\r\n        slicedChild.forEach((item) => {\r\n            if(item.id === id) {\r\n                for( let key in item) { \r\n                    item[key] = data[key]\r\n                } \r\n            }\r\n        }) \r\n        // console.log(slicedChild)\r\n        // save in firestore\r\n        props.reSaveContainer(props.data.id, slicedChild)\r\n \r\n    }\r\n\r\n    const removeItem = async (id) => {\r\n        let conf = window.confirm(\"Delete ?\");\r\n \r\n        if(conf) {\r\n            \r\n            let filtered = children.filter((item) => (item.id !== id))  \r\n            setChildren(filtered) \r\n            \r\n            // save in firestore\r\n            props.reSaveContainer(props.data.id, filtered) \r\n        }\r\n    }\r\n\r\n    const removeContainer = () => { \r\n        props.removeContainer(props.data.id)\r\n    }\r\n\r\n    const swapContainer = (direction, id) => { \r\n        props.swapContainer(direction, id)\r\n    }\r\n    \r\n\r\n    return (\r\n        <Container \r\n            maxWidth={propsSettings.maxWidth} \r\n            fixed={propsSettings.fixed} \r\n            disableGutters={true}\r\n            className={classes.containerWrapper} \r\n        >    \r\n            <div className={classes.mtView}></div>\r\n            <div className={classes.mbView}></div>\r\n            <Box style={{position: 'relative'}} > \r\n                {/*  DrawerContainer */}\r\n                <Box className={classes.btnDrawerStyle}>\r\n                    \r\n                    <ButtonGroup\r\n                        orientation=\"vertical\"\r\n                        color=\"primary\"\r\n                        aria-label=\"vertical contained primary button group\"\r\n                        variant=\"contained\"\r\n                    > \r\n                        <Tooltip title='Container Settings' placement='right'>\r\n                            <Button  \r\n                                onClick={toggleDrawer} \r\n                                size='medium'\r\n                                variant='contained'\r\n                                color='primary'\r\n                                \r\n                            >  \r\n                                <SettingsIcon style={{ color: '#fff' }} fontSize='small'/>\r\n                            </Button>\r\n                        </Tooltip>\r\n                        <Tooltip title='Get Up' placement='right'>\r\n                            <Button   \r\n                                onClick={() => { swapContainer('up', props.data.id) }}\r\n                                size='medium'\r\n                                variant='contained'\r\n                                color='primary' \r\n                            >  \r\n                                <ExpandLessOutlinedIcon style={{ color: '#fff' }} fontSize='small'/>   \r\n                            </Button>\r\n                        </Tooltip> \r\n                        <Tooltip title='Get Down' placement='right'>\r\n                            <Button   \r\n                                onClick={() => { swapContainer('down', props.data.id) }}\r\n                                size='medium'\r\n                                variant='contained'\r\n                                color='primary' \r\n                            >     \r\n                                <ExpandMoreOutlinedIcon style={{ color: '#fff' }} fontSize='small'/>\r\n                            </Button>\r\n                        </Tooltip> \r\n \r\n                    </ButtonGroup>\r\n                </Box>\r\n                     \r\n                    <Drawer anchor={'left'} open={open} onClose={toggleDrawer}>\r\n                         \r\n                            <Box  \r\n                                pt={3}\r\n                                pb={10} \r\n                                px={2}\r\n                                maxWidth={600}    \r\n                                position={'relative'}\r\n                            > \r\n                                <FormGroup> \r\n                                    <Typography   variant={'h6'} gutterBottom  >\r\n                                        Container actions \r\n                                    </Typography>\r\n                                   <Box mb={2}> \r\n                                        {/* <Button\r\n                                            // onClick={addContainer}\r\n                                            variant='outlined'\r\n                                            color=\"primary\" \r\n                                            disabled={true}\r\n                                            \r\n                                        >\r\n                                            Add Container\r\n                                        </Button>   */}\r\n                                        <Button\r\n                                            onClick={removeContainer}\r\n                                            variant='outlined'\r\n                                            color=\"secondary\" \r\n                                            // disabled={true}\r\n                                        >\r\n                                            Remove Container\r\n                                        </Button> \r\n                                   </Box>\r\n                                </FormGroup>\r\n                                \r\n                                <FormGroup > \r\n                                    <Typography  variant={'h6'} gutterBottom  >\r\n                                        Add item from libs\r\n                                    </Typography>\r\n                                    <Box>\r\n                                            <Box mr={2} mb={1} clone={true} >\r\n                                                <Button \r\n                                                    aria-controls=\"heading-menu\" \r\n                                                    aria-haspopup=\"true\" \r\n                                                    onClick={handleHeadingMenuClick}\r\n                                                    variant='outlined'\r\n                                                    color=\"primary\"\r\n                                                >\r\n                                                    Heading\r\n                                                </Button>\r\n                                            </Box>\r\n                                            \r\n                                            <Menu\r\n                                                id=\"heading-menu\"\r\n                                                anchorEl={anchorEl}\r\n                                                keepMounted\r\n                                                open={Boolean(anchorEl)}\r\n                                                onClose={handleHeadingMenuClose}\r\n                                            >\r\n                                                <MenuItem value={0} onClick={(e) => {handleHeadingMenuClose(e.target.value, \"heading\")}} >Heading h1</MenuItem>\r\n                                                <MenuItem value={1} onClick={(e) => {handleHeadingMenuClose(e.target.value, \"heading\")}} >Heading h2</MenuItem>\r\n                                                <MenuItem value={2} onClick={(e) => {handleHeadingMenuClose(e.target.value, \"heading\")}} >Heading h3</MenuItem>\r\n                                                <MenuItem value={3} onClick={(e) => {handleHeadingMenuClose(e.target.value, \"heading\")}} >Heading h4</MenuItem>\r\n                                                <MenuItem value={4} onClick={(e) => {handleHeadingMenuClose(e.target.value, \"heading\")}} >Heading h5</MenuItem>\r\n                                                <MenuItem value={5} onClick={(e) => {handleHeadingMenuClose(e.target.value, \"heading\")}} >Heading h6</MenuItem> \r\n                                            </Menu>\r\n\r\n                                            <Box mr={2} mb={1} clone={true} >\r\n                                                <Button\r\n                                                    onClick={() => {addHeading('p', 'paragraph')}}\r\n                                                    variant='outlined'\r\n                                                    color=\"primary\"\r\n                                                >\r\n                                                    Paragraph\r\n                                                </Button>\r\n                                            </Box>\r\n                                            <Box mr={2} mb={1} clone={true} >\r\n                                                <Button\r\n                                                    onClick={() => {addHeading('p', 'paragraphImage')}}\r\n                                                    variant='outlined'\r\n                                                    color=\"primary\" \r\n                                                >\r\n                                                    Paragraph-Image\r\n                                                </Button>\r\n                                            </Box> \r\n                                    </Box>\r\n\r\n                                </FormGroup>\r\n \r\n                                <Typography  variant={'h6'} gutterBottom  >\r\n                                    Settings \r\n                                </Typography>\r\n                                <FormGroup row>\r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.settingsItem}\r\n                                    >\r\n                                        <InputLabel id=\"dis-gutters-style-label\">Disable Gutters</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"dis-gutters-label\"\r\n                                            id=\"dis-gutters-style\"\r\n                                            value={settingGutter}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setSettingGutter(e.target.value) }}\r\n                                        >\r\n                                            <MenuItem value={false}>False</MenuItem>\r\n                                            <MenuItem value={true}>True</MenuItem> \r\n                                        </Select>\r\n                                    </FormControl>\r\n\r\n                                    \r\n\r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.settingsItem}\r\n                                    >\r\n                                        <InputLabel id=\"fixed-style-label\">Fixed</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"fixed-label\"\r\n                                            id=\"fixed-style\"\r\n                                            value={settingFixed}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setSettingFixed(e.target.value) }}\r\n                                        >\r\n                                            <MenuItem value={false}>False</MenuItem>\r\n                                            <MenuItem value={true}>True</MenuItem> \r\n                                        </Select>\r\n                                    </FormControl>  \r\n                                </FormGroup>\r\n                                \r\n                                <FormGroup row> \r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.settingsItem}\r\n                                    >\r\n                                        <InputLabel id=\"maxWidth-style-label\">Max-Width</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"maxWidth-label\"\r\n                                            id=\"maxWidth-style\"\r\n                                            value={settingMaxWidth}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setSettingMaxWidth(e.target.value) }}\r\n                                        >\r\n                                            <MenuItem value={false}>False</MenuItem>\r\n                                            <MenuItem value={'xl'}>xl - 1920 </MenuItem> \r\n                                            <MenuItem value={'lg'}>lg - 1280 </MenuItem> \r\n                                            <MenuItem value={'md'}>md - 960 </MenuItem> \r\n                                            <MenuItem value={'sm'}>sm - 600 </MenuItem> \r\n                                            <MenuItem value={'xs'}>xs - 0 </MenuItem> \r\n                                        </Select>\r\n                                    </FormControl>\r\n\r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.settingsItem}\r\n                                    >\r\n                                        <InputLabel id=\"inner-container-style-label\">Inner Container</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"inner-container-label\"\r\n                                            id=\"inner-container-style\"\r\n                                            value={settingInnerContainer}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setSettingInnerContainer(e.target.value) }}\r\n                                        >\r\n                                            <MenuItem value={false}>False</MenuItem>\r\n                                            <MenuItem value={true}>True</MenuItem> \r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </FormGroup>\r\n                                \r\n                                <Typography  variant={'h6'} gutterBottom  >\r\n                                    Styles \r\n                                </Typography>\r\n                                <React.Fragment>\r\n                                    {/* display */}\r\n                                    <Box className={classes.inputGroup}>\r\n\r\n                                        <Tooltip title=\"Для корректной работы margin у элементов внутри контейнера рекомендуется оставить display: flex, flexDirection: column\"  >\r\n                                            <IconButton>\r\n                                                <InfoOutlined/>\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                        <Box display=\"flex\" flexDirection=\"row\"  > \r\n                                            <FormControl \r\n                                                variant='filled' \r\n                                                size='small'   \r\n                                                className={classes.inputNumber}\r\n                                                fullWidth\r\n                                            >\r\n                                                <InputLabel id=\"display-style-label\">Display</InputLabel>\r\n                                                <Select\r\n                                                    labelId=\"display-style-label\"\r\n                                                    id=\"display-style\"\r\n                                                    value={display}\r\n                                                    onChange={(e) => {setIsDisableBtn(false); setDisplay(e.target.value) }}\r\n                                                >\r\n                                                    <MenuItem value={'block'}>Block</MenuItem>  \r\n                                                    <MenuItem value={'flex'}>Flex</MenuItem>  \r\n                                                </Select>\r\n                                            </FormControl>\r\n                                            {\r\n                                                display === 'flex' &&\r\n                                                <FormControl \r\n                                                    variant='filled' \r\n                                                    size='small'   \r\n                                                    className={classes.inputNumber}\r\n                                                    fullWidth\r\n                                                >\r\n                                                    <InputLabel id=\"direction-style-label\">Flex Direction</InputLabel>\r\n                                                    <Select\r\n                                                        labelId=\"direction-style-label\"\r\n                                                        id=\"direction-style\"\r\n                                                        value={flexDirection}\r\n                                                        onChange={(e) => {setIsDisableBtn(false); setFlexDirection(e.target.value) }}\r\n                                                    >\r\n                                                        <MenuItem value={'row'}>Row</MenuItem>  \r\n                                                        <MenuItem value={'column'}>Column</MenuItem>  \r\n                                                        <MenuItem value={'row-reverse'}>Row Reverse</MenuItem>  \r\n                                                        <MenuItem value={'column-reverse'}>Column Reverse</MenuItem>  \r\n                                                    </Select>\r\n                                                </FormControl>   \r\n                                            }\r\n                                        </Box>\r\n                                    </Box>\r\n                                    \r\n                                    {/* margin */}\r\n                                    <Box className={classes.inputGroup}>\r\n                                        <Box display=\"flex\" flexDirection=\"row\"  > \r\n                                            <TextField \r\n                                                className={classes.inputNumber}\r\n                                                type='number'\r\n                                                label=\"Margin Top\" \r\n                                                variant=\"filled\" \r\n                                                size='small'  \r\n                                                value={margin.top}\r\n                                                onChange={ (e) => { setIsDisableBtn(false); handleMargin(e, 'top');  } }     \r\n                                            />\r\n                                            <TextField \r\n                                                className={classes.inputNumber}\r\n                                                type='number'\r\n                                                label=\"Margin Bottom\" \r\n                                                variant=\"filled\" \r\n                                                size='small'  \r\n                                                value={margin.bottom}\r\n                                                onChange={ (e) => { setIsDisableBtn(false); handleMargin(e, 'bottom') } }     \r\n                                            />\r\n                                        </Box>\r\n                                    </Box>\r\n                                    \r\n                                    {/* padding */}\r\n                                    <Box className={classes.inputGroup}>\r\n                                        <Box display=\"flex\" flexDirection=\"row\" > \r\n                                            <TextField \r\n                                                className={classes.inputNumber}\r\n                                                type='number'\r\n                                                label=\"Padding Top\" \r\n                                                variant=\"filled\" \r\n                                                size='small'  \r\n                                                value={padding.top}\r\n                                                onChange={ (e) => { setIsDisableBtn(false); handlePadding(e, 'top') } }     \r\n                                            />\r\n                                            <TextField \r\n                                                className={classes.inputNumber}\r\n                                                type='number'\r\n                                                label=\"Padding Bottom\" \r\n                                                variant=\"filled\" \r\n                                                size='small'  \r\n                                                value={padding.bottom}\r\n                                                onChange={ (e) => {setIsDisableBtn(false); handlePadding(e, 'bottom') } }     \r\n                                            />\r\n                                        </Box>\r\n                                        \r\n\r\n                                    </Box>\r\n                                    \r\n                                    {/* bg-color */}\r\n                                    <Box className={classes.inputGroup} display=\"flex\" flexDirection=\"row\" > \r\n                                \r\n                                        <Box \r\n                                            className={classes.inputNumber}\r\n                                        >\r\n                                             <Typography  component={'h6'} gutterBottom  >\r\n                                                Background  \r\n                                            </Typography>\r\n                                            <TwitterPicker\r\n                                                width={'100%'}\r\n                                                triangle={'hide'}\r\n                                                colors={[   '#f44336', '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                                onChangeComplete={(newColor) => {\r\n                                                    setIsDisableBtn(false);\r\n                                                    setBackgroundColor(newColor.hex) \r\n                                                }}\r\n\r\n                                            /> \r\n                                        </Box> \r\n                                        <Box \r\n                                            className={classes.inputNumber}\r\n                                        >\r\n                                            <Typography component={'h6'} gutterBottom  >\r\n                                                Color text\r\n                                            </Typography>\r\n                                            <TwitterPicker\r\n                                                width={'100%'}\r\n                                                triangle={'hide'}\r\n                                                colors={[   '#f44336', '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                                onChangeComplete={(newColor) => {\r\n                                                    setIsDisableBtn(false);\r\n                                                    setColor(newColor.hex) \r\n                                                }} \r\n                                            /> \r\n                                        </Box> \r\n                                      \r\n                                    </Box>\r\n                                    \r\n                                    {/* color */}\r\n                                    <Box className={classes.inputGroup} display=\"flex\" flexDirection=\"row\" > \r\n                                        <FormControl \r\n                                            variant='filled' \r\n                                            size='small'   \r\n                                            className={classes.inputNumber}\r\n                                        >\r\n                                            <InputLabel id=\"shadow-style-label\">Box Shadow</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"shadow-style-label\"\r\n                                                id=\"shadow-style\"\r\n                                                value={shadow}\r\n                                                onChange={(e) => {setIsDisableBtn(false); setShadow(e.target.value) }}\r\n                                            >\r\n                                                <MenuItem value={'none'}>None</MenuItem>\r\n                                                <MenuItem value={`0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),\r\n                                                0px 1px 5px 0px rgba(0,0,0,0.12)`}>Small</MenuItem>\r\n                                                <MenuItem value={`0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),\r\n                                                0px 3px 16px 2px rgba(0,0,0,0.12)`}>Medium</MenuItem>\r\n                                                <MenuItem value={`0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),\r\n                                                0px 9px 46px 8px rgba(0,0,0,0.12)`}>Large</MenuItem> \r\n                                            </Select>\r\n                                        </FormControl> \r\n                                        \r\n                                    </Box>\r\n                                     \r\n                                    {/* border */}\r\n                                    <Box className={classes.inputGroup}> \r\n                                        <Box display=\"flex\" flexDirection=\"row\" > \r\n                                            <TextField \r\n                                                    className={classes.inputNumber}\r\n                                                    type='color'\r\n                                                    label=\"Border Color\" \r\n                                                    variant=\"filled\" \r\n                                                    size='small'  \r\n                                                    value={borderColor}\r\n                                                    onChange={ (e) => { setIsDisableBtn(false);  setBorderColor(e.target.value)} }     \r\n                                            />\r\n                                            <TextField \r\n                                                    className={classes.inputNumber}\r\n                                                    type='number'\r\n                                                    label=\"Border Radius\" \r\n                                                    variant=\"filled\" \r\n                                                    size='small'  \r\n                                                    value={borderRadius}\r\n                                                    onChange={ (e) => { setIsDisableBtn(false);  setBorderRadius(Number(e.target.value)) } }     \r\n                                            />\r\n\r\n                                        </Box>\r\n                                        <Box display=\"flex\" flexDirection=\"row\" > \r\n\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Border Width\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={borderWidth}\r\n                                            onChange={ (e) => { setIsDisableBtn(false);setBorderWidth(Number(e.target.value))} }     \r\n                                        />\r\n                                        <FormControl \r\n                                            variant='filled' \r\n                                            size='small'   \r\n                                            className={classes.inputNumber}\r\n                                        >\r\n                                            <InputLabel id=\"border-style-label\">Border Style</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"border-style-label\"\r\n                                                id=\"border-style\"\r\n                                                value={borderStyle}\r\n                                                onChange={(e) => {setIsDisableBtn(false); setBorderStyle(e.target.value) }}\r\n                                            >\r\n                                                <MenuItem value={'solid'}>Solid</MenuItem>\r\n                                                <MenuItem value={'dotted'}>Dotted</MenuItem>\r\n                                                <MenuItem value={'dashed'}>Dashed</MenuItem>\r\n                                                <MenuItem value={'double'}>Double</MenuItem>\r\n                                                <MenuItem value={'groove'}>Groove</MenuItem>\r\n                                                <MenuItem value={'inset'}>Inset</MenuItem>\r\n                                                <MenuItem value={'outset'}>Outset</MenuItem>\r\n                                                <MenuItem value={'ridge'}>Ridge</MenuItem>\r\n                                                <MenuItem value={'none'}>None</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Box>\r\n                                    </Box>\r\n\r\n                                    <Box  className={classes.btnSave}>\r\n                                        <Button\r\n                                            disabled={isDisableBtn}\r\n                                        \r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            size={'medium'} \r\n                                            onClick={reSaveClassesSettings}\r\n                                        >\r\n                                            Save\r\n                                        </Button> \r\n                                    </Box>\r\n                                   \r\n                                </React.Fragment> \r\n\r\n                            </Box> \r\n                    </Drawer>\r\n                {/*  DrawerContainer */} \r\n            </Box>                        \r\n                <DumbComponent\r\n                    reSaveChildren={reSaveChildren}\r\n                    removeItem={removeItem}\r\n                    data={props.data} \r\n                    classes={myClassName}\r\n                    settings={propsSettings}\r\n                />  \r\n           \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ContainerElement\r\n","import React from 'react' \r\n\r\nimport StyledComponent from \"./StyledComponent\"\r\nimport DumbComponent from \"./DumbComponent\"\r\n \r\nimport ModeContext from '../../../modeContext/ModeContext'\r\n\r\n \r\nfunction ElementCreator(props) {\r\n\r\n    const {modeDev} = React.useContext(ModeContext)   \r\n    \r\n    const propsSettings = {\r\n        maxWidth: props.data.maxWidth,\r\n        disableGutters: props.data.disableGutters,\r\n        fixed: props.data.fixed\r\n    }\r\n    \r\n    return (    \r\n        <React.Fragment>   \r\n            { \r\n                modeDev && \r\n                <StyledComponent   \r\n                    data={props.data} \r\n                    reSaveContainer={props.reSaveContainer}\r\n                    reSaveContainerStyleSettings={props.reSaveContainerStyleSettings}  \r\n                    removeContainer={props.removeContainer}    \r\n                    swapContainer={props.swapContainer}\r\n                />\r\n            }\r\n \r\n            {\r\n                !modeDev &&  \r\n                <DumbComponent \r\n                    data={props.data}  \r\n                    classes={props.data.classes}\r\n                    reSaveContainer={props.reSaveContainer} \r\n                    settings={propsSettings}\r\n                />\r\n            }\r\n        </React.Fragment> \r\n    )\r\n}\r\n\r\nexport default ElementCreator\r\n","import firebase from 'firebase'\r\n\r\n// import dataJson from '../data/db.json'\r\n \r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBmMnCcIyz_t3G5Ia3zaiiMTLtQyrUt1Eg\",\r\n    authDomain: \"sitebuilder-74d57.firebaseapp.com\",\r\n    projectId: \"sitebuilder-74d57\",\r\n    storageBucket: \"sitebuilder-74d57.appspot.com\",\r\n    messagingSenderId: \"590275119909\",\r\n    appId: \"1:590275119909:web:5d50bcbd54a317647428cc\"\r\n}; \r\n\r\nconst dataJson = {\r\n    \"title\": \"Page 1 Title\",\r\n    \"children\": [\r\n      {\r\n        \"id\": \"27ff711-b10-c22e-e00b-2d107ba81883\",\r\n        \"type\": \"heading\",\r\n        \"variant\": \"h1\",\r\n        \"responseFont\": true,\r\n        \"classes\": {\r\n          \"display\": \"block\",\r\n          \"paddingTop\": 0,\r\n          \"paddingBottom\": 0,\r\n          \"paddingLeft\": 0,\r\n          \"paddingRight\": 0,\r\n          \"marginTop\": 0,\r\n          \"marginBottom\": 15,\r\n          \"marginLeft\": 0,\r\n          \"marginRight\": 0,\r\n          \"color\": \"#161616\",\r\n          \"backgroundColor\": \"#ffffff\",\r\n          \"textAlign\": \"center\",\r\n          \"fontSize\": 25,\r\n          \"fontWeight\": 300,\r\n          \"lineHeight\": 1.43\r\n        },\r\n        \"text\": \"Main Title of <b>Page</b>\",\r\n        \"prop\": {}\r\n      },\r\n      {\r\n        \"id\": \"6742bff-a65b-eecf-ae85-8eb7fc035eca\",\r\n        \"type\": \"paragraph\",\r\n        \"variant\": \"p\",\r\n        \"classes\": {\r\n          \"display\": \"block\",\r\n          \"paddingTop\": 0,\r\n          \"paddingBottom\": 0,\r\n          \"paddingLeft\": 0,\r\n          \"paddingRight\": 0,\r\n          \"marginTop\": 0,\r\n          \"marginBottom\": 16,\r\n          \"marginLeft\": 0,\r\n          \"marginRight\": 0,\r\n          \"color\": \"#141414\",\r\n          \"backgroundColor\": \"transparent\",\r\n          \"textAlign\": \"left\",\r\n          \"fontSize\": 14,\r\n          \"fontWeight\": 400,\r\n          \"lineHeight\": 1.4,\r\n          \"borderColor\": \"transperent\",\r\n          \"borderStyle\": \"solid\",\r\n          \"borderRadius\": \"0px\",\r\n          \"borderWidth\": \"0px\"\r\n        },\r\n        \"text\": \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Iste veritatis in optio incidunt, nobis beatae molestiae, ea soluta facilis maxime quis officia at quaerat, ipsam architecto excepturi! Voluptas inventore explicabo quidem non blanditiis repellat laboriosam magni. Ullam deserunt dolorem labore eum corrupti quae impedit cumque?\",\r\n        \"prop\": {}\r\n      },\r\n      {\r\n        \"id\": \"1fb643-5b8a-4e3b-307a-30afae3144\",\r\n        \"type\": \"heading\",\r\n        \"variant\": \"h3\",\r\n        \"classes\": {\r\n          \"display\": \"block\",\r\n          \"paddingTop\": 0,\r\n          \"paddingBottom\": 0,\r\n          \"paddingLeft\": 0,\r\n          \"paddingRight\": 0,\r\n          \"marginTop\": 0,\r\n          \"marginBottom\": 5,\r\n          \"marginLeft\": 0,\r\n          \"marginRight\": 0,\r\n          \"color\": \"inherit\",\r\n          \"backgroundColor\": \"transparent\",\r\n          \"textAlign\": \"left\",\r\n          \"fontSize\": 14,\r\n          \"fontWeight\": 700,\r\n          \"lineHeight\": 1.43\r\n        },\r\n        \"text\": \"Second heading with <i> italic </i>\",\r\n        \"prop\": {},\r\n        \"responseFont\": false\r\n      },\r\n      {\r\n        \"id\": \"4e070d3-bfee-da-28cc-652a6ab50cff\",\r\n        \"type\": \"paragraph\",\r\n        \"variant\": \"p\",\r\n        \"classes\": {\r\n          \"display\": \"block\",\r\n          \"paddingTop\": 12,\r\n          \"paddingBottom\": 12,\r\n          \"paddingLeft\": 12,\r\n          \"paddingRight\": 12,\r\n          \"marginTop\": 0,\r\n          \"marginBottom\": 8,\r\n          \"marginLeft\": 0,\r\n          \"marginRight\": 0,\r\n          \"color\": \"#11d801\",\r\n          \"backgroundColor\": \"#fcfff4\",\r\n          \"textAlign\": \"left\",\r\n          \"fontSize\": 14,\r\n          \"fontWeight\": 700,\r\n          \"lineHeight\": 1.4,\r\n          \"borderColor\": \"#cdff91\",\r\n          \"borderStyle\": \"solid\",\r\n          \"borderRadius\": 8,\r\n          \"borderWidth\": 3\r\n        },\r\n        \"text\": \"Paragraph Block with text and green colors and border \",\r\n        \"prop\": {}\r\n      },\r\n      {\r\n        \"id\": \"c7c14e3-801b-e011-67b5-58f84381a6f5\",\r\n        \"type\": \"paragraphImage\",\r\n        \"variant\": \"p\",\r\n        \"image\": {\r\n          \"url\": \"https://panor.ru/img/default/category.png\",\r\n          \"classes\": {\r\n            \"marginTop\": 0,\r\n            \"marginRight\": 8,\r\n            \"width\": 40,\r\n            \"height\": 40,\r\n            \"borderWidth\": \"0px\",\r\n            \"borderRadius\": 100,\r\n            \"borderColor\": \"inherit\",\r\n            \"borderStyle\": \"none\",\r\n            \"float\": \"none\"\r\n          },\r\n          \"title\": \"title\",\r\n          \"placement\": \"top\"\r\n        },\r\n        \"classes\": {\r\n          \"display\": \"flex\",\r\n          \"paddingTop\": 0,\r\n          \"paddingBottom\": 0,\r\n          \"paddingLeft\": 0,\r\n          \"paddingRight\": 0,\r\n          \"marginTop\": 0,\r\n          \"marginBottom\": 30,\r\n          \"marginLeft\": 0,\r\n          \"marginRight\": 0,\r\n          \"color\": \"inherit\",\r\n          \"backgroundColor\": \"transparent\",\r\n          \"textAlign\": \"left\",\r\n          \"fontSize\": 14,\r\n          \"fontWeight\": 400,\r\n          \"lineHeight\": 1.4,\r\n          \"borderColor\": \"inherit\",\r\n          \"borderStyle\": \"none\",\r\n          \"borderRadius\": \"0px\",\r\n          \"borderWidth\": \"0px\"\r\n        },\r\n        \"text\": \"Paragraph  Lorem ipsum dolor sit amet consectetur adipisicing elit. Iste veritatis in optio incidunt, nobis beatae molestiae, ea soluta facilis maxime quis officia at quaerat, ipsam architecto excepturi! Voluptas inventore explicabo quidem non blanditiis repellat laboriosam magni. Ullam deserunt dolorem labore eum corrupti quae impedit cumque? Lorem ipsum dolor sit amet consectetur adipisicing elit. Iste veritatis in optio incidunt, nobis beatae molestiae, ea soluta facilis maxime quis officia at quaerat, ipsam architecto excepturi! Voluptas inventore explicabo quidem non blanditiis repellat laboriosam magni. Ullam deserunt dolorem labore eum corrupti quae impedit cumque?\",\r\n        \"prop\": {}\r\n      }, \r\n      {\r\n        \"id\": \"344e26a-b5ef-ba6c-7035-24faee7a28\",\r\n        \"type\": \"paragraphImage\",\r\n        \"variant\": \"p\",\r\n        \"image\": {\r\n          \"url\": \"https://panor.ru/img/default/category.png\",\r\n          \"title\": \"5\",\r\n          \"placement\": \"top\",\r\n          \"classes\": {\r\n            \"width\": 100,\r\n            \"height\": 100,\r\n            \"borderWitdh\": 0,\r\n            \"borderRadius\": 0,\r\n            \"borderColor\": \"inherit\",\r\n            \"borderStyle\": \"none\",\r\n            \"float\": \"none\"\r\n          }\r\n        },\r\n        \"classes\": {\r\n          \"display\": \"flex\",\r\n          \"paddingTop\": 0,\r\n          \"paddingBottom\": 0,\r\n          \"paddingLeft\": 0,\r\n          \"paddingRight\": 0,\r\n          \"marginTop\": 0,\r\n          \"marginBottom\": 8,\r\n          \"marginLeft\": 0,\r\n          \"marginRight\": 0,\r\n          \"color\": \"inherit\",\r\n          \"backgroundColor\": \"transparent\",\r\n          \"textAlign\": \"left\",\r\n          \"fontSize\": 14,\r\n          \"fontWeight\": 400,\r\n          \"lineHeight\": 1.4,\r\n          \"borderColor\": \"inherit\",\r\n          \"borderStyle\": \"none\",\r\n          \"borderRadius\": \"0px\",\r\n          \"borderWidth\": \"0px\"\r\n        },\r\n        \"text\": \"Paragraph with Image\",\r\n        \"prop\": {}\r\n      },\r\n      {\r\n        \"id\": \"c80bac-4fad-ccb-f10b-d7210b5caa\",\r\n        \"type\": \"paragraph\",\r\n        \"variant\": \"p\",\r\n        \"classes\": {\r\n          \"display\": \"block\",\r\n          \"paddingTop\": 0,\r\n          \"paddingBottom\": 0,\r\n          \"paddingLeft\": 0,\r\n          \"paddingRight\": 0,\r\n          \"marginTop\": 0,\r\n          \"marginBottom\": 8,\r\n          \"marginLeft\": 0,\r\n          \"marginRight\": 0,\r\n          \"color\": \"inherit\",\r\n          \"backgroundColor\": \"transparent\",\r\n          \"textAlign\": \"left\",\r\n          \"fontSize\": 14,\r\n          \"fontWeight\": 400,\r\n          \"lineHeight\": 1.4,\r\n          \"borderColor\": \"inherit\",\r\n          \"borderStyle\": \"none\",\r\n          \"borderRadius\": \"0px\",\r\n          \"borderWidth\": \"0px\"\r\n        },\r\n        \"text\": \"Paragraph <strong>With Strong Text</strong>\",\r\n        \"prop\": {}\r\n      }\r\n    ]\r\n  }\r\n\r\nclass Firebase { \r\n    constructor() {\r\n        const firebaseApp =  firebase.initializeApp(firebaseConfig)\r\n        this.db = firebaseApp.firestore()\r\n        console.log(\"constructor\")\r\n    } \r\n    \r\n    async test() {\r\n        return this.db.collection('site1').doc('page1').set(dataJson)\r\n    } \r\n    // async getTest() { \r\n    //     const citiesRef = this.db.collection(\"test\");\r\n    //     const snapshot = await citiesRef.get();\r\n\r\n    //     if (snapshot.empty) {\r\n    //         console.log('No matching documents.');\r\n    //         return;\r\n    //       }  \r\n    //     snapshot.forEach(doc => {\r\n    //         console.log(doc.id, '=>', doc.data());\r\n    //     });\r\n        \r\n    // } \r\n     \r\n}\r\n\r\n// .collection('test') - имя сайта (site1, site2)\r\n// .doc() - имя документа для обозначения страницы (можно использовать дефолтные, но тогда нужно передавать какую именно страницу обновляем )\r\n\r\n\r\n// firebase.initializeApp(firebaseConfig)\r\n\r\n// const db = firebase.firestore()\r\n\r\n// export default db \r\n\r\n\r\nexport default new Firebase()","import React from 'react' \r\nimport uuid from 'react-uuid' \r\nimport { AppBar, Toolbar, Typography, Button, Box, CircularProgress } from \"@material-ui/core\";\r\n \r\nimport { indigo } from '@material-ui/core/colors'\r\n  \r\nimport ContainerElement from '../library/container/ElementCreator' \r\nimport ContainerLayout from '../library/container/containerLayout.json' \r\n \r\nimport firebase from '../../firebase/firebase'\r\n\r\nfunction SinglePage(props) {\r\n\r\n    const pageId = props.match.params.pageId\r\n\r\n    console.log(pageId)\r\n    \r\n    const [data, setData] = React.useState({})\r\n    const [items, setItems] = React.useState([])\r\n  \r\n    const [isUpdate, setIsUpdate] = React.useState(false)\r\n    //  title\r\n    //  slug\r\n    //  id\r\n  \r\n    React.useEffect( () => {\r\n      fetchData()\r\n    }, [])\r\n  \r\n    const fetchData = async () => {  \r\n       \r\n      const pageRef = firebase.db.collection(\"site1\").doc(pageId)\r\n      const doc = await pageRef.get();\r\n      \r\n      if (!doc.exists) {\r\n        console.log('No such document!');\r\n      } else {\r\n        console.log('Document data:', doc.data());\r\n        \r\n        setData(doc.data())  \r\n        setItems(doc.data().items)  \r\n      }\r\n   \r\n    }  \r\n    \r\n    const reSaveContainer = async (id, childrenContainer) => { \r\n  \r\n      console.log('reSaveContainer')\r\n        \r\n      let newData = Object.assign({}, data)\r\n      newData.items = items\r\n  \r\n      Object.keys(newData.items).map( (elem) => { \r\n         if(newData.items[elem].id === id) {\r\n            newData.items[elem].children = childrenContainer \r\n        }\r\n      })\r\n   \r\n      setData(newData)\r\n      setItems(newData.items)\r\n      setIsUpdate(true)\r\n  \r\n      await firebase.db.collection(\"site1\").doc(pageId).update({\r\n        items: newData.items, \r\n      }).then(() => {\r\n        setIsUpdate(false)\r\n      }) \r\n    } \r\n    const reSaveContainerStyleSettings = async (id, classes, settings) => {  \r\n      let newData = Object.assign({}, data)\r\n        \r\n      Object.keys(newData.items).map( (elem) => { \r\n        if(newData.items[elem].id === id) {\r\n            newData.items[elem].classes = classes \r\n            newData.items[elem].disableGutters = settings.disableGutters \r\n            newData.items[elem].fixed = settings.fixed \r\n            newData.items[elem].maxWidth = settings.maxWidth \r\n            newData.items[elem].innerContainer = settings.innerContainer \r\n        }\r\n      }) \r\n  \r\n      setData(newData)\r\n      setItems(newData.items) \r\n      setIsUpdate(true)\r\n  \r\n      await firebase.db.collection(\"site1\").doc(pageId).update({\r\n        items: newData.items\r\n      }).then(() => {\r\n        setIsUpdate(false)\r\n      }) \r\n    } \r\n   \r\n    const addContainer = async () => {   \r\n      let newData = Object.assign({}, data)\r\n      let newItems = items.slice()\r\n  \r\n      let newCont = Object.assign({}, ContainerLayout) \r\n      newCont.id = uuid()\r\n   \r\n      newItems.push(newCont) \r\n   \r\n      newData.items = newItems\r\n          \r\n      setData(newData)\r\n      setItems(newItems)\r\n      setIsUpdate(true)\r\n  \r\n      await firebase.db.collection(\"site1\").doc(pageId).update({\r\n        items: newItems\r\n      }).then(() => {\r\n        setIsUpdate(false)\r\n      });  \r\n    }\r\n  \r\n    const removeContainer = async (id) => {  \r\n      let newData = Object.assign({}, data)\r\n      const filtered = items.filter((item) => (item.id !== id))  \r\n  \r\n      newData.items = filtered\r\n          \r\n      setData(newData)\r\n      setItems(filtered) \r\n      setIsUpdate(true)\r\n       \r\n      await firebase.db.collection(\"site1\").doc(pageId).update({\r\n        items: filtered\r\n      }).then(() => {\r\n        setIsUpdate(false)\r\n      }); \r\n    }\r\n  \r\n    const swapContainer = async (direction, id) => { \r\n      let newData = Object.assign({}, data)\r\n      let newItems = items.slice()\r\n      let activeIndex   \r\n   \r\n      newItems.map( (item) => { \r\n        if(item.id === id) {\r\n          activeIndex = newItems.indexOf(item) \r\n        }\r\n      }) \r\n   \r\n      if(direction === 'up' && activeIndex === 0) return  \r\n      if(direction === 'down' && activeIndex === newItems.length - 1 ) return\r\n      \r\n      if(direction === 'up') { \r\n        const movedItem = newItems[activeIndex]\r\n        const placeItem = newItems[activeIndex - 1]\r\n  \r\n        newItems[activeIndex] = placeItem\r\n        newItems[activeIndex - 1 ] = movedItem  \r\n      }\r\n      if(direction === 'down') {\r\n        const movedItem = newItems[activeIndex]\r\n        const placeItem = newItems[activeIndex + 1]\r\n  \r\n        newItems[activeIndex] = placeItem\r\n        newItems[activeIndex + 1 ] = movedItem  \r\n      }\r\n  \r\n      newData.items = newItems\r\n         \r\n      setItems(newItems)\r\n      setData(newData)\r\n      setIsUpdate(true)\r\n   \r\n  \r\n      await firebase.db.collection(\"site1\").doc(pageId).update({\r\n        items: newItems\r\n      }).then(() => {\r\n        setIsUpdate(false)\r\n      }) \r\n    }\r\n  \r\n    function renderContainers () {  \r\n      return Object.keys(items).map( (key) => { \r\n         return ( \r\n          <ContainerElement \r\n            key={items[key].id} \r\n            data={items[key]} \r\n            reSaveContainer={reSaveContainer}\r\n            reSaveContainerStyleSettings={reSaveContainerStyleSettings} \r\n            removeContainer={removeContainer}\r\n            swapContainer={swapContainer}\r\n          /> \r\n        ) \r\n      })\r\n    } \r\n\r\n    return (\r\n        <React.Fragment>\r\n            <AppBar position=\"static\" style={{backgroundColor: indigo[200] }}>\r\n            <Toolbar variant=\"dense\"> \r\n                <Typography variant=\"h6\" >\r\n                  Page actions\r\n                </Typography>\r\n                \r\n                <Box display=\"flex\" alignItems='center' mx={1} minWidth={22} >\r\n                  {\r\n                    isUpdate &&\r\n                    <CircularProgress size={22} thickness={5} /> \r\n                  } \r\n                </Box>\r\n\r\n                <Box mx={1}>\r\n                  <Button color={'primary'} variant={'contained'} onClick={addContainer}>\r\n                      Add new container\r\n                  </Button> \r\n                </Box>\r\n                <Box mx={1}>\r\n                  <Button color={'primary'} variant={'outlined'} disabled={true} >\r\n                      More settings\r\n                  </Button> \r\n                </Box>\r\n             \r\n            </Toolbar>\r\n          </AppBar>\r\n           \r\n          { \r\n            renderContainers()  \r\n          } \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default SinglePage\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom'\r\n\r\nimport Home from '../components/Home'\r\nimport Error from '../components/Error'\r\nimport SinglePage from '../components/pages/SinglePage'\r\n\r\nfunction RouterComponent() {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path='/:pageId' render={ (props) =>  <SinglePage {...props} /> } />\r\n                <Route exact path='/' render={ () => <Home/>  } />\r\n                <Route path='*' render={ () => <Error/> } />\r\n            </Switch> \r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default RouterComponent\r\n","import React from \"react\" \n\nimport CssBaseline from '@material-ui/core/CssBaseline'; \n\nimport ModeProvider from './modeContext/ModeProvider'\n \nimport RouterComponent from './Router/RouterComponent'\n  \nfunction App() {  \n  return (\n    <ModeProvider>  \n      <div className=\"App\">\n        <CssBaseline/>  \n\n         <RouterComponent/>\n\n      </div>\n    </ModeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom'; \nimport App from './App';\n\n// import \"./assets/style.scss\"\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}