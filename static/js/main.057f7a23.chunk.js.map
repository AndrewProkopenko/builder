{"version":3,"sources":["context/modeContext/ModeContext.js","firebase/firebase.js","context/modeContext/ModeProvider.js","context/categoryContext/CategoryContext.js","context/categoryContext/CategoryProvider.js","context/loadingContext/LoadingContext.js","context/loadingContext/LoadingProvider.js","components/placeholders/LoadingProgress.js","components/header/DumbComponent.js","components/header/StyledComponent.js","components/header/ElementCreator.js","components/header/Header.js","components/header/AdminHeader.js","components/Home.js","components/Login.js","components/Error.js","components/library/heading/DumbComponent.js","components/library/heading/StyledComponent.js","components/library/heading/ElementCreator.js","components/library/paragraph/DumbComponent.js","components/library/paragraph/StyledComponent.js","components/library/paragraph/ElementCreator.js","components/library/paragraphImage/DumbComponent.js","components/library/image/DumbComponent.js","components/library/paragraphImage/StyledComponent.js","components/library/paragraphImage/ElementCreator.js","components/library/container/DumbComponent.js","components/library/container/StyledComponent.js","components/library/container/ElementCreator.js","components/placeholders/SkeletonPage.js","components/pages/SinglePage.js","Router/RouterComponent.js","App.js","reportWebVitals.js","index.js"],"names":["ModeContext","React","createContext","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","firebase","initializeApp","this","db","firestore","storage","auth","console","log","provider","GoogleAuthProvider","signInWithPopup","then","result","catch","error","email","password","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","ModeProvider","state","isLogin","user","onAuthStateChanged","setState","Provider","value","modeDev","props","children","Component","CategoryContext","CategoryProvider","categories","categoryRef","collection","doc","get","exists","data","list","update","slug","delete","array","map","item","deletePage","setCategories","updateCategories","deletePageFromFirebase","deleteCategoryFromFirebase","deleteCategory","LoadingContext","LoadingProvider","isLoading","setIsLoading","LoadingProgress","classes","makeStyles","root","position","zIndex","top","left","right","width","height","lineStyle","backgroundColor","barStyle","backgroundImage","useStyles","className","LinearProgress","colorPrimary","bar","theme","header","palette","primary","main","logo","fontWeight","color","textAlign","menuButton","size","marginLeft","paddingBottom","borderBottom","toolbar","display","justifyContent","drawerContainer","maxWidth","minWidth","mobileLink","alignItems","textDecoration","minHeight","padding","accordionReset","paddingLeft","marginTop","marginBottom","background","boxShadow","DumbComponent","useEffect","setResponsiveness","window","innerWidth","prevState","mobileView","addEventListener","useState","drawerOpen","useContext","femmecubatorLogo","Typography","variant","component","AppBar","Container","disableGutters","fixed","handleDrawerClose","Toolbar","style","Drawer","anchor","open","onClose","Box","mx","my","Button","onClick","index","pages","length","Accordion","AccordionSummary","content","expandIcon","MenuItem","exact","to","title","page","borderTop","IconButton","edge","displayMobile","clone","innerItem","innerIndex","StyledComponent","localCategories","setLocalCategories","setOpen","isDisableBtn","setIsDisableBtn","newCategoryTitle","setNewCategoryTitle","newCategorySlug","setNewCategorySlug","newPageTitle","setNewPageTitle","newPageSlug","setNewPageSlug","handleClose","listPages","listStyle","titlePages","fontSize","menu","maxHeight","overflowY","menuTitle","cursor","btnSetting","opacity","orange","transition","transitions","easing","easeInOut","duration","shorter","dumbWrapper","btnSave","bottom","paddingTop","accordionContainer","accordionHeader","paddingRight","deleteBtn","movingBtn","deletePageBtn","movingPageBtn","handleNewCategory","type","handleNewPage","swapCategory","direction","id","activeIndex","newCategories","slice","indexOf","movedItem","placeItem","swapPage","categoryId","pageId","activeCategory","Tooltip","placement","Modal","aria-labelledby","DialogContent","handle","cancel","Grid","container","spacing","xs","onSubmit","e","preventDefault","newList","newCategory","Object","assign","categoryLayout","uuid","push","FormGroup","mb","TextField","required","label","onChange","target","fullWidth","disableElevation","filtered","filter","deleted","arrayOfPagesForDelete","ButtonGroup","orientation","aria-label","disabled","aria-controls","p","handleUpdateCategory","itemPages","indexPages","category","handleUpdatePage","gutterBottom","newPage","pageLayout","addPage","mt","startIcon","ElementCreator","Fragment","Header","AdminHeader","px","py","providerData","logout","Home","paper","flexDirection","avatar","margin","secondary","form","submit","Login","name","setName","setPassword","setError","isRedirect","setIsRedirect","Avatar","loginWithEmail","res","err","autoComplete","autoFocus","Alert","severity","message","Error","myClassName","classeForResp","isResponsiveFont","textChildren","dangerouslySetInnerHTML","__html","renderText","setPadding","marginRight","setMargin","setColor","setBackgroundColor","setTextAlign","setFontSize","setFontWeight","lineHeight","setLineHeight","responseFont","setIsResponsiveFont","text","textInDumb","setTextInDumb","inputNumber","flexGrow","inputGroup","border","tooltip","dumbItemContainer","outline","easeIn","shadows","outlineColor","light","dumbItem","dumbItemDelete","showInput","dataNew","handlePadding","newPadding","Number","handleMargin","newMargin","focus","FormControlLabel","control","Switch","checked","triangle","colors","onChangeComplete","newColor","hex","FormControl","InputLabel","Select","labelId","sentData","reSaveChildren","event","aria-haspopup","prop","removeItem","imageStyle","image","borderColor","setBorderColor","borderStyle","setBorderStyle","borderWidth","setBorderWidth","borderRadius","setBorderRadius","setDisplay","imageAccordion","imagePreview","multiline","rowsMax","row","imageClassName","imageUrl","src","alt","titleImg","url","setImageUrl","imageTitle","setImageTitle","imagePlacement","setImagePlacement","imageWidth","setImageWidth","imageHeight","setImageHeight","imageBorderColor","setImageBorderColor","imageBorderStyle","setImageBorderStyle","imageBorderWidth","setImageBorderWidth","imageBorderRadius","setImageBorderRadius","float","imageFloat","setImageFloat","imageMargin","setImageMargin","imageLabel","handleImageMargin","uploadHandler","imageData","storageRef","ref","put","on","snapshot","getDownloadURL","pt","pb","htmlFor","files","ml","settings","innerContainer","ContainerElement","setFlexDirection","shadow","setShadow","setChildren","settingGutter","setSettingGutter","settingFixed","setSettingFixed","settingMaxWidth","setSettingMaxWidth","settingInnerContainer","setSettingInnerContainer","anchorEl","setAnchorEl","propsSettings","btnDrawerStyle","containerWrapper","mtView","shortest","mbView","settingsItem","toggleDrawer","handleHeadingMenuClose","addHeading","a","newChildren","newItem","libraryHeading","libraryParagraph","libraryParagraphImage","reSaveContainer","slicedChild","forEach","key","confirm","swapContainer","removeContainer","mr","currentTarget","keepMounted","Boolean","reSaveContainerStyleSettings","SkeletonPage","Skeleton","animation","SinglePage","location","useLocation","pageSlug","slugForUpdate","setData","items","setItems","isUpdate","setIsUpdate","fetchData","pageRef","set","childrenContainer","newData","keys","elem","addContainer","newItems","newCont","ContainerLayout","flexWrap","indigo","m","CircularProgress","thickness","RouterComponent","basename","path","render","App","CssBaseline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.057f7a23.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ModeContext = React.createContext()\r\n\r\nexport default ModeContext","import firebase from 'firebase'\r\n \r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBmMnCcIyz_t3G5Ia3zaiiMTLtQyrUt1Eg\",\r\n    authDomain: \"sitebuilder-74d57.firebaseapp.com\",\r\n    projectId: \"sitebuilder-74d57\",\r\n    storageBucket: \"sitebuilder-74d57.appspot.com\",\r\n    messagingSenderId: \"590275119909\",\r\n    appId: \"1:590275119909:web:5d50bcbd54a317647428cc\"\r\n}; \r\n \r\n\r\nclass Firebase { \r\n    constructor() {\r\n        const firebaseApp =  firebase.initializeApp(firebaseConfig)\r\n        this.db = firebaseApp.firestore()\r\n        this.storage = firebaseApp.storage()\r\n        this.auth = firebaseApp.auth()\r\n        console.log(\"constructor\")\r\n    }   \r\n    async registerWithGoogle() {\r\n        var provider = new firebase.auth.GoogleAuthProvider();\r\n        firebase.auth().signInWithPopup(provider).then(function(result) {\r\n            // This gives you a Google Access Token. You can use it to access the Google API.\r\n            // var token = result.credential.accessToken;\r\n            // // The signed-in user info.\r\n            // var user = result.user;\r\n            // ...\r\n          }).catch(function(error) {\r\n            // Handle Errors here.\r\n            // var errorCode = error.code;\r\n            // var errorMessage = error.message;\r\n            // // The email of the user's account used.\r\n            // var email = error.email;\r\n            // // The firebase.auth.AuthCredential type that was used.\r\n            // var credential = error.credential;\r\n            // ...\r\n          }); \r\n    }\r\n    async registerWithEmail(email, password) { \r\n        await this.auth.createUserWithEmailAndPassword(email, password) \r\n    }\r\n    async loginWithEmail(email, password) { \r\n        return this.auth.signInWithEmailAndPassword(email, password)\r\n    }\r\n    async logout() {\r\n        return this.auth.signOut()\r\n    }\r\n}\r\n \r\nexport default new Firebase()","import React from 'react';\r\n\r\nimport ModeContext from './ModeContext'\r\n\r\nimport firebase from '../../firebase/firebase'\r\n\r\nexport default class ModeProvider extends React.Component { \r\n\r\n    state = {  \r\n        isLogin: false,\r\n        user: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        firebase.auth.onAuthStateChanged( (user) => {\r\n            if(user) { \r\n                console.log(user)\r\n                this.setState({\r\n                    isLogin: true,\r\n                    user: user\r\n                })\r\n            }\r\n            else { \r\n                console.log('no user')\r\n                this.setState({\r\n                    isLogin: false,\r\n                    user: null\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <ModeContext.Provider\r\n                value={{\r\n                    modeDev: this.state.isLogin,\r\n                    user: this.state.user\r\n                }}\r\n            >\r\n                {this.props.children}\r\n            </ModeContext.Provider>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nconst CategoryContext = React.createContext()\r\n\r\nexport default CategoryContext","import React from 'react';\r\n\r\nimport CategoryContext from './CategoryContext'\r\n\r\nimport firebase from '../../firebase/firebase'\r\n\r\nexport default class CategoryProvider extends React.Component { \r\n\r\n    state = { \r\n        categories: [] \r\n    }\r\n\r\n    async componentDidMount() {\r\n        const categoryRef = firebase.db.collection(\"site1category\").doc('categoryList')\r\n        const doc = await categoryRef.get();\r\n        if (!doc.exists) {\r\n            console.log('No such categories!'); \r\n          } else { \r\n            this.setState({\r\n                categories: doc.data().list\r\n            })\r\n          } \r\n    }\r\n\r\n    async updateCategories(data) {\r\n        console.log('firebase update')\r\n        await firebase.db.collection(\"site1category\").doc('categoryList').update({\r\n            list: data\r\n        })\r\n    }\r\n\r\n    async deletePage(slug) {   \r\n        await firebase.db.collection('site1').doc(slug).delete()\r\n    }\r\n\r\n    deleteCategory(array) {\r\n        array.map( item => {\r\n            this.deletePage(item)\r\n            return 0\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <CategoryContext.Provider\r\n                value={{\r\n                    categories: this.state.categories,\r\n                    setCategories: (data) => {\r\n                        this.setState({\r\n                            categories: data\r\n                        })\r\n                        this.updateCategories(data) \r\n                    }, \r\n                    deletePageFromFirebase: (slug) => {\r\n                        this.deletePage(slug)\r\n                    },\r\n                    deleteCategoryFromFirebase: (array) => {\r\n                        this.deleteCategory(array)\r\n                    }\r\n                }}\r\n            >\r\n                {this.props.children}\r\n            </CategoryContext.Provider>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nconst LoadingContext = React.createContext()\r\n\r\nexport default LoadingContext","import React from 'react';\r\n\r\nimport LoadingContext from './LoadingContext'\r\n \r\n\r\nexport default class LoadingProvider extends React.Component { \r\n\r\n    state = { \r\n        isLoading: true \r\n    }\r\n  \r\n    render() {\r\n        return(\r\n            <LoadingContext.Provider\r\n                value={{\r\n                    isLoading: this.state.isLoading,\r\n                    setIsLoading: (value) => { \r\n                        this.setState({\r\n                            isLoading: value\r\n                        })\r\n                    } \r\n                }}\r\n            >\r\n                {this.props.children}\r\n            </LoadingContext.Provider>\r\n        )\r\n    }\r\n}","import React from 'react'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\n\r\nfunction LoadingProgress() {\r\n\r\n    const useStyles = makeStyles( () => ({\r\n        root: {\r\n            position: 'fixed', \r\n            zIndex: 1000, \r\n            top: 0, \r\n            left: 0, \r\n            right: 0,\r\n            width: '100%',  \r\n            height: 2\r\n        },\r\n        lineStyle: {  \r\n            backgroundColor: \"rgba(0,0,0,0)\"\r\n        },\r\n        barStyle: { \r\n            backgroundColor: \"rgb(214,0,166)\",\r\n            backgroundImage: 'linear-gradient(90deg, rgba(214,0,166,0.5) 0%, rgba(0,255,158,0.7) 100%)'\r\n        }\r\n    }));\r\n    \r\n    const classes = useStyles();\r\n\r\n    return ( \r\n        <div className={classes.root}>\r\n            <LinearProgress classes={{\r\n                colorPrimary: classes.lineStyle,\r\n                bar: classes.barStyle\r\n            }} /> \r\n        </div> \r\n    )\r\n}\r\n\r\nexport default LoadingProgress\r\n","import React, {useState, useEffect} from 'react'\r\nimport CategoryContext from '../../context/categoryContext/CategoryContext'\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport \"../../assets/header.scss\"\r\nimport {\r\n    AppBar,\r\n    Toolbar,\r\n    Typography,\r\n    makeStyles,\r\n    Button,\r\n    IconButton,\r\n    Drawer, \r\n    MenuItem,\r\n    Container, \r\n    Box,\r\n    AccordionSummary,\r\n    Accordion\r\n} from \"@material-ui/core\";\r\n \r\nimport MenuIcon from \"@material-ui/icons/Menu\"; \r\nimport ArrowRightAltIcon from '@material-ui/icons/ArrowRightAlt'; \r\nimport ExpandMoreOutlinedIcon from '@material-ui/icons/ExpandMoreOutlined';\r\n\r\nconst widthMobile = 992\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    header: {\r\n      position: 'static' ,\r\n      backgroundColor: theme.palette.primary.main, \r\n      [`@media (max-width: ${widthMobile}px)`]: {\r\n          // paddingLeft: 0,\r\n      }, \r\n    },\r\n    logo: { \r\n      fontWeight: 600,\r\n      color: \"#FFFEFE\",\r\n      textAlign: \"left\",\r\n    },\r\n    menuButton: { \r\n      position: 'relative', \r\n      fontWeight: 700,\r\n      size: \"18px\",\r\n      marginLeft: \"38px\",\r\n      '&>.active': {\r\n          paddingBottom: 3,\r\n          borderBottom: '2px solid #ffffff52'\r\n      }\r\n    },\r\n    toolbar: {\r\n      display: \"flex\",\r\n      justifyContent: \"space-between\",\r\n    },\r\n    drawerContainer: { \r\n        width: '50vw', \r\n        maxWidth: 450, \r\n        minWidth: 260\r\n    }, \r\n    mobileLink: { \r\n        display: 'flex',\r\n        alignItems: 'center', \r\n        color: 'inherit', \r\n        textDecoration: 'none', \r\n        height: '100%', \r\n        minHeight: 48,\r\n        width: '100%', \r\n        padding: '6px 16px', \r\n        '&.active' : {\r\n            backgroundColor: theme.palette.primary.main,\r\n            color: '#fff'\r\n        }\r\n    },  \r\n    accordionReset: {\r\n        paddingLeft: 0,\r\n        marginTop: ' 0 !important', \r\n        marginBottom: '0 !important',\r\n        minHeight: 'auto !important', \r\n        background : 'none', \r\n        boxShadow: 'none'\r\n    }\r\n}));\r\n\r\nfunction DumbComponent() {\r\n\r\n    useEffect(() => { \r\n        const setResponsiveness = () => {\r\n            return window.innerWidth < widthMobile\r\n            ? setState((prevState) => ({ ...prevState, mobileView: true }))\r\n            : setState((prevState) => ({ ...prevState, mobileView: false }));\r\n        }; \r\n        setResponsiveness(); \r\n        window.addEventListener(\"resize\", () => setResponsiveness());\r\n    }, []);\r\n\r\n    const { toolbar, header, logo , menuButton, drawerContainer, mobileLink , accordionReset} = useStyles();\r\n    const [state, setState] = useState({\r\n        mobileView: false,\r\n        drawerOpen: false,\r\n    }); \r\n    \r\n    const {categories} = React.useContext(CategoryContext)    \r\n    \r\n    const { mobileView, drawerOpen } = state;\r\n\r\n    const femmecubatorLogo = (\r\n        <Typography variant=\"h6\" component=\"h1\" className={logo}>\r\n            LogoText\r\n        </Typography>\r\n    );\r\n\r\n    const displayDesktop = () => {\r\n        return (\r\n          <Toolbar className={toolbar}>\r\n            {femmecubatorLogo}\r\n    \r\n            <Box display='flex' clone={true}>\r\n                <ul >\r\n                {\r\n                    categories.map( (item, index) => { \r\n                    return (\r\n                        <li key={index} className={menuButton}>\r\n                            {\r\n                                item.slug === '/' &&\r\n                                <NavLink  \r\n                                    exact\r\n                                    to={`${item.slug}`}\r\n                                >\r\n                                    {item.title} \r\n                                </NavLink>\r\n                                \r\n                            }\r\n                           {\r\n                                item.slug !== '/' &&\r\n                                <NavLink  \r\n                                    exact\r\n                                    to={`/${item.slug}`}\r\n                                >\r\n                                    {item.title} \r\n                                </NavLink>\r\n                           }\r\n                            <ul >\r\n                            {\r\n                                item.pages.map( (innerItem, innerIndex) => (\r\n                                <li key={innerIndex}>\r\n                                    <NavLink exact to={`/${item.slug}/${innerItem.slug}`} >\r\n                                        {innerItem.title}\r\n                                    </NavLink>\r\n                                </li>\r\n                                ))\r\n                            }\r\n                            </ul>\r\n                        </li>\r\n                    );\r\n                    })\r\n                }\r\n                </ul>\r\n            </Box>\r\n          </Toolbar>\r\n        );\r\n    };\r\n    \r\n    const displayMobile = () => {\r\n        const handleDrawerOpen = () => setState((prevState) => ({ ...prevState, drawerOpen: true }));\r\n        const handleDrawerClose = () => setState((prevState) => ({ ...prevState, drawerOpen: false }));\r\n\r\n        return (\r\n            <Toolbar disableGutters={true} style={{justifyContent: 'space-between'}}>\r\n            \r\n\r\n            <Drawer\r\n                {...{\r\n                anchor: \"right\",\r\n                open: drawerOpen,\r\n                onClose: handleDrawerClose,\r\n                }}\r\n            >\r\n                <div className={drawerContainer}>\r\n                    <Box mx={2} my={1}  >\r\n                        <Button \r\n                            variant='outlined'\r\n                            color='default'\r\n                            onClick={handleDrawerClose}\r\n                        >\r\n                            <ArrowRightAltIcon/>\r\n                        </Button>\r\n                    </Box>\r\n                    \r\n                    {\r\n                        categories.map( (item, index) => {  \r\n                            if(item.pages.length > 0) {\r\n                                return (  \r\n                                    <Accordion classes={{root: accordionReset}} key={index} >\r\n                                        <AccordionSummary\r\n                                            classes={{root: accordionReset, content: accordionReset  }}\r\n                                            expandIcon={ <ExpandMoreOutlinedIcon />}\r\n                                        >\r\n                                            <MenuItem style={{padding: 0, width: '100%'}}> \r\n                                                <NavLink \r\n                                                    exact\r\n                                                    to={`/${item.slug}`}  \r\n                                                    className={mobileLink}\r\n                                                    onClick={handleDrawerClose}\r\n                                                >\r\n                                                    {item.title}\r\n                                                    \r\n                                                </NavLink> \r\n                                            </MenuItem>     \r\n                                        </AccordionSummary>\r\n                                        { \r\n                                            item.pages.map( page => (\r\n                                                <MenuItem style={{padding: '0 0 0 15px'}} key={index} > \r\n                                                    <NavLink \r\n                                                        exact\r\n                                                        to={`/${item.slug}/${page.slug}`}  \r\n                                                        className={mobileLink}\r\n                                                        onClick={handleDrawerClose}\r\n                                                    >   \r\n                                                        {page.title}\r\n                                                        \r\n                                                    </NavLink> \r\n                                                </MenuItem> \r\n                                            ))\r\n                                        }\r\n                                    </Accordion>                                \r\n                                );\r\n                            }\r\n                            else { \r\n                                return (\r\n                                    <MenuItem key={index}  style={{padding: 0, width: '100%', borderTop: '1px solid rgba(0, 0, 0, 0.12)' }}>  \r\n                                        <NavLink \r\n                                            exact\r\n                                            to={`/${item.slug}`}  \r\n                                            className={mobileLink}\r\n                                            onClick={handleDrawerClose}\r\n                                        >\r\n                                            {item.title} \r\n                                        </NavLink> \r\n                                    </MenuItem>     \r\n                                )\r\n                            }\r\n                            \r\n                        })\r\n                    }\r\n                </div>\r\n            </Drawer>\r\n\r\n            <div>{femmecubatorLogo}</div>\r\n            <IconButton\r\n                {...{\r\n                edge: \"start\",\r\n                color: \"inherit\",\r\n                \"aria-label\": \"menu\",\r\n                \"aria-haspopup\": \"true\",\r\n                onClick: handleDrawerOpen,\r\n                }}\r\n            >\r\n                <MenuIcon />\r\n            </IconButton>\r\n            </Toolbar>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <AppBar className={header}>\r\n            <Container\r\n                disableGutters={true}\r\n                fixed={false} \r\n                maxWidth={'lg'} \r\n                className='link-in-header' \r\n            > \r\n                {mobileView ? displayMobile() : displayDesktop()}\r\n            </Container>\r\n        </AppBar> \r\n    )\r\n}\r\n\r\nexport default DumbComponent\r\n","import React from 'react'\r\nimport uuid from 'react-uuid'\r\nimport CategoryContext from '../../context/categoryContext/CategoryContext'\r\nimport { \r\n    Tooltip,\r\n    Button, \r\n    Modal, \r\n    DialogContent , \r\n    Typography, \r\n    TextField, \r\n    Accordion, \r\n    AccordionSummary, \r\n    Box,\r\n    makeStyles,  \r\n    ButtonGroup, \r\n    Grid, \r\n    FormGroup,\r\n    IconButton, \r\n} from '@material-ui/core' \r\n\r\nimport { orange } from '@material-ui/core/colors'\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport OpenWithIcon from '@material-ui/icons/OpenWith';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport ExpandLessOutlinedIcon from '@material-ui/icons/ExpandLessOutlined';\r\nimport ExpandMoreOutlinedIcon from '@material-ui/icons/ExpandMoreOutlined';\r\nimport InfoOutlined from '@material-ui/icons/InfoOutlined';\r\n\r\nimport DumbComponent from './DumbComponent'\r\n\r\nimport Draggable from 'react-draggable'; \r\n\r\nimport categoryLayout from './categoryLayout.json'\r\nimport pageLayout from '../pages/pageLayout.json'\r\n\r\nfunction StyledComponent() {\r\n    \r\n    const {categories, setCategories, deletePageFromFirebase, deleteCategoryFromFirebase} = React.useContext(CategoryContext)    \r\n\r\n    const [localCategories, setLocalCategories] = React.useState(categories)\r\n    const [open, setOpen] = React.useState(false)\r\n    const [isDisableBtn, setIsDisableBtn] = React.useState(true)\r\n\r\n    const [newCategoryTitle, setNewCategoryTitle] = React.useState('')\r\n    const [newCategorySlug, setNewCategorySlug] = React.useState('')\r\n\r\n    const [newPageTitle, setNewPageTitle] = React.useState('')\r\n    const [newPageSlug, setNewPageSlug] = React.useState('')\r\n\r\n     \r\n    const handleInputFocus = () => {  \r\n      setOpen(true);\r\n    }\r\n    const handleClose = () => {\r\n      setOpen(false);\r\n    }; \r\n\r\n    const useStyles = makeStyles((theme) => ({ \r\n        listPages : {\r\n            marginTop: 20, \r\n            paddingLeft: 25, \r\n            '&>li' : { \r\n                listStyle: 'none',\r\n                marginBottom: 5\r\n            }\r\n        },\r\n        titlePages: {\r\n            fontSize: 14, \r\n            fontWeight: 600, \r\n            borderBottom: `1px solid #eee`,\r\n            marginBottom: 12\r\n        },\r\n        menu: {    \r\n            position: \"absolute\", \r\n            left: \"calc(50% - 350px)\",\r\n            top: 50, \r\n            backgroundColor: '#fff',\r\n            padding: 10 , \r\n            paddingBottom: 0, \r\n            maxWidth: 700,  \r\n            width: 700,\r\n            maxHeight: 'calc(100vh - 100px)', \r\n            minHeight: 500,\r\n            overflowY: 'scroll',  \r\n        },\r\n        menuTitle: {\r\n            display: 'flex', \r\n            alignItems: 'center', \r\n            justifyContent: 'space-between', \r\n            fontSize: 14, \r\n            borderBottom: '1px solid #eaeaea',\r\n            paddingBottom: 6,\r\n            marginBottom: 10, \r\n            cursor: 'move'\r\n        },\r\n        btnSetting: {\r\n            opacity: 0,\r\n            position: 'absolute', \r\n            zIndex: 10, \r\n            top: 2, \r\n            left: 2,\r\n            backgroundColor: orange[700], \r\n            minWidth: 80, \r\n            minHeight: 60, \r\n            transition: `${theme.transitions.easing.easeInOut} ${theme.transitions.duration.shorter}ms opacity`, \r\n            '&:hover': {\r\n                backgroundColor: orange[900], \r\n            }\r\n        },\r\n        dumbWrapper: {\r\n            position: 'relative', \r\n            '&:hover $btnSetting': {\r\n                opacity: 1\r\n            }\r\n        },\r\n        btnSave: {\r\n            position: 'sticky', \r\n            zIndex: 15,\r\n            bottom: 0, \r\n            left: 0, \r\n            right: 0,\r\n            height: 70, \r\n            paddingTop: 10, \r\n            backgroundColor: '#fff'\r\n        },\r\n        accordionContainer: {\r\n            position: 'relative', \r\n            '&:hover $deleteBtn': {\r\n                opacity: 1\r\n            },\r\n            '&:hover $movingBtn': {\r\n                opacity: 1\r\n            }, \r\n        },\r\n        accordionHeader: {\r\n            paddingRight: 30, \r\n            paddingLeft: 25,     \r\n        },\r\n        deleteBtn: {\r\n            position: 'absolute', \r\n            zIndex: 10,\r\n            top: 5, \r\n            right: 5, \r\n            backgroundColor: '#e83b3b', \r\n            paddingLeft: 0,\r\n            paddingRight: 0,\r\n            minWidth: 25,\r\n            opacity: 0, \r\n            transition: `${theme.transitions.duration.shorter}ms ${theme.transitions.easing.easeInOut} opacity`,\r\n            '&:hover ': { \r\n                backgroundColor: '#c40b0b' \r\n            }\r\n        },\r\n        movingBtn: {\r\n            position: 'absolute', \r\n            zIndex: 10,\r\n            top: 0, \r\n            left: -5,\r\n            opacity: 0,\r\n            transition: `${theme.transitions.duration.shorter}ms ${theme.transitions.easing.easeInOut} opacity`,\r\n            '&>button' : {\r\n                paddingLeft: 3,\r\n                paddingRight: 3,\r\n                minWidth: 22\r\n            }\r\n        },\r\n        deletePageBtn: {  \r\n            backgroundColor: '#e83b3b', \r\n            paddingLeft: 0,\r\n            paddingRight: 0,\r\n            minWidth: 25, \r\n            transition: `${theme.transitions.duration.shorter}ms ${theme.transitions.easing.easeInOut} opacity`,\r\n            '&:hover ': { \r\n                backgroundColor: '#c40b0b' \r\n            }\r\n        },\r\n        movingPageBtn: { \r\n            transition: `${theme.transitions.duration.shorter}ms ${theme.transitions.easing.easeInOut} opacity`,\r\n            '&>button' : {\r\n                paddingLeft: 3,\r\n                paddingRight: 3,\r\n                minWidth: 22\r\n            }\r\n        }\r\n    \r\n    }))\r\n    \r\n    const classes = useStyles();\r\n\r\n    const addCategory = (e) => {\r\n        e.preventDefault()\r\n        let newList = categories.slice()\r\n        let newCategory = Object.assign({}, categoryLayout)\r\n        newCategory.id = uuid()\r\n        newCategory.title = newCategoryTitle\r\n        newCategory.slug = newCategorySlug\r\n        newList.push(newCategory)\r\n \r\n        setCategories(newList)\r\n        \r\n        setNewCategoryTitle('') \r\n        setNewCategorySlug('')\r\n    }\r\n    const addPage = (e, id) => { \r\n        e.preventDefault()\r\n        \r\n        let newCategories = categories.slice()\r\n        let newPage = Object.assign({}, pageLayout)\r\n        newPage.id = uuid()\r\n        newPage.title = newPageTitle\r\n        newPage.slug = newPageSlug\r\n\r\n        newCategories.map( (item) => { \r\n            if(item.id === id) { \r\n                console.log(newPage)\r\n                item.pages.push(newPage)\r\n            }\r\n            return 0 \r\n        })\r\n\r\n        setCategories(newCategories)  \r\n        setNewPageTitle('')\r\n        setNewPageSlug('')\r\n    } \r\n    const handleNewCategory = (type, value) => {\r\n        if(type === 'title') setNewCategoryTitle(value)\r\n        if(type === 'slug') setNewCategorySlug(value)\r\n    }\r\n    const handleNewPage = (type, value) => {\r\n        if(type === 'title') setNewPageTitle(value)\r\n        if(type === 'slug') setNewPageSlug(value)\r\n    }\r\n    const handleUpdateCategory = (value, id) => { \r\n        console.log('update')\r\n        let newCategories = localCategories.slice() \r\n        newCategories.map( (item) => { \r\n            if(item.id === id ) { \r\n                item.title = value\r\n            }\r\n            return 0\r\n        })  \r\n        setLocalCategories(newCategories)\r\n        setIsDisableBtn(false)\r\n    } \r\n    const handleUpdatePage = ( value, categoryId, pageId) => { \r\n        let newCategories = localCategories.slice() \r\n        newCategories.map( (item) => { \r\n            if(item.id === categoryId ) { \r\n                \r\n                item.pages.map( page => {\r\n                    if(page.id === pageId) {\r\n                        page.title = value\r\n                    }\r\n                    return 0 \r\n                })\r\n            }\r\n            return 0\r\n        })  \r\n        setLocalCategories(newCategories)\r\n        setIsDisableBtn(false)\r\n    } \r\n    const handleSave = () => { \r\n        setCategories(localCategories) \r\n        setIsDisableBtn(true)\r\n        handleClose()\r\n    }  \r\n    const swapCategory = (direction, id) => {\r\n        let newCategories = categories.slice() \r\n        let activeIndex   \r\n     \r\n        newCategories.map( (item) => { \r\n          if(item.id === id) {\r\n            activeIndex = newCategories.indexOf(item) \r\n          }\r\n          return 0 \r\n        }) \r\n \r\n     \r\n        if(direction === 'up' && activeIndex === 0) return  \r\n        if(direction === 'down' && activeIndex === newCategories.length - 1 ) return\r\n        \r\n        if(direction === 'up') { \r\n          const movedItem = newCategories[activeIndex]\r\n          const placeItem = newCategories[activeIndex - 1]\r\n    \r\n          newCategories[activeIndex] = placeItem\r\n          newCategories[activeIndex - 1 ] = movedItem  \r\n        }\r\n        if(direction === 'down') {\r\n          const movedItem = newCategories[activeIndex]\r\n          const placeItem = newCategories[activeIndex + 1]\r\n    \r\n          newCategories[activeIndex] = placeItem\r\n          newCategories[activeIndex + 1 ] = movedItem  \r\n        }\r\n\r\n        setCategories(newCategories) \r\n    } \r\n    const swapPage = (direction, categoryId, pageId) => {\r\n        let newCategories = categories.slice() \r\n        let activeCategory = []\r\n        let activeIndex   \r\n     \r\n        newCategories.map( (item) => { \r\n          if(item.id === categoryId) { \r\n                activeCategory = item \r\n                item.pages.map( page => {\r\n                    if(page.id === pageId) { \r\n                        activeIndex = item.pages.indexOf(page) \r\n                    }\r\n                    return 0 \r\n                }) \r\n          }\r\n          return 0 \r\n        }) \r\n  \r\n        if(direction === 'up' && activeIndex === 0) return  \r\n        if(direction === 'down' && activeIndex === activeCategory.pages.length - 1 ) return\r\n         \r\n        console.log(activeIndex)\r\n        if(direction === 'up') { \r\n          const movedItem = activeCategory.pages[activeIndex]\r\n          const placeItem = activeCategory.pages[activeIndex - 1]\r\n    \r\n          activeCategory.pages[activeIndex] = placeItem\r\n          activeCategory.pages[activeIndex - 1 ] = movedItem  \r\n        }\r\n        if(direction === 'down') {\r\n          const movedItem = activeCategory.pages[activeIndex]\r\n          const placeItem = activeCategory.pages[activeIndex + 1]\r\n    \r\n          activeCategory.pages[activeIndex] = placeItem\r\n          activeCategory.pages[activeIndex + 1 ] = movedItem  \r\n        }\r\n\r\n\r\n        newCategories.map( (item) => { \r\n            if(item.id === categoryId) { \r\n                item = activeCategory  \r\n            }\r\n            return 0 \r\n        }) \r\n        console.log(newCategories)\r\n\r\n        setCategories(newCategories)\r\n    }\r\n    const deleteCategory = (id) => { \r\n        let filtered = categories.filter((item) => (item.id !== id))  \r\n        const deleted = categories.filter( (item) => (item.id === id))\r\n        let arrayOfPagesForDelete = [] \r\n\r\n        arrayOfPagesForDelete.push(deleted[0].slug)\r\n        if(deleted[0].pages.length > 0) {\r\n            deleted[0].pages.map((item) => {\r\n                arrayOfPagesForDelete.push(item.slug)\r\n                return 0\r\n            })\r\n        }\r\n\r\n        setCategories(filtered)  \r\n        deleteCategoryFromFirebase(arrayOfPagesForDelete)\r\n        \r\n    } \r\n    const deletePage = ( categoryId, pageId, slug) => {\r\n        categories.map( category => {\r\n            if(category.id === categoryId) {  \r\n                let filtered = category.pages.filter((item) => (item.id !== pageId))  \r\n                category.pages = filtered\r\n            }\r\n            return 0 \r\n        }) \r\n        setCategories(categories)  \r\n\r\n        deletePageFromFirebase(slug)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dumbWrapper}>\r\n            <Tooltip title='Header Settings' placement='bottom'>\r\n                <Button  \r\n                    onClick={handleInputFocus} \r\n                    size='medium'\r\n                    variant='contained'\r\n                    color='primary' \r\n                    className={classes.btnSetting}\r\n                >  \r\n                    <SettingsIcon style={{ color: '#fff' }} fontSize='small'/>\r\n                </Button>\r\n            </Tooltip>\r\n\r\n            <Modal \r\n                open={open}  \r\n                aria-labelledby=\"draggable-dialog-title\"\r\n                onClose={handleClose} \r\n            > \r\n                <DialogContent> \r\n                    <Draggable  handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'} >\r\n                        <div className={classes.menu}>\r\n                            <Typography \r\n                                component='p' \r\n                                className={classes.menuTitle}\r\n                                id=\"draggable-dialog-title\"\r\n                            >\r\n                                Создать/отредактировать список категорий  <OpenWithIcon/>\r\n                            </Typography>\r\n                            <Grid container direction=\"row\" spacing={1}>\r\n                                <Grid item xs={4} >\r\n                                    <form onSubmit={addCategory}>\r\n                                        <FormGroup>\r\n                                            <Box mb={1}>\r\n                                                <TextField\r\n                                                    required\r\n                                                    label=\"Category title\" \r\n                                                    variant=\"outlined\" \r\n                                                    value={newCategoryTitle}\r\n                                                    onChange={(e) => { handleNewCategory('title', e.target.value)}}\r\n                                                />\r\n                                            </Box>\r\n                                            <Box mb={1} style={{position: 'relative'}}>\r\n                                                <TextField\r\n                                                    required\r\n                                                    label=\"Category slug\" \r\n                                                    variant=\"outlined\" \r\n                                                    value={newCategorySlug}\r\n                                                    onChange={(e) => { handleNewCategory('slug', e.target.value)}}\r\n                                                     \r\n                                                />\r\n                                                <Tooltip title=\"You can't rewrite slug in future\" placement='left'  >\r\n                                                    <IconButton style={{position: 'absolute', top: 3, right: 3}}>\r\n                                                        <InfoOutlined color={'secondary'}/>\r\n                                                    </IconButton>\r\n                                                </Tooltip> \r\n                                            </Box>\r\n                                            <Box mb={1}>\r\n                                                <Button \r\n                                                    type='submit'\r\n                                                    color={'primary'} \r\n                                                    variant=\"contained\"\r\n                                                    fullWidth\r\n                                                >\r\n                                                    Add New Category\r\n                                                </Button> \r\n                                            </Box>\r\n                                        </FormGroup>\r\n\r\n                                        \r\n                                    </form> \r\n                                </Grid>\r\n                                <Grid item xs={8} >\r\n                                    {\r\n                                        localCategories.map( (item, index) => {  \r\n                                            return (\r\n                                                <Box  key={index} className={classes.accordionContainer} >\r\n                                                    <Tooltip title='Delete Category' placement='top'>\r\n                                                        <Button\r\n                                                            variant='contained'\r\n                                                            color=\"default\"\r\n                                                            disableElevation={true}\r\n                                                            className={classes.deleteBtn}\r\n                                                            onClick={() => { deleteCategory(item.id) }}\r\n                                                        > \r\n                                                            <DeleteOutlineIcon style={{ color: '#fff' }} fontSize='small'/>\r\n                                                        </Button>\r\n                                                    </Tooltip>\r\n\r\n                                                    <ButtonGroup\r\n                                                        orientation=\"vertical\"\r\n                                                        color=\"primary\"\r\n                                                        aria-label=\"vertical contained primary button group\"\r\n                                                        variant=\"contained\"\r\n                                                        className={classes.movingBtn}\r\n                                                    >  \r\n                                                        <Tooltip title='Get Up' placement='right'>\r\n                                                            <Button   \r\n                                                                onClick={() => { swapCategory('up', item.id) }}\r\n                                                                size='small'\r\n                                                                variant='contained'\r\n                                                                color='primary' \r\n                                                                disabled={categories.indexOf(item) === 0 ? true : false }\r\n                                                            >  \r\n                                                                <ExpandLessOutlinedIcon style={{ color: '#fff' }} fontSize='small'/>   \r\n                                                            </Button>\r\n                                                        </Tooltip> \r\n                                                        <Tooltip title='Get Down' placement='right'>\r\n                                                            <Button   \r\n                                                                onClick={() => { swapCategory('down', item.id) }}\r\n                                                                size='small'\r\n                                                                variant='contained'\r\n                                                                color='primary' \r\n                                                                disabled={categories.indexOf(item) === categories.length - 1 ? true : false }\r\n                                                            >     \r\n                                                                <ExpandMoreOutlinedIcon style={{ color: '#fff' }} fontSize='small'/>\r\n                                                            </Button>\r\n                                                        </Tooltip>  \r\n                                                    </ButtonGroup>\r\n                                                    \r\n                                                    <Accordion>\r\n                                                        <AccordionSummary\r\n                                                            expandIcon={<ExpandMoreIcon />}\r\n                                                            aria-controls=\"image-settings-content\"\r\n                                                            id=\"panel1a-header\" \r\n                                                            className={classes.accordionHeader} \r\n                                                        >\r\n                                                            <Typography variant='h6'> Category: {item.title} </Typography> \r\n\r\n                                                            \r\n                                                        </AccordionSummary>\r\n                                                        <Box p={2}  > \r\n                                                            <Box mb={1}>\r\n                                                                <TextField \r\n                                                                    required\r\n                                                                    type='text' \r\n                                                                    label=\"Category title\"\r\n                                                                    fullWidth\r\n                                                                    variant='filled'\r\n                                                                    value={item.title} \r\n                                                                    onChange={(e) => { handleUpdateCategory(e.target.value, item.id)}}\r\n                                                                />    \r\n                                                            </Box>\r\n                                                            <Box mb={1}>\r\n                                                                <TextField \r\n                                                                    type='text' \r\n                                                                    label=\"Category slug (read only)\"\r\n                                                                    fullWidth\r\n                                                                    variant='filled'\r\n                                                                    value={item.slug} \r\n                                                                    disabled={true} \r\n                                                                />  \r\n                                                            </Box>\r\n                                                            <ul className={classes.listPages}>  \r\n                                                                <Typography className={classes.titlePages}>\r\n                                                                    Pages List:\r\n                                                                </Typography>\r\n                                                                {\r\n                                                                    item.pages.length > 0 &&\r\n                                                                    item.pages.map((itemPages, indexPages) => (\r\n                                                                        <li key={indexPages} >\r\n                                                                            <Box mb={1} display='flex' justifyContent='space-between' alignItems='center' >\r\n                                                                                <Typography >Page: { itemPages.title } </Typography>\r\n                                                                                <ButtonGroup \r\n                                                                                    color=\"primary\"\r\n                                                                                    aria-label=\"contained primary button group\"\r\n                                                                                    variant=\"contained\"\r\n                                                                                    className={classes.movingPageBtn}\r\n                                                                                >  \r\n                                                                                    <Tooltip title='Get Up' placement='top'>\r\n                                                                                        <Button   \r\n                                                                                            onClick={() => { swapPage('up', item.id, itemPages.id) }}\r\n                                                                                            size='small'\r\n                                                                                            variant='contained'\r\n                                                                                            color='primary' \r\n                                                                                            disabled={item.pages.indexOf(itemPages) === 0 ? true : false }\r\n                                                                                        >  \r\n                                                                                            <ExpandLessOutlinedIcon style={{ color: '#fff' }} fontSize='small'/>   \r\n                                                                                        </Button>\r\n                                                                                    </Tooltip> \r\n                                                                                    <Tooltip title='Get Down' placement='top'>\r\n                                                                                        <Button   \r\n                                                                                            onClick={() => { swapPage('down', item.id, itemPages.id) }} \r\n                                                                                            size='small'\r\n                                                                                            variant='contained'\r\n                                                                                            color='primary' \r\n                                                                                            disabled={item.pages.indexOf(itemPages) === item.pages.length - 1 ? true : false }\r\n                                                                                        >     \r\n                                                                                            <ExpandMoreOutlinedIcon style={{ color: '#fff' }} fontSize='small'/>\r\n                                                                                        </Button>\r\n                                                                                    </Tooltip>  \r\n                                                                                    <Tooltip title='Delete Page' placement='top'>\r\n                                                                                        <Button\r\n                                                                                            variant='contained'\r\n                                                                                            color=\"default\"\r\n                                                                                            disableElevation={true}\r\n                                                                                            className={classes.deletePageBtn}\r\n                                                                                            onClick={() => { deletePage(item.id, itemPages.id, itemPages.slug) }}\r\n                                                                                        > \r\n                                                                                            <DeleteOutlineIcon style={{ color: '#fff' }} fontSize='small'/>\r\n                                                                                        </Button>\r\n                                                                                    </Tooltip>  \r\n                                                                                </ButtonGroup>\r\n                                                                            </Box>\r\n                                                                            <Box mb={1}>\r\n                                                                                <TextField \r\n                                                                                    required\r\n                                                                                    type='text' \r\n                                                                                    label=\"Page title\"\r\n                                                                                    fullWidth\r\n                                                                                    variant='filled'\r\n                                                                                    value={itemPages.title} \r\n                                                                                    onChange={(e) => {handleUpdatePage( e.target.value, item.id, itemPages.id )}}\r\n                                                                                />    \r\n                                                                            </Box>\r\n                                                                            <Box mb={1}>\r\n                                                                                <TextField  \r\n                                                                                    type='text' \r\n                                                                                    label=\"Page slug\"\r\n                                                                                    fullWidth\r\n                                                                                    variant='filled'\r\n                                                                                    value={itemPages.slug} \r\n                                                                                    disabled={true}\r\n                                                                                />  \r\n                                                                            </Box>\r\n                                                                        </li>\r\n                                                                    ))\r\n                                                                }\r\n                                                                {\r\n                                                                    item.pages.length === 0 && \r\n                                                                    <Typography gutterBottom >No Pages </Typography>\r\n                                                                }\r\n                                                                <li>\r\n                                                                <form onSubmit={(e) => { addPage(e, item.id) }}>\r\n                                                                    <FormGroup>\r\n                                                                        <Box mb={1}>\r\n                                                                            <TextField\r\n                                                                                required\r\n                                                                                label=\"Page title\" \r\n                                                                                variant=\"outlined\" \r\n                                                                                value={newPageTitle}\r\n                                                                                onChange={(e) => { handleNewPage('title', e.target.value)}}\r\n                                                                            />\r\n                                                                        </Box>\r\n                                                                        <Box mb={1} style={{position: 'relative'}}>\r\n                                                                            <TextField\r\n                                                                                required\r\n                                                                                label=\"Page slug\" \r\n                                                                                variant=\"outlined\" \r\n                                                                                value={newPageSlug}\r\n                                                                                onChange={(e) => { handleNewPage('slug', e.target.value)}}\r\n                                                                                \r\n                                                                            />\r\n                                                                            <Tooltip title=\"You can't rewrite slug in future\" placement='left'  >\r\n                                                                                <IconButton style={{position: 'absolute', top: 3, right: 3}}>\r\n                                                                                    <InfoOutlined color={'secondary'}/>\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip> \r\n                                                                        </Box>\r\n                                                                        <Box mt={2}> \r\n                                                                            <Button \r\n                                                                                type={'submit'}\r\n                                                                                color={'primary'} \r\n                                                                                variant=\"contained\" \r\n                                                                            >\r\n                                                                                Add New Page\r\n                                                                            </Button>\r\n                                                                        </Box>\r\n                                                                    </FormGroup>\r\n\r\n                                                                    \r\n                                                                </form> \r\n                                                                    \r\n                                                                </li>\r\n                                                            </ul>\r\n                                                        </Box>\r\n                                                    </Accordion>\r\n                                                </Box>\r\n                                            )  \r\n                                        })\r\n                                    }\r\n                                    <Box className={classes.btnSave} mt={2}>\r\n                                        <Button \r\n                                            color={'primary'} \r\n                                            variant=\"contained\"\r\n                                            onClick={handleSave}\r\n                                            startIcon={<SaveIcon/>}\r\n                                            disabled={isDisableBtn}\r\n                                        >\r\n                                            Save\r\n                                        </Button>\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n                            \r\n                            \r\n                           \r\n                        </div>\r\n                    </Draggable>\r\n                </DialogContent> \r\n            </Modal>\r\n\r\n            <DumbComponent data={categories} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StyledComponent\r\n","import React from 'react' \r\n\r\nimport StyledComponent from \"./StyledComponent\"\r\nimport DumbComponent from \"./DumbComponent\"\r\n \r\nimport ModeContext from '../../context/modeContext/ModeContext' \r\n \r\nfunction ElementCreator() {\r\n\r\n    const {modeDev} = React.useContext(ModeContext) \r\n    \r\n    return (    \r\n        <React.Fragment>   \r\n            {\r\n                modeDev && \r\n                <StyledComponent />\r\n            }\r\n \r\n            {\r\n                !modeDev && \r\n                <DumbComponent/>\r\n            } \r\n        </React.Fragment> \r\n    )\r\n}\r\n\r\nexport default ElementCreator\r\n","\r\nimport React from \"react\";  \r\nimport HeaderCreator from './ElementCreator' \r\n \r\n  \r\nconst Header = () => { \r\n   \r\n\r\n    return (  \r\n        <HeaderCreator />  \r\n    );\r\n  }\r\n\r\nexport default Header","import { Button, Typography, Box } from '@material-ui/core'\r\nimport React from 'react' \r\n\r\nimport ModeContext from '../../context/modeContext/ModeContext'\r\n\r\nimport firebase from '../../firebase/firebase'\r\n\r\nfunction AdminHeader() {\r\n\r\n    const { user } = React.useContext(ModeContext)\r\n \r\n    const handleSignOut = () => {\r\n        firebase.logout()\r\n    }\r\n    \r\n    if(user) {\r\n        return (\r\n            <Box px={3} py={1} display='flex' justifyContent='space-between' alignItems='center' >\r\n                <Typography component='span' >\r\n                    hello, { user.providerData[0].email } \r\n                </Typography>\r\n                <span>\r\n                    (theme setting , css for body, ....)\r\n                </span>\r\n                <Button \r\n                    size='small'\r\n                    color='secondary' \r\n                    variant='outlined' \r\n                    onClick={handleSignOut}\r\n                >\r\n                    Sign Out\r\n                </Button>\r\n            </Box>\r\n        )\r\n    }\r\n    else { \r\n        return null\r\n    }\r\n    \r\n}\r\n\r\nexport default AdminHeader\r\n","\r\nimport React from 'react'\r\n\r\nimport { Box, Container, Typography } from '@material-ui/core'\r\n\r\n\r\nimport LoadingContext from '../context/loadingContext/LoadingContext'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nfunction Home() {\r\n\r\n    const { setIsLoading } = React.useContext(LoadingContext)\r\n\r\n    React.useEffect( () => {\r\n        setIsLoading(false)\r\n    }, [])\r\n\r\n    return (\r\n        <Container>\r\n            <Box mt={5}>\r\n                <Typography variant='h3'>\r\n                    Home\r\n                </Typography>\r\n\r\n                <NavLink to='/login'>\r\n                    Login\r\n                </NavLink>\r\n            </Box>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\nimport firebase from '../firebase/firebase'\r\n\r\nimport LoadingContext from '../context/loadingContext/LoadingContext'\r\n \r\nimport { Avatar, Button, TextField, Typography, Container } from '@material-ui/core'; \r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'; \r\nimport { makeStyles } from '@material-ui/core/styles';  \r\nimport { Alert } from '@material-ui/lab';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nfunction Login() {\r\n    // const log = {\r\n    //     name: 'admin-sitebuilder@mail.com',\r\n    //     pas: 'sitebuilderadmin123'\r\n    // }\r\n    const { setIsLoading } = React.useContext(LoadingContext)\r\n\r\n    const classes = useStyles();\r\n\r\n    const [name, setName] = React.useState('')\r\n    const [password, setPassword] = React.useState('')\r\n\r\n    const [error, setError] = React.useState(null)\r\n    const [isRedirect, setIsRedirect] = React.useState(false)\r\n    \r\n    React.useEffect( () => {\r\n        setIsLoading(false)\r\n    }, [])\r\n\r\n    const hendlerSubmit = (e) => {\r\n        e.preventDefault() \r\n        firebase.loginWithEmail(name, password).then( (res) => {\r\n            setIsRedirect(true)\r\n        }).catch(function(err) { \r\n            setError(err)\r\n        })\r\n        \r\n    } \r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n    \r\n            {/* Redirect при авторизации */}\r\n            { isRedirect ? (<Redirect push to=\"/\"/>) : null }\r\n     \r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Вход\r\n                </Typography>\r\n                <form className={classes.form} onSubmit={hendlerSubmit}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"text\"\r\n                        label=\"User\"\r\n                        name=\"user\"\r\n                        autoComplete='true'\r\n                        autoFocus\r\n                        value={name}\r\n                        onChange={ (e)=>{setName(e.target.value)} }\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\" \r\n                        value={password}\r\n                        onChange={(e)=>{setPassword(e.target.value)}}\r\n                    />\r\n                    {\r\n                        error && \r\n                        <Alert severity=\"error\">{error.message}</Alert>\r\n                    }\r\n                \r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Войти\r\n                    </Button>\r\n                \r\n                </form>\r\n            </div>\r\n           \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","\r\nimport React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { Box, Typography} from '@material-ui/core'\r\n\r\nimport LoadingContext from '../context/loadingContext/LoadingContext'\r\n\r\nfunction Error() {\r\n\r\n    const { setIsLoading } = React.useContext(LoadingContext)\r\n\r\n    React.useEffect( () => {\r\n        setIsLoading(false)\r\n    }, [])\r\n    \r\n    return ( \r\n        <Box \r\n            display='flex' \r\n            flexDirection=\"column\" \r\n            alignItems='center'\r\n            mt={5}\r\n        >\r\n            <Typography variant='h5' gutterBottom>\r\n                This page isn`t available\r\n            </Typography>\r\n            <NavLink to='/'>\r\n                Home\r\n            </NavLink>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Error\r\n","import React from 'react'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Box } from '@material-ui/core';\r\n// import { Typography } from '@material-ui/core';\r\n\r\nfunction DumbComponent(props) {\r\n  \r\n    const useStyles = makeStyles((theme) => ({\r\n        myClassName: props.className \r\n      }));\r\n    const classes = useStyles();\r\n \r\n    \r\n    const classeForResp = props.isResponsiveFont ? 'resposive-font-size' : '' \r\n\r\n    const renderText = () => {\r\n        if(props.textChildren) { \r\n            return  <span dangerouslySetInnerHTML={{__html: props.textChildren}}></span>\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <React.Fragment>\r\n             <Box \r\n                component={props.data.variant} \r\n                className={`${classes.myClassName} ${classeForResp}`} \r\n            >\r\n                { renderText() } \r\n            </Box>\r\n\r\n\r\n            {/* <Typography variant={props.data.variant} className={[classes.myClassName, classeForResp]} >\r\n                { \r\n                    props.textChildren\r\n                }\r\n            </Typography> */} \r\n            \r\n\r\n            {/* {  \r\n                React.createElement(`${props.data.variant}`, { className: `${classes.myClassName} ${classeForResp}` }, renderText() ) \r\n            } */}\r\n        </React.Fragment>\r\n    )\r\n} \r\n\r\nexport default DumbComponent\r\n","import React from 'react'  \r\n\r\nimport Draggable from 'react-draggable';\r\nimport { TwitterPicker } from 'react-color';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { \r\n    FormControlLabel, \r\n    Switch,\r\n    Grid, \r\n    TextField, \r\n    Button, \r\n    FormControl,\r\n    InputLabel,\r\n    Select, \r\n    MenuItem,  \r\n    IconButton, \r\n    Typography,\r\n    Modal,\r\n    Box,\r\n    Tooltip,\r\n    DialogContent\r\n\r\n} from '@material-ui/core'\r\n\r\nimport DumbComponent from \"./DumbComponent\" \r\n \r\n\r\nimport OpenWithIcon from '@material-ui/icons/OpenWith';\r\nimport { DeleteOutline, InfoOutlined } from '@material-ui/icons';\r\n\r\nconst StyledComponent = (props) => {  \r\n\r\n    console.log('styled heading work')\r\n\r\n    const [padding, setPadding] = React.useState({ \r\n        top:  props.data.classes.paddingTop , \r\n        left:  props.data.classes.paddingLeft ,\r\n        bottom: props.data.classes.paddingBottom , \r\n        right: props.data.classes.paddingRight \r\n    })\r\n    const [margin, setMargin] = React.useState({\r\n        top:  props.data.classes.marginTop , \r\n        left:  props.data.classes.marginLeft ,\r\n        bottom: props.data.classes.marginBottom , \r\n        right: props.data.classes.marginRight \r\n    })\r\n    \r\n    const [color, setColor] = React.useState(props.data.classes.color || 'inherit')\r\n    const [backgroundColor, setBackgroundColor] = React.useState(props.data.classes.backgroundColor ||  'transperent')\r\n    const [textAlign, setTextAlign] = React.useState(props.data.classes.textAlign ||  'left')\r\n    const [display, setDisplay] = React.useState(props.data.classes.display ||  'block')\r\n    const [fontSize, setFontSize] = React.useState(props.data.classes.fontSize ||  16)\r\n    const [fontWeight, setFontWeight] = React.useState(props.data.classes.fontWeight ||  400)\r\n    const [lineHeight, setLineHeight] = React.useState(props.data.classes.lineHeight ||  1.38)\r\n\r\n    const [isResponsiveFont, setIsResponsiveFont] = React.useState(props.data.responseFont || false)\r\n\r\n    const [textInDumb, setTextInDumb] = React.useState(props.data.text)\r\n    const [isDisableBtn, setIsDisableBtn] = React.useState(true) \r\n\r\n    \r\n    const [open, setOpen] = React.useState(false);\r\n         \r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        inputNumber: {\r\n            flexGrow: 1, \r\n            margin: 5, \r\n            width: \"100%\"\r\n        }, \r\n        inputGroup: {\r\n            border: \"1px solid #f5f5f5\", \r\n            padding: 3, \r\n            inputNumber: { \r\n                maxWidth: \"100%\"\r\n\r\n            }\r\n        }, \r\n        btnSave: { \r\n            position: 'sticky', \r\n            zIndex: theme.zIndex.tooltip,\r\n            bottom: 0, \r\n            left: 0, \r\n            right: 0,\r\n            height: 80, \r\n            backgroundColor: '#fff', \r\n            \r\n            '&>button': {\r\n                marginTop: 20, \r\n                marginBottom: 30, \r\n                marginLeft: 5, \r\n                opacity: 1,  \r\n                paddingLeft: 40, \r\n                paddingRight: 40\r\n            }\r\n        },\r\n        dumbItemContainer: { \r\n            position: 'relative', \r\n            outline: '1px solid #f000',\r\n            transition: `${theme.transitions.duration.shorter}ms ${theme.transitions.easing.easeIn} outline`,\r\n            '&:hover' : {   \r\n                boxShadow: theme.shadows[10], \r\n                cursor: 'pointer',\r\n                outlineColor: `${theme.palette.error.light}`,\r\n                '&>button' : { \r\n                    opacity: 1\r\n                }\r\n            }, \r\n        },\r\n        dumbItem: { \r\n            position: 'relative',\r\n            transition: \"300ms cubic-bezier(0.4, 0, 1, 1)\",\r\n            \r\n        }, \r\n        dumbItemDelete : { \r\n            opacity: 0,\r\n            position: 'absolute', \r\n            zIndex: 9, \r\n            top: 3, \r\n            right: 5,\r\n            backgroundColor: '#fff',\r\n            transition: \"100ms cubic-bezier(0.4, 0, 1, 1)\",\r\n            '&:hover' : { \r\n                backgroundColor: theme.palette.error.light\r\n            }\r\n        }, \r\n         \r\n        menu: {    \r\n            position: \"absolute\", \r\n            left: \"calc(50% - 200px)\",\r\n            top: 50, \r\n            backgroundColor: '#fff',\r\n            padding: 10 , \r\n            paddingBottom: 0, \r\n            maxWidth: 400,  \r\n            width: 400,\r\n            maxHeight: 'calc(100vh - 100px)', \r\n            minHeight: 500,\r\n            overflowY: 'scroll'\r\n        },\r\n        menuTitle: {\r\n            display: 'flex', \r\n            alignItems: 'center', \r\n            justifyContent: 'space-between', \r\n            fontSize: 14, \r\n            borderBottom: '1px solid #eaeaea',\r\n            paddingBottom: 6,\r\n            marginBottom: 10, \r\n            cursor: 'move'\r\n        },\r\n        showInput: {\r\n        }\r\n        \r\n      }));\r\n    \r\n    const myClassName = { \r\n        display: display,\r\n        paddingTop: padding.top,\r\n        paddingBottom: padding.bottom,\r\n        paddingLeft: padding.left,\r\n        paddingRight: padding.right,\r\n        marginTop: margin.top,\r\n        marginBottom: margin.bottom,\r\n        marginLeft: margin.left,\r\n        marginRight: margin.right,\r\n        color: color,\r\n        backgroundColor: backgroundColor,\r\n        textAlign: textAlign,\r\n        fontSize: fontSize,\r\n        fontWeight: fontWeight, \r\n        lineHeight: lineHeight\r\n    } \r\n    const classes = useStyles();\r\n\r\n    //const dataNew - props for Dumb Component\r\n    const dataNew = {...props.data, ...{\r\n        classes: myClassName\r\n    }}  \r\n\r\n    const handlePadding = (e, direction) => {  \r\n        let newPadding = Object.assign({}, padding)\r\n        newPadding[direction] = Number(e.target.value)\r\n        setPadding(newPadding)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n    const handleMargin= (e, direction) => {  \r\n        let newMargin = Object.assign({}, margin)\r\n        newMargin[direction] = Number(e.target.value)\r\n        setMargin(newMargin)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n\r\n    const saveData = () => {   \r\n        const sentData = Object.assign({}, props.data)\r\n\r\n        sentData.classes = myClassName\r\n        sentData.text = textInDumb\r\n        sentData.responseFont = isResponsiveFont\r\n        props.reSaveChildren(props.data.id, sentData)\r\n        setIsDisableBtn(true); \r\n    }\r\n    const removeItem = () => {  \r\n        props.removeItem(props.data.id)\r\n    };\r\n    \r\n    const handleInputFocus = (event) => {  \r\n        setOpen(true);\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n    \r\n\r\n    return ( \r\n            <Grid container style={{position: 'relative'}}> \r\n                <Modal \r\n                    open={open} \r\n                    // PaperComponent={PaperComponent}\r\n                    aria-labelledby=\"draggable-dialog-title\"\r\n                    onClose={handleClose} \r\n                >\r\n                    <DialogContent>\r\n                        <Draggable  handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'} >\r\n                            <div className={classes.menu}  >\r\n                                <Typography \r\n                                    component='p' \r\n                                    className={classes.menuTitle}\r\n                                    id=\"draggable-dialog-title\"\r\n                                >\r\n                                    Задать заголовку текст и стили <OpenWithIcon/>\r\n                                </Typography>\r\n\r\n                                {/* text input */}\r\n                                <Box mb={2} >\r\n                                    <TextField \r\n                                        type='text' \r\n                                        label=\"Text input\"\r\n                                        fullWidth\r\n                                        value={textInDumb}\r\n                                        onChange={(e) => { setIsDisableBtn(false); setTextInDumb(e.target.value); e.target.focus() }}\r\n                                    />    \r\n                                </Box>  \r\n\r\n                                {/* Responsive font */}\r\n                                <Box mb={2}>\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Switch\r\n                                                    checked={isResponsiveFont}\r\n                                                    onChange={() => {  setIsDisableBtn(false); setIsResponsiveFont(!isResponsiveFont) }}\r\n                                                    name=\"checkedB\"\r\n                                                    color=\"primary\"\r\n                                                />\r\n                                            }\r\n                                            label=\"Set Responsive Font Size\"\r\n                                        />\r\n                                        <Tooltip title=\"Если включено, шрифт будет меньше размером на мобильных устройствах. \"  >\r\n                                            <IconButton>\r\n                                                <InfoOutlined/>\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                </Box>\r\n\r\n                                {/* margin */}\r\n                                <Box className={classes.inputGroup}>\r\n                                    <Box display=\"flex\" flexDirection=\"row\"  > \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Margin Top\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={margin.top}\r\n                                            onChange={ (e) => { handleMargin(e, 'top') } }     \r\n                                        />\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Margin Bottom\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={margin.bottom}\r\n                                            onChange={ (e) => { handleMargin(e, 'bottom') } }     \r\n                                        />\r\n                                    </Box>\r\n                                    <Box display=\"flex\" flexDirection=\"row\" > \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Margin Left\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={margin.left}\r\n                                            onChange={ (e) => { handleMargin(e, 'left') } }     \r\n                                        />\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Margin Right\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={margin.right}\r\n                                            onChange={ (e) => { handleMargin(e, 'right') } }     \r\n                                        />\r\n                                    </Box>\r\n                                </Box>\r\n                                \r\n                                {/* padding */}\r\n                                <Box className={classes.inputGroup}>\r\n                                    <Box display=\"flex\" flexDirection=\"row\" > \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Padding Top\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={padding.top}\r\n                                            onChange={ (e) => { handlePadding(e, 'top') } }     \r\n                                        />\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Padding Bottom\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={padding.bottom}\r\n                                            onChange={ (e) => { handlePadding(e, 'bottom') } }     \r\n                                        />\r\n                                    </Box>\r\n                                    <Box display=\"flex\" flexDirection=\"row\" > \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Padding Left\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={padding.left}\r\n                                            onChange={ (e) => { handlePadding(e, 'left') } }     \r\n                                        />\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Padding Right\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={padding.right}\r\n                                            onChange={ (e) => { handlePadding(e, 'right') } }     \r\n                                        />\r\n                                    </Box>\r\n                \r\n                                </Box>\r\n                                \r\n                                {/* bg-color */}\r\n                                <Box className={classes.inputGroup} display=\"flex\" flexDirection=\"row\" > \r\n                                    <Box \r\n                                        className={classes.inputNumber}\r\n                                    >\r\n                                        <Typography  component={'h6'} gutterBottom  >\r\n                                            Background  \r\n                                        </Typography>\r\n                                        <TwitterPicker\r\n                                            width={'100%'}\r\n                                            triangle={'hide'}\r\n                                            color={backgroundColor}\r\n                                            colors={[ '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                            onChangeComplete={(newColor) => {\r\n                                                setIsDisableBtn(false);\r\n                                                setBackgroundColor(newColor.hex) \r\n                                            }}\r\n\r\n                                        /> \r\n                                    </Box> \r\n                                    <Box \r\n                                        className={classes.inputNumber}\r\n                                    >\r\n                                        <Typography  component={'h6'} gutterBottom  >\r\n                                            Color  \r\n                                        </Typography>\r\n                                        <TwitterPicker\r\n                                            width={'100%'}\r\n                                            triangle={'hide'}\r\n                                            colors={[ '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                            color={color}\r\n                                            onChangeComplete={(newColor) => {\r\n                                                setIsDisableBtn(false);\r\n                                                setColor(newColor.hex) \r\n                                            }}\r\n\r\n                                        /> \r\n                                    </Box>  \r\n                                </Box>\r\n                                \r\n                                {/* font */}\r\n                                <Box className={classes.inputGroup}> \r\n                                    <Box display=\"flex\" flexDirection=\"row\" >  \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Font Size\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={fontSize}\r\n                                            onChange={ (e) => {setIsDisableBtn(false); setFontSize(Number(e.target.value))} }     \r\n                                        /> \r\n                                        <FormControl \r\n                                            variant='filled' \r\n                                            size='small'   \r\n                                            className={classes.inputNumber}\r\n                                        >\r\n                                            <InputLabel id=\"weight-select-label\">Font Weight</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"weight-select-label\"\r\n                                                id=\"weight-select\"\r\n                                                value={fontWeight}\r\n                                                onChange={(e) => {setIsDisableBtn(false); setFontWeight(Number(e.target.value)) }}\r\n                                            >\r\n                                            <MenuItem value={300}>Light</MenuItem>\r\n                                            <MenuItem value={400}>Regular</MenuItem>\r\n                                            <MenuItem value={700}>Bold</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    \r\n                                        \r\n                                    </Box>\r\n                                    <Box display=\"flex\" flexDirection=\"row\" >\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Line Height (em)\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={lineHeight}\r\n                                        onChange={ (e) => {setIsDisableBtn(false); setLineHeight(Number(e.target.value))} }     \r\n                                    />\r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.inputNumber}\r\n                                    >\r\n                                        <InputLabel id=\"align-select-label\">Text Align</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"align-select-label\"\r\n                                            id=\"align-select\"\r\n                                            value={textAlign}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setTextAlign((e.target.value)) }}\r\n                                        >\r\n                                        <MenuItem value={'left'}>Left</MenuItem>\r\n                                        <MenuItem value={'center'}>Center</MenuItem>\r\n                                        <MenuItem value={'right'}>Right</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Box>\r\n                                </Box>\r\n                                \r\n                                <Box className={classes.btnSave}>\r\n                                    <Button \r\n                                        disabled={isDisableBtn} \r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        size={'medium'} \r\n                                        onClick={saveData}\r\n                                    >\r\n                                        Save\r\n                                    </Button> \r\n                                </Box>\r\n                            \r\n                            </div>\r\n                        </Draggable>\r\n                    </DialogContent>\r\n                    \r\n                </Modal>\r\n                \r\n                <Grid item xs={12}  className={classes.dumbItemContainer }>  \r\n                        <div \r\n                            className={classes.dumbItem }\r\n                            onClick={handleInputFocus}\r\n                            aria-controls=\"simple-menu\" aria-haspopup=\"true\"  \r\n                        >\r\n                            <DumbComponent \r\n                                data={dataNew} \r\n                                className={myClassName}\r\n                                isResponsiveFont={isResponsiveFont}\r\n                                prop={props.data.prop} \r\n                                textChildren={textInDumb}\r\n                            />\r\n                           \r\n                        </div>  \r\n                        <IconButton \r\n                            className={ classes.dumbItemDelete}\r\n                            size=\"small\"\r\n                            aria-label=\"delete\"\r\n                            onClick={removeItem}\r\n                        >\r\n                            <DeleteOutline/>\r\n                        </IconButton>\r\n \r\n                </Grid>\r\n            </Grid>\r\n           \r\n \r\n    )\r\n}\r\n\r\nexport default StyledComponent\r\n","import React from 'react' \r\n\r\nimport StyledComponent from \"./StyledComponent\"\r\nimport DumbComponent from \"./DumbComponent\"\r\n \r\nimport ModeContext from '../../../context/modeContext/ModeContext'\r\n \r\nfunction ElementCreator(props) {\r\n\r\n    const {modeDev} = React.useContext(ModeContext)  \r\n   \r\n    return (   \r\n        // !!data.classes &&\r\n        <React.Fragment>  \r\n            {\r\n                modeDev && \r\n                <StyledComponent  \r\n                    data={props.item} \r\n                    reSaveChildren={props.reSaveChildren}\r\n                    removeItem={props.removeItem}\r\n                />\r\n            }\r\n \r\n            {\r\n                !modeDev && \r\n                <DumbComponent \r\n                    data={props.item} \r\n                    className={props.item.classes} \r\n                    prop={props.item.prop} \r\n                    textChildren={props.item.text}\r\n                />\r\n            } \r\n        </React.Fragment> \r\n    )\r\n}\r\n\r\nexport default ElementCreator\r\n","import React from 'react'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nfunction DumbComponent(props) {\r\n  \r\n    const useStyles = makeStyles((theme) => ({\r\n        myClassName: props.className , \r\n        imageStyle: props.data.image ? props.data.image.classes : {}\r\n      }));\r\n    const classes = useStyles();\r\n \r\n \r\n    return (\r\n        <React.Fragment>\r\n            \r\n            <Typography component={props.data.variant} className={classes.myClassName} > \r\n                { \r\n                    props.textChildren\r\n                } \r\n            </Typography> \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default DumbComponent\r\n","import React from 'react'  \r\n\r\nimport Draggable from 'react-draggable';\r\nimport { TwitterPicker } from 'react-color';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport {\r\n    FormGroup, \r\n    Grid, \r\n    TextField, \r\n    Button, \r\n    FormControl,\r\n    InputLabel,\r\n    Select, \r\n    MenuItem,  \r\n    IconButton, \r\n    Typography,\r\n    Modal,\r\n    Box,\r\n    DialogContent, \r\n\r\n} from '@material-ui/core'\r\n\r\nimport DumbComponent from \"./DumbComponent\"  \r\n \r\n\r\nimport OpenWithIcon from '@material-ui/icons/OpenWith';\r\nimport DeleteOutline  from '@material-ui/icons/DeleteOutline';  \r\n\r\nconst StyledComponent = (props) => {  \r\n\r\n    console.log('styled paragraph work')\r\n    let [padding, setPadding] = React.useState({ \r\n        top:  props.data.classes.paddingTop  , \r\n        left:  props.data.classes.paddingLeft ,\r\n        bottom: props.data.classes.paddingBottom , \r\n        right: props.data.classes.paddingRight \r\n    })\r\n    const [margin, setMargin] = React.useState({\r\n        top:  props.data.classes.marginTop , \r\n        left:  props.data.classes.marginLeft ,\r\n        bottom: props.data.classes.marginBottom , \r\n        right: props.data.classes.marginRight \r\n    })\r\n     \r\n    \r\n    const [color, setColor] = React.useState(props.data.classes.color || 'inherit')\r\n    const [backgroundColor, setBackgroundColor] = React.useState(props.data.classes.backgroundColor ||  'transperent')\r\n\r\n    const [borderColor, setBorderColor] = React.useState(props.data.classes.borderColor ||  'transperent')\r\n    const [borderStyle, setBorderStyle] = React.useState(props.data.classes.borderStyle ||  'solid')\r\n    const [borderWidth, setBorderWidth] = React.useState(props.data.classes.borderWidth ||  0 )\r\n    const [borderRadius, setBorderRadius] = React.useState(props.data.classes.borderRadius || 0)\r\n\r\n    const [textAlign, setTextAlign] = React.useState(props.data.classes.textAlign ||  'left')\r\n    const [display, setDisplay] = React.useState(props.data.classes.display ||  'block')\r\n    const [fontSize, setFontSize] = React.useState(props.data.classes.fontSize ||  16)\r\n    const [fontWeight, setFontWeight] = React.useState(props.data.classes.fontWeight ||  400)\r\n    const [lineHeight, setLineHeight] = React.useState(props.data.classes.lineHeight ||  1.38)\r\n\r\n    const [textInDumb, setTextInDumb] = React.useState(props.data.text)\r\n    const [isDisableBtn, setIsDisableBtn] = React.useState(true) \r\n\r\n    \r\n    const [open, setOpen] = React.useState(false);\r\n         \r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n     \r\n        inputNumber: {\r\n            flexGrow: 1, \r\n            margin: 5, \r\n            width: \"100%\"\r\n        }, \r\n        inputGroup: {\r\n            border: \"1px solid #f5f5f5\", \r\n            padding: 3, \r\n            inputNumber: { \r\n                maxWidth: \"100%\"\r\n\r\n            }\r\n        },\r\n        btnSave: { \r\n            position: 'sticky', \r\n            zIndex: theme.zIndex.tooltip,\r\n            bottom: 0, \r\n            left: 0, \r\n            right: 0,\r\n            height: 80, \r\n            backgroundColor: '#fff', \r\n            \r\n            '&>button': {\r\n                marginTop: 20, \r\n                marginBottom: 30, \r\n                marginLeft: 5, \r\n                opacity: 1,  \r\n                paddingLeft: 40, \r\n                paddingRight: 40\r\n            }\r\n        },\r\n        dumbItemContainer: { \r\n            position: 'relative', \r\n            outline: '.1px solid #f000',\r\n            transition: `${theme.transitions.duration.shorter}ms ${theme.transitions.easing.easeIn} outline`,\r\n            '&:hover' : {   \r\n                boxShadow: theme.shadows[10], \r\n                cursor: 'pointer',\r\n                outlineColor: `${theme.palette.error.light}`,\r\n                '&>button' : { \r\n                    opacity: 1\r\n                }\r\n            }, \r\n        },\r\n       \r\n        dumbItem: { \r\n            position: 'relative',\r\n            transition: \"300ms cubic-bezier(0.4, 0, 1, 1)\",\r\n            // height: '100%'\r\n            \r\n        }, \r\n        dumbItemDelete : { \r\n            opacity: 0,\r\n            position: 'absolute', \r\n            zIndex: 9, \r\n            top: 3, \r\n            right: 5,\r\n            backgroundColor: '#fff',\r\n            transition: \"100ms cubic-bezier(0.4, 0, 1, 1)\",\r\n            '&:hover' : { \r\n                backgroundColor: theme.palette.error.light\r\n            }\r\n        }, \r\n         \r\n        menu: {    \r\n            position: \"absolute\", \r\n            left: \"calc(50% - 200px)\",\r\n            top: 50, \r\n            backgroundColor: '#fff',\r\n            padding: 10 , \r\n            paddingBottom: 0, \r\n            maxWidth: 400,  \r\n            width: 400, \r\n            maxHeight: 'calc(100vh - 100px)', \r\n            minHeight: 500,\r\n            overflowY: 'scroll'\r\n        },\r\n        menuTitle: {\r\n            display: 'flex', \r\n            alignItems: 'center', \r\n            justifyContent: 'space-between', \r\n            fontSize: 14, \r\n            borderBottom: '1px solid #eaeaea',\r\n            paddingBottom: 6,\r\n            marginBottom: 10, \r\n            cursor: 'move'\r\n        },\r\n        imageAccordion: { \r\n            marginBottom: 10,  \r\n        },\r\n        imagePreview: {\r\n            position: 'relative', \r\n            width: 100, \r\n            height: 100, \r\n            border: `1px solid ${theme.palette.primary.light}`, \r\n            '&>img' : {  \r\n                position: 'absolute',\r\n                top: 0, \r\n                bottom: 0, \r\n                left: 0, \r\n                right: 0, \r\n                margin: 0, \r\n                width: \"100%\", \r\n                maxWidth: \"100%\", \r\n                height: \"100%\", \r\n                maxHeight: \"100%\", \r\n            }, \r\n            '&>button' : {\r\n                position: 'absolute',\r\n                zIndex: 10, \r\n                top: 0, \r\n                bottom: 0, \r\n                left: 0, \r\n                right: 0, \r\n                width: \"100%\", \r\n                maxWidth: \"100%\", \r\n                height: \"100%\", \r\n                maxHeight: \"100%\", \r\n                backgroundColor: \"#0027ff70\", \r\n                borderRadius: 0, \r\n                transition: \"200ms cubic-bezier(0.4, 0, 1, 1)\",\r\n                \"&:hover\": {\r\n                    opacity: 0\r\n                } \r\n            }, \r\n        }\r\n        \r\n      }));\r\n    \r\n    const myClassName = { \r\n        display: display,\r\n        paddingTop: padding.top,\r\n        paddingBottom: padding.bottom,\r\n        paddingLeft: padding.left,\r\n        paddingRight: padding.right,\r\n        marginTop: margin.top,\r\n        marginBottom: margin.bottom,\r\n        marginLeft: margin.left,\r\n        marginRight: margin.right,\r\n        color: color,\r\n        backgroundColor: backgroundColor,\r\n        textAlign: textAlign,\r\n        fontSize: fontSize,\r\n        fontWeight: fontWeight, \r\n        lineHeight: lineHeight,\r\n        borderColor: borderColor,\r\n        borderStyle: borderStyle,\r\n        borderRadius: borderRadius,\r\n        borderWidth: borderWidth\r\n    } \r\n    const classes = useStyles();\r\n\r\n    //const dataNew - props for Dumb Component\r\n    const dataNew = {...props.data, ...{\r\n        classes: myClassName\r\n    }} \r\n\r\n     \r\n    const handlePadding = (e, direction) => {  \r\n        let newPadding = Object.assign({}, padding)\r\n        newPadding[direction] = Number(e.target.value)\r\n        setPadding(newPadding)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n    const handleMargin= (e, direction) => {  \r\n        let newMargin = Object.assign({}, margin)\r\n        newMargin[direction] = Number(e.target.value)\r\n        setMargin(newMargin)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n\r\n    const saveData = () => {    \r\n        const sentData = Object.assign({}, props.data)\r\n\r\n        sentData.classes = myClassName \r\n        sentData.text = textInDumb\r\n\r\n\r\n        props.reSaveChildren(props.data.id, sentData)\r\n        setIsDisableBtn(true); \r\n    }\r\n    const removeItem = () => {  \r\n        props.removeItem(props.data.id)\r\n    };\r\n    \r\n    const handleInputFocus = (event) => {  \r\n        setOpen(true);\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n    \r\n    \r\n\r\n    return ( \r\n            <Grid container style={{position: 'relative'}}> \r\n                <Modal \r\n                    open={open}  \r\n                    aria-labelledby=\"draggable-dialog-title\"\r\n                    onClose={handleClose} \r\n                >\r\n                    <DialogContent>\r\n                        <Draggable  handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'} >\r\n                        <div className={classes.menu}  >\r\n                            <Typography \r\n                                component='p' \r\n                                className={classes.menuTitle}\r\n                                id=\"draggable-dialog-title\"\r\n                            >\r\n                                Задать параграфу текст и стили <OpenWithIcon/>\r\n                            </Typography>\r\n                            <Box mb={3} >\r\n                                <TextField \r\n                                        type='text' \r\n                                        label=\"Text input\"\r\n                                        fullWidth\r\n                                        value={textInDumb}\r\n                                        multiline={true}\r\n                                        rowsMax={6}\r\n                                        variant=\"filled\"\r\n                                        onChange={(e) => { setIsDisableBtn(false); setTextInDumb(e.target.value) }}\r\n                                />    \r\n                            </Box>  \r\n\r\n                            \r\n                            {/* display */}\r\n                            <Box className={classes.inputGroup}>\r\n                                <FormGroup row>\r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.inputNumber}\r\n                                        fullWidth\r\n                                    >\r\n                                        <InputLabel id=\"display-style-label\">Display</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"display-style-label\"\r\n                                            id=\"display-style\"\r\n                                            value={display}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setDisplay(e.target.value) }}\r\n                                        >\r\n                                        <MenuItem value={'block'}>Block</MenuItem> \r\n                                        <MenuItem value={'inline-block'}>Inline-block</MenuItem> \r\n                                        <MenuItem value={'flex'}>Flex</MenuItem> \r\n                                        <MenuItem value={'inline-flex'}>Inline-flex</MenuItem> \r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </FormGroup>\r\n                            </Box>                           \r\n                           \r\n                            {/* margin */}\r\n                            <Box className={classes.inputGroup}>\r\n                                <Box display=\"flex\" flexDirection=\"row\"  > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Top\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.top}\r\n                                        onChange={ (e) => { handleMargin(e, 'top') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Bottom\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.bottom}\r\n                                        onChange={ (e) => { handleMargin(e, 'bottom') } }     \r\n                                    />\r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Left\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.left}\r\n                                        onChange={ (e) => { handleMargin(e, 'left') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Right\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.right}\r\n                                        onChange={ (e) => { handleMargin(e, 'right') } }     \r\n                                    />\r\n                                </Box>\r\n                            </Box>\r\n                            \r\n                            {/* padding */}\r\n                            <Box className={classes.inputGroup}>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Top\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.top}\r\n                                        onChange={ (e) => { handlePadding(e, 'top') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Bottom\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.bottom}\r\n                                        onChange={ (e) => { handlePadding(e, 'bottom') } }     \r\n                                    />\r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Left\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.left}\r\n                                        onChange={ (e) => { handlePadding(e, 'left') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Right\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.right}\r\n                                        onChange={ (e) => { handlePadding(e, 'right') } }     \r\n                                    />\r\n                                </Box>\r\n            \r\n                            </Box>\r\n                          \r\n                            {/* bg-color */}\r\n                            <Box className={classes.inputGroup} display=\"flex\" flexDirection=\"row\" > \r\n                                    <Box \r\n                                        className={classes.inputNumber}\r\n                                    >\r\n                                        <Typography  component={'h6'} gutterBottom  >\r\n                                            Background  \r\n                                        </Typography>\r\n                                        <TwitterPicker\r\n                                            width={'100%'}\r\n                                            triangle={'hide'}\r\n                                            color={backgroundColor}\r\n                                            colors={[ '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                            onChangeComplete={(newColor) => {\r\n                                                setIsDisableBtn(false);\r\n                                                setBackgroundColor(newColor.hex) \r\n                                            }}\r\n\r\n                                        /> \r\n                                    </Box> \r\n                                    <Box \r\n                                        className={classes.inputNumber}\r\n                                    >\r\n                                        <Typography  component={'h6'} gutterBottom  >\r\n                                            Color  \r\n                                        </Typography>\r\n                                        <TwitterPicker\r\n                                            width={'100%'}\r\n                                            triangle={'hide'}\r\n                                            colors={[ '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                            color={color}\r\n                                            onChangeComplete={(newColor) => {\r\n                                                setIsDisableBtn(false);\r\n                                                setColor(newColor.hex) \r\n                                            }}\r\n\r\n                                        /> \r\n                                    </Box>  \r\n                            </Box>\r\n                                                    \r\n                            {/* border */}\r\n                            <Box className={classes.inputGroup}> \r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='color'\r\n                                            label=\"Border Color\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={borderColor}\r\n                                            onChange={ (e) => { setIsDisableBtn(false);  setBorderColor(e.target.value)} }     \r\n                                    />\r\n                                    <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Border Radius\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={borderRadius}\r\n                                            onChange={ (e) => { setIsDisableBtn(false);  setBorderRadius(Number(e.target.value)) } }     \r\n                                    />\r\n\r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                        \r\n                                <TextField \r\n                                    className={classes.inputNumber}\r\n                                    type='number'\r\n                                    label=\"Border Width\" \r\n                                    variant=\"filled\" \r\n                                    size='small'  \r\n                                    value={borderWidth}\r\n                                    onChange={ (e) => { setIsDisableBtn(false);setBorderWidth(Number(e.target.value))} }     \r\n                                />\r\n                                <FormControl \r\n                                    variant='filled' \r\n                                    size='small'   \r\n                                    className={classes.inputNumber}\r\n                                >\r\n                                    <InputLabel id=\"border-style-label\">Border Style</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"border-style-label\"\r\n                                        id=\"border-style\"\r\n                                        value={borderStyle}\r\n                                        onChange={(e) => {setIsDisableBtn(false); setBorderStyle(e.target.value) }}\r\n                                    >\r\n                                    <MenuItem value={'solid'}>Solid</MenuItem>\r\n                                    <MenuItem value={'dotted'}>Dotted</MenuItem>\r\n                                    <MenuItem value={'dashed'}>Dashed</MenuItem>\r\n                                    <MenuItem value={'double'}>Double</MenuItem>\r\n                                    <MenuItem value={'groove'}>Groove</MenuItem>\r\n                                    <MenuItem value={'inset'}>Inset</MenuItem>\r\n                                    <MenuItem value={'outset'}>Outset</MenuItem>\r\n                                    <MenuItem value={'ridge'}>Ridge</MenuItem>\r\n                                    <MenuItem value={'none'}>None</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Box>\r\n                            </Box>\r\n                            \r\n                            {/* font */}\r\n                            <Box className={classes.inputGroup}> \r\n                                <Box display=\"flex\" flexDirection=\"row\" >  \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Font Size\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={fontSize}\r\n                                        onChange={ (e) => {setIsDisableBtn(false); setFontSize(Number(e.target.value))} }     \r\n                                    /> \r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.inputNumber}\r\n                                    >\r\n                                        <InputLabel id=\"weight-select-label\">Font Weight</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"weight-select-label\"\r\n                                            id=\"weight-select\"\r\n                                            value={fontWeight}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setFontWeight(Number(e.target.value)) }}\r\n                                        >\r\n                                        <MenuItem value={300}>Light</MenuItem>\r\n                                        <MenuItem value={400}>Regular</MenuItem>\r\n                                        <MenuItem value={700}>Bold</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                \r\n                                    \r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" >\r\n                                <TextField \r\n                                    className={classes.inputNumber}\r\n                                    type='number'\r\n                                    label=\"Line Height (em)\" \r\n                                    variant=\"filled\" \r\n                                    size='small'  \r\n                                    value={lineHeight}\r\n                                    onChange={ (e) => {setIsDisableBtn(false); setLineHeight(Number(e.target.value))} }     \r\n                                />\r\n                                <FormControl \r\n                                    variant='filled' \r\n                                    size='small'   \r\n                                    className={classes.inputNumber}\r\n                                >\r\n                                    <InputLabel id=\"align-select-label\">Text Align</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"align-select-label\"\r\n                                        id=\"align-select\"\r\n                                        value={textAlign}\r\n                                        onChange={(e) => {setIsDisableBtn(false); setTextAlign((e.target.value)) }}\r\n                                    >\r\n                                    <MenuItem value={'left'}>Left</MenuItem>\r\n                                    <MenuItem value={'center'}>Center</MenuItem>\r\n                                    <MenuItem value={'right'}>Right</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Box>\r\n                            </Box>\r\n                            \r\n                            <Box className={classes.btnSave}>\r\n                                <Button \r\n                                    disabled={isDisableBtn} \r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    size={'medium'} \r\n                                    onClick={saveData}\r\n                                >\r\n                                    Save\r\n                                </Button> \r\n                            </Box>\r\n                        \r\n                        </div>\r\n                    </Draggable>\r\n                    </DialogContent>\r\n                </Modal>\r\n                \r\n                <Grid item xs={12}  className={classes.dumbItemContainer }>  \r\n                        <div \r\n                            className={classes.dumbItem }\r\n                            onClick={handleInputFocus}\r\n                            aria-controls=\"simple-menu\" aria-haspopup=\"true\"  \r\n                        > \r\n                            <DumbComponent \r\n                                data={dataNew} \r\n                                className={myClassName}  \r\n                                prop={props.data.prop} \r\n                                textChildren={textInDumb} \r\n                            />\r\n                           \r\n                        </div>  \r\n                        <IconButton \r\n                            className={ classes.dumbItemDelete}\r\n                            size=\"small\"\r\n                            aria-label=\"delete\"\r\n                            onClick={removeItem}\r\n                        >\r\n                            <DeleteOutline/>\r\n                        </IconButton>\r\n \r\n                </Grid>\r\n            </Grid>\r\n           \r\n \r\n    )\r\n}\r\n\r\nexport default StyledComponent\r\n","import React from 'react' \r\n\r\nimport StyledComponent from \"./StyledComponent\"\r\nimport DumbComponent from \"./DumbComponent\"\r\n \r\nimport ModeContext from '../../../context/modeContext/ModeContext'\r\n \r\nfunction ElementCreator(props) {\r\n\r\n    const {modeDev} = React.useContext(ModeContext)   \r\n   \r\n    return (   \r\n        // !!data.classes &&\r\n        <React.Fragment>  \r\n            {\r\n                modeDev && \r\n                <StyledComponent  \r\n                    data={props.item} \r\n                    reSaveChildren={props.reSaveChildren}\r\n                    removeItem={props.removeItem}  \r\n                />\r\n            }\r\n \r\n            {\r\n                !modeDev && \r\n                <DumbComponent \r\n                    data={props.item} \r\n                    className={props.item.classes} \r\n                    prop={props.item.prop} \r\n                    textChildren={props.item.text} \r\n                />\r\n            } \r\n        </React.Fragment> \r\n    )\r\n}\r\n\r\nexport default ElementCreator\r\n","import React from 'react'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Typography, Tooltip } from '@material-ui/core';  \r\n\r\nfunction DumbComponent(props) {\r\n  \r\n    const useStyles = makeStyles((theme) => ({\r\n        myClassName: props.className , \r\n        imageStyle: props.imageClassName ? props.imageClassName : {}\r\n      })); \r\n    const classes = useStyles();\r\n \r\n    const title = props.data.image.title ? props.data.image.title : ''\r\n \r\n    return (\r\n        <React.Fragment>\r\n            \r\n            <Typography component={props.data.variant} className={classes.myClassName} >\r\n                {\r\n                    props.imageUrl &&\r\n                    <Tooltip title={title} placement={props.data.image.placement}>\r\n                         <img src={props.imageUrl} className={classes.imageStyle} alt={title} /> \r\n                    </Tooltip> \r\n                } \r\n                \r\n               <span style={{ display: 'inherit' }}>\r\n                { \r\n                    props.textChildren\r\n                } \r\n               </span>\r\n            </Typography> \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default DumbComponent\r\n","import React from 'react' \r\n \r\nimport { makeStyles } from '@material-ui/core/styles'; \r\nimport { Tooltip } from '@material-ui/core';\r\n\r\nfunction DumbComponent(props) {\r\n  \r\n    const useStyles = makeStyles(() => ({ \r\n        imageStyle: props.image.classes\r\n      }));\r\n    const classes = useStyles(); \r\n\r\n    const titleImg = props.image.title ? props.image.title : '' \r\n \r\n    return ( \r\n        <Tooltip title={titleImg} placement={props.image.placement}>\r\n            <img \r\n                src={props.imageUrl} \r\n                className={classes.imageStyle}   \r\n                alt={titleImg}\r\n            />  \r\n        </Tooltip>  \r\n    )\r\n}\r\n\r\nexport default DumbComponent\r\n","import React from 'react'  \r\n\r\nimport firebase from '../../../firebase/firebase'\r\nimport LoadingContext from '../../../context/loadingContext/LoadingContext' \r\n\r\nimport Draggable from 'react-draggable';\r\nimport { TwitterPicker } from 'react-color';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { \r\n    FormGroup, \r\n    Grid, \r\n    TextField, \r\n    Button, \r\n    FormControl,\r\n    InputLabel,\r\n    Select, \r\n    MenuItem,  \r\n    IconButton, \r\n    Typography,\r\n    Modal,\r\n    Box,\r\n    Accordion,\r\n    AccordionSummary,\r\n    DialogContent, \r\n\r\n} from '@material-ui/core'\r\n\r\nimport DumbComponent from \"./DumbComponent\" \r\nimport DumbImage from '../image/DumbComponent' \r\n\r\nimport OpenWithIcon from '@material-ui/icons/OpenWith';\r\nimport DeleteOutline  from '@material-ui/icons/DeleteOutline'; \r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\nconst StyledComponent = (props) => {  \r\n    const { setIsLoading } = React.useContext(LoadingContext)\r\n \r\n    const [padding, setPadding] = React.useState({ \r\n        top:  props.data.classes.paddingTop || 0, \r\n        left:  props.data.classes.paddingLeft || 0,\r\n        bottom: props.data.classes.paddingBottom || 0,\r\n        right: props.data.classes.paddingRight || 0\r\n    })\r\n    const [margin, setMargin] = React.useState({\r\n        top:  props.data.classes.marginTop || 0,\r\n        left:  props.data.classes.marginLeft || 0,\r\n        bottom: props.data.classes.marginBottom || 0, \r\n        right: props.data.classes.marginRight  || 0\r\n    })\r\n    \r\n    const [image, setImage] = React.useState(props.data.image || {})\r\n    const [imageUrl, setImageUrl] = React.useState(props.data.image.url || '')\r\n    const [imageTitle, setImageTitle] = React.useState(props.data.image.title || '')\r\n    const [imagePlacement, setImagePlacement] = React.useState(props.data.image.imagePlacement || 'top')\r\n    \r\n    const [color, setColor] = React.useState(props.data.classes.color || 'inherit')\r\n    const [backgroundColor, setBackgroundColor] = React.useState(props.data.classes.backgroundColor ||  'transperent')\r\n\r\n    const [borderColor, setBorderColor] = React.useState(props.data.classes.borderColor ||  'transperent')\r\n    const [borderStyle, setBorderStyle] = React.useState(props.data.classes.borderStyle ||  'solid')\r\n    const [borderWidth, setBorderWidth] = React.useState(props.data.classes.borderWidth ||  '0px')\r\n    const [borderRadius, setBorderRadius] = React.useState(props.data.classes.borderRadius ||  '0px')\r\n\r\n    const [textAlign, setTextAlign] = React.useState(props.data.classes.textAlign ||  'left')\r\n    const [display, setDisplay] = React.useState(props.data.classes.display ||  'block')\r\n    const [fontSize, setFontSize] = React.useState(props.data.classes.fontSize ||  16)\r\n    const [fontWeight, setFontWeight] = React.useState(props.data.classes.fontWeight ||  400)\r\n    const [lineHeight, setLineHeight] = React.useState(props.data.classes.lineHeight ||  1.38)\r\n\r\n\r\n    const [imageWidth, setImageWidth] = React.useState(props.data.image.classes.width || 100)\r\n    const [imageHeight, setImageHeight] = React.useState(props.data.image.classes.height || 100)\r\n    const [imageBorderColor, setImageBorderColor] = React.useState(props.data.image.classes.borderColor ||  'transperent')\r\n    const [imageBorderStyle, setImageBorderStyle] = React.useState(props.data.image.classes.borderStyle ||  'solid')\r\n    const [imageBorderWidth, setImageBorderWidth] = React.useState(props.data.image.classes.borderWidth ||  '0px')\r\n    const [imageBorderRadius, setImageBorderRadius] = React.useState(props.data.image.classes.borderRadius ||  '0px')\r\n    const [imageFloat, setImageFloat] = React.useState(props.data.image.classes.float || 'none')\r\n    const [imageMargin, setImageMargin] = React.useState({\r\n        top:  props.data.image.classes.marginTop || 0, \r\n        left:  props.data.image.classes.marginLeft || 0,\r\n        bottom: props.data.image.classes.marginBottom || 0, \r\n        right: props.data.image.classes.marginRight  || 0\r\n    })\r\n    const [textInDumb, setTextInDumb] = React.useState(props.data.text)\r\n    const [isDisableBtn, setIsDisableBtn] = React.useState(true) \r\n\r\n\r\n    \r\n    const [open, setOpen] = React.useState(false);\r\n         \r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n     \r\n        inputNumber: {\r\n            flexGrow: 1, \r\n            margin: 5, \r\n            width: \"100%\"\r\n        }, \r\n        inputGroup: {\r\n            border: \"1px solid #f5f5f5\", \r\n            padding: 3, \r\n            inputNumber: { \r\n                maxWidth: \"100%\"\r\n\r\n            }\r\n        },\r\n        btnSave: { \r\n            position: 'sticky', \r\n            zIndex: theme.zIndex.tooltip,\r\n            bottom: 0, \r\n            left: 0, \r\n            right: 0,\r\n            height: 80, \r\n            marginTop: 10, \r\n            backgroundColor: '#fff', \r\n            \r\n            '&>button': {\r\n                marginTop: 20, \r\n                marginBottom: 30, \r\n                marginLeft: 5, \r\n                opacity: 1,  \r\n                paddingLeft: 40, \r\n                paddingRight: 40\r\n            }\r\n        },\r\n        dumbItemContainer: { \r\n            position: 'relative', \r\n            outline: '1px solid #f000',\r\n            transition: `${theme.transitions.duration.shorter}ms ${theme.transitions.easing.easeIn} outline`,\r\n            '&:hover' : {   \r\n                boxShadow: theme.shadows[10], \r\n                cursor: 'pointer',\r\n                outlineColor: `${theme.palette.error.light}`,\r\n                '&>button' : { \r\n                    opacity: 1\r\n                }, \r\n            }, \r\n        }, \r\n        dumbItem: { \r\n            position: 'relative',\r\n            transition: \"300ms cubic-bezier(0.4, 0, 1, 1)\", \r\n        }, \r\n        dumbItemDelete : { \r\n            opacity: 0,\r\n            position: 'absolute', \r\n            zIndex: 9, \r\n            top: 3, \r\n            right: 5,\r\n            backgroundColor: '#fff',\r\n            transition: \"100ms cubic-bezier(0.4, 0, 1, 1)\",\r\n            '&:hover' : { \r\n                backgroundColor: theme.palette.error.light\r\n            }\r\n        },  \r\n        menu: {    \r\n            position: \"absolute\", \r\n            left: \"calc(50% - 200px)\",\r\n            top: 50, \r\n            backgroundColor: '#fff',\r\n            padding: 10 , \r\n            paddingBottom: 0, \r\n            maxWidth: 400,  \r\n            width: 400, \r\n            maxHeight: 'calc(100vh - 100px)', \r\n            minHeight: 500,\r\n            overflowY: 'scroll'\r\n        },\r\n        menuTitle: {\r\n            display: 'flex', \r\n            alignItems: 'center', \r\n            justifyContent: 'space-between', \r\n            fontSize: 14, \r\n            borderBottom: '1px solid #eaeaea',\r\n            paddingBottom: 6,\r\n            marginBottom: 10, \r\n            cursor: 'move'\r\n        },\r\n        imageAccordion: { \r\n            marginBottom: 10,  \r\n        },\r\n        imagePreview: {\r\n            position: 'relative', \r\n            width: 105, \r\n            height: 105, \r\n            border: `1px solid ${theme.palette.primary.light}`, \r\n            '&>img' : {  \r\n                position: 'absolute',\r\n                top: 0, \r\n                bottom: 0, \r\n                left: 0, \r\n                right: 0, \r\n                margin: 0, \r\n                width: \"100%\", \r\n                maxWidth: \"100%\", \r\n                height: \"100%\", \r\n                maxHeight: \"100%\", \r\n            }, \r\n            '&>button' : {\r\n                position: 'absolute',\r\n                zIndex: 10, \r\n                top: 0, \r\n                bottom: 0, \r\n                left: 0, \r\n                right: 0, \r\n                width: \"100%\", \r\n                maxWidth: \"100%\", \r\n                height: \"100%\", \r\n                maxHeight: \"100%\", \r\n                backgroundColor: \"#0027ff70\", \r\n                borderRadius: 0, \r\n                transition: \"200ms cubic-bezier(0.4, 0, 1, 1)\",\r\n                \"&:hover\": {\r\n                    opacity: 0\r\n                } \r\n            }, \r\n        },\r\n        imageLabel: {\r\n            position: 'absolute',\r\n            zIndex: 10, \r\n            top: 0, \r\n            bottom: 0, \r\n            left: 0, \r\n            right: 0, \r\n            width: \"100%\", \r\n            maxWidth: \"100%\", \r\n            height: \"100%\", \r\n            maxHeight: \"100%\", \r\n            cursor: 'pointer'\r\n        }\r\n      }));\r\n    \r\n    const myClassName = { \r\n        display: display,\r\n        paddingTop: padding.top,\r\n        paddingBottom: padding.bottom,\r\n        paddingLeft: padding.left,\r\n        paddingRight: padding.right,\r\n        marginTop: margin.top,\r\n        marginBottom: margin.bottom,\r\n        marginLeft: margin.left,\r\n        marginRight: margin.right,\r\n        color: color,\r\n        backgroundColor: backgroundColor,\r\n        textAlign: textAlign,\r\n        fontSize: fontSize,\r\n        fontWeight: fontWeight, \r\n        lineHeight: lineHeight,\r\n        borderColor: borderColor,\r\n        borderStyle: borderStyle,\r\n        borderRadius: borderRadius,\r\n        borderWidth: borderWidth\r\n    } \r\n\r\n    const imageClassName = { \r\n        marginTop: imageMargin.top,\r\n        marginBottom: imageMargin.bottom,\r\n        marginLeft: imageMargin.left,\r\n        marginRight: imageMargin.right,\r\n        width: imageWidth, \r\n        height: imageHeight,\r\n        borderWidth: imageBorderWidth, \r\n        borderRadius: imageBorderRadius, \r\n        borderColor: imageBorderColor, \r\n        borderStyle: imageBorderStyle,\r\n        float : imageFloat\r\n    }\r\n    \r\n    const classes = useStyles();\r\n\r\n    //const dataNew - props for Dumb Component\r\n    const dataNew = {...props.data, ...{\r\n        classes: myClassName,\r\n    }} \r\n \r\n    const handlePadding = (e, direction) => {  \r\n        let newPadding = Object.assign({}, padding)\r\n        newPadding[direction] = Number(e.target.value)\r\n        setPadding(newPadding)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n    const handleMargin = (e, direction) => {  \r\n        let newMargin = Object.assign({}, margin)\r\n        newMargin[direction] = Number(e.target.value)\r\n        setMargin(newMargin)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n    const handleImageMargin = (e, direction) => {  \r\n        let newMargin = Object.assign({}, imageMargin)\r\n        newMargin[direction] = Number(e.target.value)\r\n        setImageMargin(newMargin)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n\r\n    const saveData = () => {   \r\n        const sentData = Object.assign({}, props.data)\r\n\r\n        sentData.classes = myClassName\r\n        sentData.image = Object.assign(image, {\r\n            title: imageTitle, \r\n            placement: imagePlacement,\r\n            classes: imageClassName, \r\n            url: imageUrl\r\n        })\r\n        sentData.text = textInDumb\r\n\r\n        props.reSaveChildren(props.data.id, sentData)\r\n        setIsDisableBtn(true); \r\n    }\r\n    const removeItem = () => {  \r\n        props.removeItem(props.data.id)\r\n    };\r\n    \r\n    const handleInputFocus = () => {  \r\n        setOpen(true);\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n    const handleImageSetting = (event) => {    \r\n        uploadHandler(event.target.files[0])\r\n        setIsDisableBtn(false)\r\n        setIsLoading(true)\r\n    }\r\n    \r\n    const uploadHandler = (imageData) => { \r\n        const storageRef = firebase.storage.ref(`${imageData.name}`).put(imageData)\r\n        storageRef.on('state-changed', \r\n          snapshot => {\r\n            console.log( snapshot )\r\n          }, \r\n          error => {\r\n            console.log(error.message)\r\n          },\r\n          () => {\r\n            setIsLoading(false)\r\n            storageRef.snapshot.ref.getDownloadURL()\r\n              .then( url => {\r\n                setImageUrl(url) \r\n              })\r\n          }\r\n        )\r\n      }\r\n    \r\n\r\n    return ( \r\n            <Grid container style={{position: 'relative'}}> \r\n                <Modal \r\n                    open={open}  \r\n                    aria-labelledby=\"draggable-dialog-title\"\r\n                    onClose={handleClose} \r\n                >\r\n                    <DialogContent>\r\n                        <Draggable  handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'} >\r\n                        <div className={classes.menu}  >\r\n                            <Typography \r\n                                component='p' \r\n                                className={classes.menuTitle}\r\n                                id=\"draggable-dialog-title\"\r\n                            >\r\n                                Задать параграфу текст, стили и картинки <OpenWithIcon/>\r\n                            </Typography>\r\n                            <Box mb={3} >\r\n                                <TextField \r\n                                        type='text' \r\n                                        label=\"Text input\"\r\n                                        fullWidth\r\n                                        value={textInDumb}\r\n                                        multiline={true}\r\n                                        rowsMax={6}\r\n                                        variant=\"filled\"\r\n                                        onChange={(e) => { setIsDisableBtn(false); setTextInDumb(e.target.value) }}\r\n                                />    \r\n                            </Box>  \r\n \r\n                            <Accordion className={classes.imageAccordion}  >\r\n                                <AccordionSummary\r\n                                    expandIcon={<ExpandMoreIcon />}\r\n                                    aria-controls=\"image-settings-content\"\r\n                                    id=\"panel1a-header\" \r\n                                >\r\n                                    <Typography >Image Settings</Typography>\r\n                                </AccordionSummary>\r\n                                <Box px={2} pt={1} pb={2}>\r\n                                    <Grid container >\r\n                                        <Grid item xs={4} className={classes.imagePreview}>\r\n                                            <Button> \r\n                                                <ImageIcon color=\"action\" />\r\n\r\n                                                <label htmlFor='image-input-label' className={classes.imageLabel}></label>\r\n                                                <input \r\n                                                    id=\"image-input-label\"\r\n                                                    type=\"file\" \r\n                                                    onChange={handleImageSetting} \r\n                                                    style={{ display: \"none\" }}\r\n                                                />\r\n                                            </Button>\r\n                                            <DumbImage\r\n                                                imageUrl={imageUrl}\r\n                                                image={dataNew.image}   \r\n                                            /> \r\n                                        </Grid>\r\n                                        <Grid item xs={8}> \r\n                                            <Box ml={1}>\r\n                                                <TextField  \r\n                                                    type='text'\r\n                                                    label=\"Image title\" \r\n                                                    variant=\"filled\" \r\n                                                    size='small'  \r\n                                                    value={imageTitle}\r\n                                                    fullWidth\r\n                                                    onChange={ (e) => {setIsDisableBtn(false);  setImageTitle(e.target.value) } }     \r\n                                                />\r\n                                                <Box mt={1}>\r\n                                                    <FormControl \r\n                                                        variant='filled' \r\n                                                        size='small'    \r\n                                                        fullWidth\r\n                                                    >\r\n                                                        <InputLabel id=\"image-placement-label\">Title placement</InputLabel>\r\n                                                        <Select\r\n                                                            labelId=\"image-placement-label\"\r\n                                                            id=\"image-placement\"\r\n                                                            value={imagePlacement}\r\n                                                            onChange={(e) => {setIsDisableBtn(false); setImagePlacement(e.target.value) }}\r\n                                                        >\r\n                                                            <MenuItem value={'top-start'}>Top Start</MenuItem>\r\n                                                            <MenuItem value={'top'}>Top</MenuItem>\r\n                                                            <MenuItem value={'top-end'}>Top End</MenuItem>\r\n                                                            <MenuItem value={'left-start'}>Left Start</MenuItem>\r\n                                                            <MenuItem value={'left'}>Left</MenuItem>\r\n                                                            <MenuItem value={'left-end'}>Left End</MenuItem>\r\n                                                            <MenuItem value={'right-start'}>Right Start</MenuItem>\r\n                                                            <MenuItem value={'right'}>Right</MenuItem>\r\n                                                            <MenuItem value={'right-end'}>Right End</MenuItem>\r\n                                                            <MenuItem value={'bottom-start'}>Bottom Start</MenuItem>\r\n                                                            <MenuItem value={'bottom'}>Bottom</MenuItem>\r\n                                                            <MenuItem value={'bottom-end'}>Bottom End</MenuItem>\r\n\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                </Box>\r\n                                                    \r\n                                            </Box> \r\n                                        </Grid>\r\n                                    </Grid>  \r\n                                </Box>\r\n                                \r\n                                 {/* float */}\r\n                                <Box className={classes.inputGroup}>\r\n                                    <FormGroup row>\r\n                                        <FormControl \r\n                                            variant='filled' \r\n                                            size='small'   \r\n                                            className={classes.inputNumber}\r\n                                            fullWidth\r\n                                        >\r\n                                            <InputLabel id=\"display-style-label\">Float</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"display-style-label\"\r\n                                                id=\"display-style\"\r\n                                                value={imageFloat}\r\n                                                onChange={(e) => {setIsDisableBtn(false); setImageFloat(e.target.value) }}\r\n                                            >\r\n                                            <MenuItem value={'left'}>Left</MenuItem> \r\n                                            <MenuItem value={'right'}>Right</MenuItem> \r\n                                            <MenuItem value={'none'}>None</MenuItem>  \r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </FormGroup>\r\n                                </Box>                           \r\n                           \r\n                                {/* margin */}\r\n                                <Box className={classes.inputGroup}>\r\n                                    <Box display=\"flex\" flexDirection=\"row\"  > \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Image Margin Top\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={imageMargin.top}\r\n                                            onChange={ (e) => { setIsDisableBtn(false); handleImageMargin(e, 'top') } }     \r\n                                        />\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Margin Bottom\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={imageMargin.bottom}\r\n                                            onChange={ (e) => { setIsDisableBtn(false); handleImageMargin(e, 'bottom') } }     \r\n                                        />\r\n                                    </Box>\r\n                                    <Box display=\"flex\" flexDirection=\"row\" > \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Margin Left\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={imageMargin.left}\r\n                                            onChange={ (e) => { setIsDisableBtn(false); handleImageMargin(e, 'left') } }     \r\n                                        />\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Margin Right\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={imageMargin.right}\r\n                                            onChange={ (e) => { setIsDisableBtn(false);handleImageMargin(e, 'right') } }     \r\n                                        />\r\n                                    </Box>\r\n                                </Box>\r\n\r\n                                {/* width height*/}\r\n                                <Box className={classes.inputGroup}>\r\n                                    <Box display=\"flex\" flexDirection=\"row\"  > \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Image Width\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={imageWidth}\r\n                                            onChange={ (e) => { setIsDisableBtn(false); setImageWidth(Number(e.target.value)) } }     \r\n                                        />\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Image Height\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={imageHeight}\r\n                                            onChange={ (e) => {setIsDisableBtn(false); setImageHeight(Number(e.target.value)) } }     \r\n                                        />\r\n                                    </Box>\r\n                                </Box>\r\n                                \r\n                                {/* border */}\r\n                                <Box className={classes.inputGroup}> \r\n                                    <Box display=\"flex\" flexDirection=\"row\" > \r\n                                        <TextField \r\n                                                className={classes.inputNumber}\r\n                                                type='color'\r\n                                                label=\"Border Color\" \r\n                                                variant=\"filled\" \r\n                                                size='small'  \r\n                                                value={imageBorderColor}\r\n                                                onChange={ (e) => { setIsDisableBtn(false);  setImageBorderColor(e.target.value)} }     \r\n                                        />\r\n                                        <TextField \r\n                                                className={classes.inputNumber}\r\n                                                type='number'\r\n                                                label=\"Border Radius\" \r\n                                                variant=\"filled\" \r\n                                                size='small'  \r\n                                                value={imageBorderRadius}\r\n                                                onChange={ (e) => { setIsDisableBtn(false);  setImageBorderRadius(Number(e.target.value)) } }     \r\n                                        />\r\n\r\n                                    </Box>\r\n                                    <Box display=\"flex\" flexDirection=\"row\" > \r\n                            \r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Border Width\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={imageBorderWidth}\r\n                                            onChange={ (e) => { setIsDisableBtn(false); setImageBorderWidth(Number(e.target.value))} }     \r\n                                        />\r\n                                        <FormControl \r\n                                            variant='filled' \r\n                                            size='small'   \r\n                                            className={classes.inputNumber}\r\n                                        >\r\n                                            <InputLabel id=\"image-border-style-label\">Border Style</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"image-border-style-label\"\r\n                                                id=\"image-border-style\"\r\n                                                value={imageBorderStyle}\r\n                                                onChange={(e) => {setIsDisableBtn(false); setImageBorderStyle(e.target.value) }}\r\n                                            >\r\n                                            <MenuItem value={'solid'}>Solid</MenuItem>\r\n                                            <MenuItem value={'dotted'}>Dotted</MenuItem>\r\n                                            <MenuItem value={'dashed'}>Dashed</MenuItem>\r\n                                            <MenuItem value={'double'}>Double</MenuItem>\r\n                                            <MenuItem value={'groove'}>Groove</MenuItem>\r\n                                            <MenuItem value={'inset'}>Inset</MenuItem>\r\n                                            <MenuItem value={'outset'}>Outset</MenuItem>\r\n                                            <MenuItem value={'ridge'}>Ridge</MenuItem>\r\n                                            <MenuItem value={'none'}>None</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Box>\r\n                                </Box>\r\n                            </Accordion>\r\n\r\n                            <Accordion>\r\n                                <AccordionSummary\r\n                                    expandIcon={<ExpandMoreIcon />}\r\n                                    aria-controls=\"paragraph-settings-content\"\r\n                                    id=\"panel2a-header\" \r\n                                >\r\n                                    <Typography >Paragraph Settings</Typography>\r\n                                </AccordionSummary>\r\n                            \r\n                            {/* display */}\r\n                            <Box className={classes.inputGroup}>\r\n                                <FormGroup row>\r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.inputNumber}\r\n                                        fullWidth\r\n                                    >\r\n                                        <InputLabel id=\"display-style-label\">Display</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"display-style-label\"\r\n                                            id=\"display-style\"\r\n                                            value={display}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setDisplay(e.target.value) }}\r\n                                        >\r\n                                        <MenuItem value={'block'}>Block</MenuItem> \r\n                                        <MenuItem value={'inline-block'}>Inline-block</MenuItem> \r\n                                        <MenuItem value={'flex'}>Flex</MenuItem> \r\n                                        <MenuItem value={'inline-flex'}>Inline-flex</MenuItem> \r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </FormGroup>\r\n                            </Box>                           \r\n                           \r\n                            {/* margin */}\r\n                            <Box className={classes.inputGroup}>\r\n                                <Box display=\"flex\" flexDirection=\"row\"  > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Top\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.top}\r\n                                        onChange={ (e) => { handleMargin(e, 'top') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Bottom\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.bottom}\r\n                                        onChange={ (e) => { handleMargin(e, 'bottom') } }     \r\n                                    />\r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Left\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.left}\r\n                                        onChange={ (e) => { handleMargin(e, 'left') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Margin Right\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={margin.right}\r\n                                        onChange={ (e) => { handleMargin(e, 'right') } }     \r\n                                    />\r\n                                </Box>\r\n                            </Box>\r\n                            \r\n                            {/* padding */}\r\n                            <Box className={classes.inputGroup}>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Top\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.top}\r\n                                        onChange={ (e) => { handlePadding(e, 'top') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Bottom\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.bottom}\r\n                                        onChange={ (e) => { handlePadding(e, 'bottom') } }     \r\n                                    />\r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Left\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.left}\r\n                                        onChange={ (e) => { handlePadding(e, 'left') } }     \r\n                                    />\r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Padding Right\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={padding.right}\r\n                                        onChange={ (e) => { handlePadding(e, 'right') } }     \r\n                                    />\r\n                                </Box>\r\n            \r\n                            </Box>\r\n                          \r\n                            {/* bg-color */}\r\n                            <Box className={classes.inputGroup} display=\"flex\" flexDirection=\"row\" > \r\n                                <Box \r\n                                    className={classes.inputNumber}\r\n                                >\r\n                                    <Typography  component={'h6'} gutterBottom  >\r\n                                        Background  \r\n                                    </Typography>\r\n                                    <TwitterPicker\r\n                                        width={'100%'}\r\n                                        triangle={'hide'}\r\n                                        color={backgroundColor}\r\n                                        colors={[ '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                        onChangeComplete={(newColor) => {\r\n                                            setIsDisableBtn(false);\r\n                                            setBackgroundColor(newColor.hex) \r\n                                        }}\r\n\r\n                                    /> \r\n                                </Box> \r\n                                <Box \r\n                                    className={classes.inputNumber}\r\n                                >\r\n                                    <Typography  component={'h6'} gutterBottom  >\r\n                                        Color  \r\n                                    </Typography>\r\n                                    <TwitterPicker\r\n                                        width={'100%'}\r\n                                        triangle={'hide'}\r\n                                        colors={[ '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                        color={color}\r\n                                        onChangeComplete={(newColor) => {\r\n                                            setIsDisableBtn(false);\r\n                                            setColor(newColor.hex) \r\n                                        }}\r\n\r\n                                    /> \r\n                                </Box>  \r\n                            </Box>\r\n                                                    \r\n                            {/* border */}\r\n                            <Box className={classes.inputGroup}> \r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                                    <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='color'\r\n                                            label=\"Border Color\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={borderColor}\r\n                                            onChange={ (e) => { setIsDisableBtn(false);  setBorderColor(e.target.value)} }     \r\n                                    />\r\n                                    <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Border Radius\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={borderRadius}\r\n                                            onChange={ (e) => { setIsDisableBtn(false);  setBorderRadius(Number(e.target.value)) } }     \r\n                                    />\r\n\r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" > \r\n                        \r\n                                <TextField \r\n                                    className={classes.inputNumber}\r\n                                    type='number'\r\n                                    label=\"Border Width\" \r\n                                    variant=\"filled\" \r\n                                    size='small'  \r\n                                    value={borderWidth}\r\n                                    onChange={ (e) => { setIsDisableBtn(false);setBorderWidth(Number(e.target.value))} }     \r\n                                />\r\n                                <FormControl \r\n                                    variant='filled' \r\n                                    size='small'   \r\n                                    className={classes.inputNumber}\r\n                                >\r\n                                    <InputLabel id=\"border-style-label\">Border Style</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"border-style-label\"\r\n                                        id=\"border-style\"\r\n                                        value={borderStyle}\r\n                                        onChange={(e) => {setIsDisableBtn(false); setBorderStyle(e.target.value) }}\r\n                                    >\r\n                                    <MenuItem value={'solid'}>Solid</MenuItem>\r\n                                    <MenuItem value={'dotted'}>Dotted</MenuItem>\r\n                                    <MenuItem value={'dashed'}>Dashed</MenuItem>\r\n                                    <MenuItem value={'double'}>Double</MenuItem>\r\n                                    <MenuItem value={'groove'}>Groove</MenuItem>\r\n                                    <MenuItem value={'inset'}>Inset</MenuItem>\r\n                                    <MenuItem value={'outset'}>Outset</MenuItem>\r\n                                    <MenuItem value={'ridge'}>Ridge</MenuItem>\r\n                                    <MenuItem value={'none'}>None</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Box>\r\n                            </Box>\r\n\r\n                            {/* font */}\r\n                            <Box className={classes.inputGroup}> \r\n                                <Box display=\"flex\" flexDirection=\"row\" >  \r\n                                    <TextField \r\n                                        className={classes.inputNumber}\r\n                                        type='number'\r\n                                        label=\"Font Size\" \r\n                                        variant=\"filled\" \r\n                                        size='small'  \r\n                                        value={fontSize}\r\n                                        onChange={ (e) => {setIsDisableBtn(false); setFontSize(Number(e.target.value))} }     \r\n                                    /> \r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.inputNumber}\r\n                                    >\r\n                                        <InputLabel id=\"weight-select-label\">Font Weight</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"weight-select-label\"\r\n                                            id=\"weight-select\"\r\n                                            value={fontWeight}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setFontWeight(Number(e.target.value)) }}\r\n                                        >\r\n                                        <MenuItem value={300}>Light</MenuItem>\r\n                                        <MenuItem value={400}>Regular</MenuItem>\r\n                                        <MenuItem value={700}>Bold</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                \r\n                                    \r\n                                </Box>\r\n                                <Box display=\"flex\" flexDirection=\"row\" >\r\n                                <TextField \r\n                                    className={classes.inputNumber}\r\n                                    type='number'\r\n                                    label=\"Line Height (em)\" \r\n                                    variant=\"filled\" \r\n                                    size='small'  \r\n                                    value={lineHeight}\r\n                                    onChange={ (e) => {setIsDisableBtn(false); setLineHeight(Number(e.target.value))} }     \r\n                                />\r\n                                <FormControl \r\n                                    variant='filled' \r\n                                    size='small'   \r\n                                    className={classes.inputNumber}\r\n                                >\r\n                                    <InputLabel id=\"align-select-label\">Text Align</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"align-select-label\"\r\n                                        id=\"align-select\"\r\n                                        value={textAlign}\r\n                                        onChange={(e) => {setIsDisableBtn(false); setTextAlign((e.target.value)) }}\r\n                                    >\r\n                                    <MenuItem value={'left'}>Left</MenuItem>\r\n                                    <MenuItem value={'center'}>Center</MenuItem>\r\n                                    <MenuItem value={'right'}>Right</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Box>\r\n                            </Box>\r\n\r\n                           \r\n                            </Accordion>   \r\n                            <Box className={classes.btnSave}>\r\n                                <Button \r\n                                    disabled={isDisableBtn} \r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    size={'medium'} \r\n                                    onClick={saveData}\r\n                                >\r\n                                    Save\r\n                                </Button>  \r\n                            </Box>                \r\n                        </div>\r\n                    </Draggable>\r\n                    </DialogContent>\r\n                </Modal>\r\n                \r\n                <Grid item xs={12}  className={classes.dumbItemContainer }>  \r\n                 \r\n                      \r\n                        <div \r\n                            className={classes.dumbItem }\r\n                            onClick={handleInputFocus}\r\n                            aria-controls=\"simple-menu\" aria-haspopup=\"true\"  \r\n                        > \r\n                            <DumbComponent \r\n                                data={dataNew} \r\n                                className={myClassName}  \r\n                                imageClassName={imageClassName}\r\n                                imageUrl={imageUrl}\r\n                                prop={props.data.prop} \r\n                                textChildren={textInDumb} \r\n                            />\r\n                           \r\n                        </div>  \r\n                        <IconButton \r\n                            className={ classes.dumbItemDelete}\r\n                            size=\"small\"\r\n                            aria-label=\"delete\"\r\n                            onClick={removeItem}\r\n                        >\r\n                            <DeleteOutline/>\r\n                        </IconButton>\r\n \r\n                </Grid>\r\n            </Grid>\r\n           \r\n \r\n    )\r\n}\r\n\r\nexport default StyledComponent\r\n","import React from 'react' \r\n\r\nimport StyledComponent from \"./StyledComponent\"\r\nimport DumbComponent from \"./DumbComponent\"\r\n \r\nimport ModeContext from '../../../context/modeContext/ModeContext'\r\n \r\nfunction ElementCreator(props) {\r\n\r\n    const {modeDev} = React.useContext(ModeContext)   \r\n    // const modeDev = false   \r\n    \r\n    return (   \r\n        // !!data.classes && \r\n        <React.Fragment>  \r\n            {\r\n                modeDev && \r\n                <StyledComponent  \r\n                    data={props.item} \r\n                    reSaveChildren={props.reSaveChildren}\r\n                    removeItem={props.removeItem}  \r\n                />\r\n            }\r\n \r\n            {\r\n                !modeDev && \r\n                <DumbComponent \r\n                    data={props.item} \r\n                    className={props.item.classes} \r\n                    imageClassName={props.item.image.classes}\r\n                    imageUrl={props.item.image.url}\r\n                    prop={props.item.prop} \r\n                    textChildren={props.item.text} \r\n                />\r\n            } \r\n        </React.Fragment> \r\n    )\r\n}\r\n\r\nexport default ElementCreator\r\n","import React from 'react'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container } from '@material-ui/core';\r\n\r\nimport ModeContext from '../../../context/modeContext/ModeContext'\r\n\r\n\r\nimport HeadingCreator from '../heading/ElementCreator'\r\nimport ParagraphCreator from '../paragraph/ElementCreator'\r\nimport ParagraphImageCreator from '../paragraphImage/ElementCreator'\r\n\r\nfunction DumbComponent(props) {\r\n \r\n    const {modeDev} = React.useContext(ModeContext)\r\n  \r\n    const useStyles = makeStyles((theme) => ({\r\n        myClassName: props.classes ,  \r\n      }));\r\n    const classes = useStyles(); \r\n  \r\n \r\n    return (\r\n        <React.Fragment>\r\n            <Container  \r\n                maxWidth={props.settings.maxWidth} \r\n                fixed={props.settings.fixed} \r\n                disableGutters={props.settings.disableGutters} \r\n                className={classes.myClassName}\r\n            > \r\n                {  \r\n                    props.settings.innerContainer && \r\n                    <Container\r\n                        maxWidth={'lg'}\r\n                        fixed={props.settings.fixed} \r\n                        disableGutters={props.settings.disableGutters} \r\n                    >\r\n                        { \r\n                            modeDev && \r\n                            props.data.children.map((item) => {   \r\n                                switch(item.type) { \r\n                                    case 'heading' :  \r\n                                        return ( \r\n                                            <HeadingCreator \r\n                                                key={item.id} \r\n                                                item={item}\r\n                                                reSaveChildren={props.reSaveChildren}\r\n                                                removeItem={props.removeItem}\r\n                                            />\r\n                                        ) \r\n                                    case 'paragraph' :  \r\n                                        return (\r\n                                            <ParagraphCreator\r\n                                                key={item.id} \r\n                                                item={item}\r\n                                                reSaveChildren={props.reSaveChildren}\r\n                                                removeItem={props.removeItem}\r\n                                            />\r\n                                        ) \r\n                                    case 'paragraphImage' :  \r\n                                        return (\r\n                                            <ParagraphImageCreator\r\n                                                key={item.id} \r\n                                                item={item}\r\n                                                reSaveChildren={props.reSaveChildren}\r\n                                                removeItem={props.removeItem}\r\n                                            />\r\n                                        ) \r\n                                    default: break;\r\n                                }  \r\n                                return null\r\n                            })\r\n                        }\r\n                        {   !modeDev &&\r\n                            props.data.children.map((item) => {  \r\n                                switch(item.type) { \r\n                                    case 'heading' :  \r\n                                        return ( \r\n                                            <HeadingCreator \r\n                                                key={item.id} \r\n                                                item={item} \r\n                                            />\r\n                                        ) \r\n                                    case 'paragraph' :  \r\n                                        return (\r\n                                            <ParagraphCreator\r\n                                                key={item.id} \r\n                                                item={item} \r\n                                            />\r\n                                        ) \r\n                                    case 'paragraphImage' :  \r\n                                        return (\r\n                                            <ParagraphImageCreator\r\n                                                key={item.id} \r\n                                                item={item} \r\n                                            />\r\n                                        ) \r\n                                    default: break;\r\n                                }  \r\n                                return null\r\n                            })\r\n                        }\r\n                    </Container>\r\n                }\r\n                {  \r\n                    !props.settings.innerContainer && \r\n                    <React.Fragment>\r\n                        { \r\n                            modeDev && \r\n                            props.data.children.map((item) => {   \r\n                                switch(item.type) { \r\n                                    case 'heading' :  \r\n                                        return ( \r\n                                            <HeadingCreator \r\n                                                key={item.id} \r\n                                                item={item}\r\n                                                reSaveChildren={props.reSaveChildren}\r\n                                                removeItem={props.removeItem}\r\n                                            />\r\n                                        ) \r\n                                    case 'paragraph' :  \r\n                                        return (\r\n                                            <ParagraphCreator\r\n                                                key={item.id} \r\n                                                item={item}\r\n                                                reSaveChildren={props.reSaveChildren}\r\n                                                removeItem={props.removeItem}\r\n                                            />\r\n                                        ) \r\n                                    case 'paragraphImage' :  \r\n                                        return (\r\n                                            <ParagraphImageCreator\r\n                                                key={item.id} \r\n                                                item={item}\r\n                                                reSaveChildren={props.reSaveChildren}\r\n                                                removeItem={props.removeItem}\r\n                                            />\r\n                                        ) \r\n                                    default: break;\r\n                                }  \r\n                                return null\r\n                            })\r\n                        }\r\n                        {   !modeDev &&\r\n                            props.data.children.map((item) => {  \r\n                                switch(item.type) { \r\n                                    case 'heading' :  \r\n                                        return ( \r\n                                            <HeadingCreator \r\n                                                key={item.id} \r\n                                                item={item} \r\n                                            />\r\n                                        ) \r\n                                    case 'paragraph' :  \r\n                                        return (\r\n                                            <ParagraphCreator\r\n                                                key={item.id} \r\n                                                item={item} \r\n                                            />\r\n                                        ) \r\n                                    case 'paragraphImage' :  \r\n                                        return (\r\n                                            <ParagraphImageCreator\r\n                                                key={item.id} \r\n                                                item={item} \r\n                                            />\r\n                                        ) \r\n                                    default: break;\r\n                                }  \r\n                                return null\r\n                            })\r\n                        }\r\n                    </React.Fragment>\r\n                }\r\n                \r\n            </Container> \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default DumbComponent\r\n","import React from 'react' \r\nimport uuid from 'react-uuid' \r\nimport { TwitterPicker } from 'react-color';\r\n \r\nimport DumbComponent from './DumbComponent' \r\n  \r\nimport { \r\n    MenuItem,   FormGroup,  Button,\r\n    Box,  Menu,   Drawer,  Tooltip,\r\n    TextField, FormControl, InputLabel,\r\n    Select,  Container, Typography, ButtonGroup, IconButton\r\n} from '@material-ui/core'\r\n\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport ExpandLessOutlinedIcon from '@material-ui/icons/ExpandLessOutlined';\r\nimport ExpandMoreOutlinedIcon from '@material-ui/icons/ExpandMoreOutlined';\r\n \r\nimport libraryHeading from '../heading/headingLayout.json'\r\nimport libraryParagraph from '../paragraph/paragraphLayout.json'\r\nimport libraryParagraphImage from '../paragraphImage/paragraphImageLayout.json'\r\n \r\n\r\nimport { makeStyles } from '@material-ui/core/styles';  \r\nimport { InfoOutlined } from '@material-ui/icons';\r\n\r\nfunction ContainerElement(props) { \r\n    console.log('styled Container work')\r\n  \r\n    const [padding, setPadding] = React.useState({ \r\n        top:  props.data.classes.paddingTop ,  \r\n        bottom: props.data.classes.paddingBottom ,  \r\n    })\r\n    const [margin, setMargin] = React.useState({\r\n        top:  props.data.classes.marginTop ,  \r\n        bottom: props.data.classes.marginBottom ,  \r\n    })\r\n    \r\n    const [display, setDisplay] = React.useState(props.data.classes.display || 'flex')\r\n    const [flexDirection, setFlexDirection] = React.useState(props.data.classes.flexDirection || 'column')\r\n\r\n    const [color, setColor] = React.useState(props.data.classes.color || 'inherit')\r\n    const [backgroundColor, setBackgroundColor] = React.useState(props.data.classes.backgroundColor ||  'transparent')\r\n    const [shadow, setShadow] = React.useState(props.data.classes.boxShadow || 'none')\r\n\r\n    const [borderColor, setBorderColor] = React.useState(props.data.classes.borderColor ||  'transperent')\r\n    const [borderStyle, setBorderStyle] = React.useState(props.data.classes.borderStyle ||  'solid')\r\n    const [borderWidth, setBorderWidth] = React.useState(props.data.classes.borderWidth ||  '0px')\r\n    const [borderRadius, setBorderRadius] = React.useState(props.data.classes.borderRadius ||  '0px')\r\n\r\n    const [isDisableBtn, setIsDisableBtn] = React.useState(true) \r\n \r\n    const [children, setChildren] = React.useState(props.data.children) \r\n\r\n    const [settingGutter, setSettingGutter] = React.useState(props.data.disableGutters)\r\n    const [settingFixed, setSettingFixed] = React.useState(props.data.fixed)\r\n    const [settingMaxWidth, setSettingMaxWidth] = React.useState(props.data.maxWidth)\r\n    const [settingInnerContainer, setSettingInnerContainer] = React.useState(props.data.innerContainer || false )\r\n\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [open, setOpen] = React.useState(false)\r\n     \r\n\r\n    const propsSettings = {\r\n        maxWidth: settingMaxWidth,\r\n        disableGutters: settingGutter,\r\n        fixed: settingFixed,\r\n        innerContainer: settingInnerContainer\r\n    }\r\n\r\n\r\n    const useStyles = makeStyles((theme) => {\r\n         \r\n        console.log(theme)\r\n        return ( {  \r\n            btnDrawerStyle : {\r\n                position: 'absolute', \r\n                top: 0, \r\n                left: 0, \r\n                zIndex: 10,   \r\n                minWidth: 50, \r\n                opacity: 0, \r\n                transition: `${theme.transitions.duration.shorter}ms ${theme.transitions.easing.easeIn} opacity`,\r\n            }, \r\n            containerWrapper: {\r\n                position: 'relative', \r\n                outline: \"1px solid #ffffff00\", \r\n                transition: `${theme.transitions.duration.shorter}ms ${theme.transitions.easing.easeIn} outline`,\r\n                '&:hover' : {\r\n                    outlineColor: `${theme.palette.error.main}`,\r\n                    '& $mtView' : { \r\n                        opacity: 1\r\n                    },\r\n                    '& $mbView' : { \r\n                        opacity: 1\r\n                    }, \r\n                    '& $btnDrawerStyle': {\r\n                        opacity: 1\r\n                    }\r\n                },   \r\n               \r\n            },\r\n            mtView: {  \r\n                position: 'absolute', \r\n                top: `-${margin.top}px`, \r\n                left: 0, \r\n                right: 0,\r\n                zIndex: 10, \r\n                backgroundColor: '#fff7003d',\r\n                height: `${margin.top}px`, \r\n                opacity: 0,\r\n                transition: `${theme.transitions.duration.shortest}ms ${theme.transitions.easing.easeIn} opacity`\r\n            },\r\n            mbView: {  \r\n                position: 'absolute', \r\n                bottom: `-${margin.bottom}px`, \r\n                left: 0, \r\n                right: 0,\r\n                zIndex: 10, \r\n                backgroundColor: '#fff7003d',\r\n                height: `${margin.bottom}px`, \r\n                opacity: 0,\r\n                transition: `180ms ${theme.transitions.easing.easeIn} opacity`\r\n            },\r\n            settingsItem: {\r\n                marginRight: 5, \r\n                marginBottom: 10, \r\n                flexGrow: 1\r\n            },\r\n            inputNumber: {\r\n                flexGrow: 1, \r\n                margin: 5, \r\n                width: \"100%\", \r\n                maxWidth: '50%'\r\n            }, \r\n            inputGroup: {\r\n                border: \"1px solid #f5f5f5\", \r\n                padding: 3, \r\n                inputNumber: { \r\n                    maxWidth: \"100%\"\r\n    \r\n                }\r\n            },\r\n            btnSave: { \r\n                position: 'sticky', \r\n                zIndex: theme.zIndex.tooltip,\r\n                bottom: 0, \r\n                left: 20, \r\n                right: 0,\r\n                height: 80, \r\n                backgroundColor: '#fff', \r\n                \r\n                '&>button': {\r\n                    marginTop: 20, \r\n                    marginBottom: 30, \r\n                    opacity: 1,  \r\n                    paddingLeft: 40, \r\n                    paddingRight: 40\r\n                }\r\n            }\r\n            \r\n        } )\r\n    })\r\n    \r\n    const classes = useStyles();\r\n    \r\n    const myClassName = {  \r\n        paddingTop: padding.top,\r\n        paddingBottom: padding.bottom, \r\n        marginTop: margin.top,\r\n        marginBottom: margin.bottom, \r\n        color: color,\r\n        backgroundColor: backgroundColor, \r\n        borderColor: borderColor,\r\n        borderStyle: borderStyle,\r\n        borderRadius: borderRadius,\r\n        borderWidth: borderWidth,\r\n        boxShadow: shadow, \r\n        display: display, \r\n        flexDirection: flexDirection\r\n    } \r\n  \r\n\r\n    const handlePadding = (e, direction) => {  \r\n        let newPadding = Object.assign({}, padding)\r\n        newPadding[direction] = Number(e.target.value)\r\n        setPadding(newPadding)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n    const handleMargin = (e, direction) => {  \r\n        let newMargin = Object.assign({}, margin)\r\n        newMargin[direction] = Number(e.target.value)\r\n        setMargin(newMargin)  \r\n\r\n        setIsDisableBtn(false);\r\n    }\r\n     \r\n    const toggleDrawer =  () => {  \r\n        setOpen(!open)\r\n    }; \r\n\r\n    const handleHeadingMenuClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleHeadingMenuClose = (variant, type) => {\r\n        setAnchorEl(null); \r\n        addHeading(variant, type)\r\n    }; \r\n  \r\n    const addHeading = async (variant, type) => { \r\n          \r\n        let newChildren = children.slice()\r\n\r\n        let newItem = {}\r\n        \r\n\r\n        switch(type) { \r\n            case 'heading' :  \r\n                newItem = Object.assign({}, libraryHeading) \r\n                newItem.id = uuid()\r\n                newItem.variant = newItem.variant[variant] \r\n                newItem.text += \" - \" + newItem.variant \r\n                break;\r\n            case 'paragraph' :  \r\n                console.log('paragraph')\r\n                newItem = Object.assign({}, libraryParagraph)\r\n                newItem.id = uuid() \r\n                break;\r\n            case 'paragraphImage' :  \r\n                console.log('paragraphImage')\r\n                newItem = Object.assign({}, libraryParagraphImage)\r\n                newItem.id = uuid() \r\n                break;\r\n            default: break;\r\n        }  \r\n\r\n        newChildren.push(newItem) \r\n  \r\n        setChildren(newChildren) \r\n \r\n        // save in firestore\r\n        props.reSaveContainer(props.data.id, newChildren)\r\n \r\n    } \r\n\r\n    const reSaveClassesSettings = () => {    \r\n        props.reSaveContainerStyleSettings(props.data.id, myClassName, propsSettings)\r\n        setIsDisableBtn(true); \r\n    } \r\n    \r\n    const reSaveChildren = async (id, data) => {   \r\n        let slicedChild = children.slice()\r\n        slicedChild.forEach((item) => {\r\n            if(item.id === id) {\r\n                for( let key in item) { \r\n                    item[key] = data[key]\r\n                } \r\n            }\r\n        }) \r\n        // console.log(slicedChild)\r\n        // save in firestore\r\n        props.reSaveContainer(props.data.id, slicedChild)\r\n \r\n    }\r\n\r\n    const removeItem = async (id) => {\r\n        let conf = window.confirm(\"Delete ?\");\r\n \r\n        if(conf) {\r\n            \r\n            let filtered = children.filter((item) => (item.id !== id))  \r\n            setChildren(filtered) \r\n            \r\n            // save in firestore\r\n            props.reSaveContainer(props.data.id, filtered) \r\n        }\r\n    }\r\n\r\n    const removeContainer = () => { \r\n        props.removeContainer(props.data.id)\r\n    }\r\n\r\n    const swapContainer = (direction, id) => { \r\n        props.swapContainer(direction, id)\r\n    }\r\n    \r\n\r\n    return (\r\n        <Container \r\n            maxWidth={propsSettings.maxWidth} \r\n            fixed={propsSettings.fixed} \r\n            disableGutters={true}\r\n            className={classes.containerWrapper} \r\n        >    \r\n            <div className={classes.mtView}></div>\r\n            <div className={classes.mbView}></div>\r\n            <Box style={{position: 'relative'}} > \r\n                {/*  DrawerContainer */}\r\n                <Box className={classes.btnDrawerStyle}>\r\n                    \r\n                    <ButtonGroup\r\n                        orientation=\"vertical\"\r\n                        color=\"primary\"\r\n                        aria-label=\"vertical contained primary button group\"\r\n                        variant=\"contained\"\r\n                    > \r\n                        <Tooltip title='Container Settings' placement='right'>\r\n                            <Button  \r\n                                onClick={toggleDrawer} \r\n                                size='medium'\r\n                                variant='contained'\r\n                                color='primary'\r\n                                \r\n                            >  \r\n                                <SettingsIcon style={{ color: '#fff' }} fontSize='small'/>\r\n                            </Button>\r\n                        </Tooltip>\r\n                        <Tooltip title='Get Up' placement='right'>\r\n                            <Button   \r\n                                onClick={() => { swapContainer('up', props.data.id) }}\r\n                                size='medium'\r\n                                variant='contained'\r\n                                color='primary' \r\n                            >  \r\n                                <ExpandLessOutlinedIcon style={{ color: '#fff' }} fontSize='small'/>   \r\n                            </Button>\r\n                        </Tooltip> \r\n                        <Tooltip title='Get Down' placement='right'>\r\n                            <Button   \r\n                                onClick={() => { swapContainer('down', props.data.id) }}\r\n                                size='medium'\r\n                                variant='contained'\r\n                                color='primary' \r\n                            >     \r\n                                <ExpandMoreOutlinedIcon style={{ color: '#fff' }} fontSize='small'/>\r\n                            </Button>\r\n                        </Tooltip> \r\n \r\n                    </ButtonGroup>\r\n                </Box>\r\n                     \r\n                    <Drawer anchor={'left'} open={open} onClose={toggleDrawer}>\r\n                         \r\n                            <Box  \r\n                                pt={3}\r\n                                pb={10} \r\n                                px={2}\r\n                                maxWidth={600}    \r\n                                position={'relative'}\r\n                            > \r\n                                <FormGroup> \r\n                                    <Typography   variant={'h6'} gutterBottom  >\r\n                                        Container actions \r\n                                    </Typography>\r\n                                   <Box mb={2}> \r\n                                        {/* <Button\r\n                                            // onClick={addContainer}\r\n                                            variant='outlined'\r\n                                            color=\"primary\" \r\n                                            disabled={true}\r\n                                            \r\n                                        >\r\n                                            Add Container\r\n                                        </Button>   */}\r\n                                        <Button\r\n                                            onClick={removeContainer}\r\n                                            variant='outlined'\r\n                                            color=\"secondary\" \r\n                                            // disabled={true}\r\n                                        >\r\n                                            Remove Container\r\n                                        </Button> \r\n                                   </Box>\r\n                                </FormGroup>\r\n                                \r\n                                <FormGroup > \r\n                                    <Typography  variant={'h6'} gutterBottom  >\r\n                                        Add item from libs\r\n                                    </Typography>\r\n                                    <Box>\r\n                                            <Box mr={2} mb={1} clone={true} >\r\n                                                <Button \r\n                                                    aria-controls=\"heading-menu\" \r\n                                                    aria-haspopup=\"true\" \r\n                                                    onClick={handleHeadingMenuClick}\r\n                                                    variant='outlined'\r\n                                                    color=\"primary\"\r\n                                                >\r\n                                                    Heading\r\n                                                </Button>\r\n                                            </Box>\r\n                                            \r\n                                            <Menu\r\n                                                id=\"heading-menu\"\r\n                                                anchorEl={anchorEl}\r\n                                                keepMounted\r\n                                                open={Boolean(anchorEl)}\r\n                                                onClose={handleHeadingMenuClose}\r\n                                            >\r\n                                                <MenuItem value={0} onClick={(e) => {handleHeadingMenuClose(e.target.value, \"heading\")}} >Heading h1</MenuItem>\r\n                                                <MenuItem value={1} onClick={(e) => {handleHeadingMenuClose(e.target.value, \"heading\")}} >Heading h2</MenuItem>\r\n                                                <MenuItem value={2} onClick={(e) => {handleHeadingMenuClose(e.target.value, \"heading\")}} >Heading h3</MenuItem>\r\n                                                <MenuItem value={3} onClick={(e) => {handleHeadingMenuClose(e.target.value, \"heading\")}} >Heading h4</MenuItem>\r\n                                                <MenuItem value={4} onClick={(e) => {handleHeadingMenuClose(e.target.value, \"heading\")}} >Heading h5</MenuItem>\r\n                                                <MenuItem value={5} onClick={(e) => {handleHeadingMenuClose(e.target.value, \"heading\")}} >Heading h6</MenuItem> \r\n                                            </Menu>\r\n\r\n                                            <Box mr={2} mb={1} clone={true} >\r\n                                                <Button\r\n                                                    onClick={() => {addHeading('p', 'paragraph')}}\r\n                                                    variant='outlined'\r\n                                                    color=\"primary\"\r\n                                                >\r\n                                                    Paragraph\r\n                                                </Button>\r\n                                            </Box>\r\n                                            <Box mr={2} mb={1} clone={true} >\r\n                                                <Button\r\n                                                    onClick={() => {addHeading('p', 'paragraphImage')}}\r\n                                                    variant='outlined'\r\n                                                    color=\"primary\" \r\n                                                >\r\n                                                    Paragraph-Image\r\n                                                </Button>\r\n                                            </Box> \r\n                                    </Box>\r\n\r\n                                </FormGroup>\r\n \r\n                                <Typography  variant={'h6'} gutterBottom  >\r\n                                    Settings \r\n                                </Typography>\r\n                                <FormGroup row>\r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.settingsItem}\r\n                                    >\r\n                                        <InputLabel id=\"dis-gutters-style-label\">Disable Gutters</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"dis-gutters-label\"\r\n                                            id=\"dis-gutters-style\"\r\n                                            value={settingGutter}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setSettingGutter(e.target.value) }}\r\n                                        >\r\n                                            <MenuItem value={false}>False</MenuItem>\r\n                                            <MenuItem value={true}>True</MenuItem> \r\n                                        </Select>\r\n                                    </FormControl>\r\n\r\n                                    \r\n\r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.settingsItem}\r\n                                    >\r\n                                        <InputLabel id=\"fixed-style-label\">Fixed</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"fixed-label\"\r\n                                            id=\"fixed-style\"\r\n                                            value={settingFixed}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setSettingFixed(e.target.value) }}\r\n                                        >\r\n                                            <MenuItem value={false}>False</MenuItem>\r\n                                            <MenuItem value={true}>True</MenuItem> \r\n                                        </Select>\r\n                                    </FormControl>  \r\n                                </FormGroup>\r\n                                \r\n                                <FormGroup row> \r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.settingsItem}\r\n                                    >\r\n                                        <InputLabel id=\"maxWidth-style-label\">Max-Width</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"maxWidth-label\"\r\n                                            id=\"maxWidth-style\"\r\n                                            value={settingMaxWidth}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setSettingMaxWidth(e.target.value) }}\r\n                                        >\r\n                                            <MenuItem value={false}>False</MenuItem>\r\n                                            <MenuItem value={'xl'}>xl - 1920 </MenuItem> \r\n                                            <MenuItem value={'lg'}>lg - 1280 </MenuItem> \r\n                                            <MenuItem value={'md'}>md - 960 </MenuItem> \r\n                                            <MenuItem value={'sm'}>sm - 600 </MenuItem> \r\n                                            <MenuItem value={'xs'}>xs - 0 </MenuItem> \r\n                                        </Select>\r\n                                    </FormControl>\r\n\r\n                                    <FormControl \r\n                                        variant='filled' \r\n                                        size='small'   \r\n                                        className={classes.settingsItem}\r\n                                    >\r\n                                        <InputLabel id=\"inner-container-style-label\">Inner Container</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"inner-container-label\"\r\n                                            id=\"inner-container-style\"\r\n                                            value={settingInnerContainer}\r\n                                            onChange={(e) => {setIsDisableBtn(false); setSettingInnerContainer(e.target.value) }}\r\n                                        >\r\n                                            <MenuItem value={false}>False</MenuItem>\r\n                                            <MenuItem value={true}>True</MenuItem> \r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </FormGroup>\r\n                                \r\n                                <Typography  variant={'h6'} gutterBottom  >\r\n                                    Styles \r\n                                </Typography>\r\n                                <React.Fragment>\r\n                                    {/* display */}\r\n                                    <Box className={classes.inputGroup}>\r\n\r\n                                        <Tooltip title=\"Для корректной работы margin у элементов внутри контейнера рекомендуется оставить display: flex, flexDirection: column\"  >\r\n                                            <IconButton>\r\n                                                <InfoOutlined/>\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                        <Box display=\"flex\" flexDirection=\"row\"  > \r\n                                            <FormControl \r\n                                                variant='filled' \r\n                                                size='small'   \r\n                                                className={classes.inputNumber}\r\n                                                fullWidth\r\n                                            >\r\n                                                <InputLabel id=\"display-style-label\">Display</InputLabel>\r\n                                                <Select\r\n                                                    labelId=\"display-style-label\"\r\n                                                    id=\"display-style\"\r\n                                                    value={display}\r\n                                                    onChange={(e) => {setIsDisableBtn(false); setDisplay(e.target.value) }}\r\n                                                >\r\n                                                    <MenuItem value={'block'}>Block</MenuItem>  \r\n                                                    <MenuItem value={'flex'}>Flex</MenuItem>  \r\n                                                </Select>\r\n                                            </FormControl>\r\n                                            {\r\n                                                display === 'flex' &&\r\n                                                <FormControl \r\n                                                    variant='filled' \r\n                                                    size='small'   \r\n                                                    className={classes.inputNumber}\r\n                                                    fullWidth\r\n                                                >\r\n                                                    <InputLabel id=\"direction-style-label\">Flex Direction</InputLabel>\r\n                                                    <Select\r\n                                                        labelId=\"direction-style-label\"\r\n                                                        id=\"direction-style\"\r\n                                                        value={flexDirection}\r\n                                                        onChange={(e) => {setIsDisableBtn(false); setFlexDirection(e.target.value) }}\r\n                                                    >\r\n                                                        <MenuItem value={'row'}>Row</MenuItem>  \r\n                                                        <MenuItem value={'column'}>Column</MenuItem>  \r\n                                                        <MenuItem value={'row-reverse'}>Row Reverse</MenuItem>  \r\n                                                        <MenuItem value={'column-reverse'}>Column Reverse</MenuItem>  \r\n                                                    </Select>\r\n                                                </FormControl>   \r\n                                            }\r\n                                        </Box>\r\n                                    </Box>\r\n                                    \r\n                                    {/* margin */}\r\n                                    <Box className={classes.inputGroup}>\r\n                                        <Box display=\"flex\" flexDirection=\"row\"  > \r\n                                            <TextField \r\n                                                className={classes.inputNumber}\r\n                                                type='number'\r\n                                                label=\"Margin Top\" \r\n                                                variant=\"filled\" \r\n                                                size='small'  \r\n                                                value={margin.top}\r\n                                                onChange={ (e) => { setIsDisableBtn(false); handleMargin(e, 'top');  } }     \r\n                                            />\r\n                                            <TextField \r\n                                                className={classes.inputNumber}\r\n                                                type='number'\r\n                                                label=\"Margin Bottom\" \r\n                                                variant=\"filled\" \r\n                                                size='small'  \r\n                                                value={margin.bottom}\r\n                                                onChange={ (e) => { setIsDisableBtn(false); handleMargin(e, 'bottom') } }     \r\n                                            />\r\n                                        </Box>\r\n                                    </Box>\r\n                                    \r\n                                    {/* padding */}\r\n                                    <Box className={classes.inputGroup}>\r\n                                        <Box display=\"flex\" flexDirection=\"row\" > \r\n                                            <TextField \r\n                                                className={classes.inputNumber}\r\n                                                type='number'\r\n                                                label=\"Padding Top\" \r\n                                                variant=\"filled\" \r\n                                                size='small'  \r\n                                                value={padding.top}\r\n                                                onChange={ (e) => { setIsDisableBtn(false); handlePadding(e, 'top') } }     \r\n                                            />\r\n                                            <TextField \r\n                                                className={classes.inputNumber}\r\n                                                type='number'\r\n                                                label=\"Padding Bottom\" \r\n                                                variant=\"filled\" \r\n                                                size='small'  \r\n                                                value={padding.bottom}\r\n                                                onChange={ (e) => {setIsDisableBtn(false); handlePadding(e, 'bottom') } }     \r\n                                            />\r\n                                        </Box>\r\n                                        \r\n\r\n                                    </Box>\r\n                                    \r\n                                    {/* bg-color */}\r\n                                    <Box className={classes.inputGroup} display=\"flex\" flexDirection=\"row\" > \r\n                                \r\n                                        <Box \r\n                                            className={classes.inputNumber}\r\n                                        >\r\n                                             <Typography  component={'h6'} gutterBottom  >\r\n                                                Background  \r\n                                            </Typography>\r\n                                            <TwitterPicker\r\n                                                width={'100%'}\r\n                                                triangle={'hide'}\r\n                                                colors={[   '#f44336', '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                                onChangeComplete={(newColor) => {\r\n                                                    setIsDisableBtn(false);\r\n                                                    setBackgroundColor(newColor.hex) \r\n                                                }}\r\n\r\n                                            /> \r\n                                        </Box> \r\n                                        <Box \r\n                                            className={classes.inputNumber}\r\n                                        >\r\n                                            <Typography component={'h6'} gutterBottom  >\r\n                                                Color text\r\n                                            </Typography>\r\n                                            <TwitterPicker\r\n                                                width={'100%'}\r\n                                                triangle={'hide'}\r\n                                                colors={[   '#f44336', '#4e36f4', '#36f477', 'rgb(244, 214, 54)']} \r\n                                                onChangeComplete={(newColor) => {\r\n                                                    setIsDisableBtn(false);\r\n                                                    setColor(newColor.hex) \r\n                                                }} \r\n                                            /> \r\n                                        </Box> \r\n                                      \r\n                                    </Box>\r\n                                    \r\n                                    {/* color */}\r\n                                    <Box className={classes.inputGroup} display=\"flex\" flexDirection=\"row\" > \r\n                                        <FormControl \r\n                                            variant='filled' \r\n                                            size='small'   \r\n                                            className={classes.inputNumber}\r\n                                        >\r\n                                            <InputLabel id=\"shadow-style-label\">Box Shadow</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"shadow-style-label\"\r\n                                                id=\"shadow-style\"\r\n                                                value={shadow}\r\n                                                onChange={(e) => {setIsDisableBtn(false); setShadow(e.target.value) }}\r\n                                            >\r\n                                                <MenuItem value={'none'}>None</MenuItem>\r\n                                                <MenuItem value={`0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),\r\n                                                0px 1px 5px 0px rgba(0,0,0,0.12)`}>Small</MenuItem>\r\n                                                <MenuItem value={`0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),\r\n                                                0px 3px 16px 2px rgba(0,0,0,0.12)`}>Medium</MenuItem>\r\n                                                <MenuItem value={`0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),\r\n                                                0px 9px 46px 8px rgba(0,0,0,0.12)`}>Large</MenuItem> \r\n                                            </Select>\r\n                                        </FormControl> \r\n                                        \r\n                                    </Box>\r\n                                     \r\n                                    {/* border */}\r\n                                    <Box className={classes.inputGroup}> \r\n                                        <Box display=\"flex\" flexDirection=\"row\" > \r\n                                            <TextField \r\n                                                    className={classes.inputNumber}\r\n                                                    type='color'\r\n                                                    label=\"Border Color\" \r\n                                                    variant=\"filled\" \r\n                                                    size='small'  \r\n                                                    value={borderColor}\r\n                                                    onChange={ (e) => { setIsDisableBtn(false);  setBorderColor(e.target.value)} }     \r\n                                            />\r\n                                            <TextField \r\n                                                    className={classes.inputNumber}\r\n                                                    type='number'\r\n                                                    label=\"Border Radius\" \r\n                                                    variant=\"filled\" \r\n                                                    size='small'  \r\n                                                    value={borderRadius}\r\n                                                    onChange={ (e) => { setIsDisableBtn(false);  setBorderRadius(Number(e.target.value)) } }     \r\n                                            />\r\n\r\n                                        </Box>\r\n                                        <Box display=\"flex\" flexDirection=\"row\" > \r\n\r\n                                        <TextField \r\n                                            className={classes.inputNumber}\r\n                                            type='number'\r\n                                            label=\"Border Width\" \r\n                                            variant=\"filled\" \r\n                                            size='small'  \r\n                                            value={borderWidth}\r\n                                            onChange={ (e) => { setIsDisableBtn(false);setBorderWidth(Number(e.target.value))} }     \r\n                                        />\r\n                                        <FormControl \r\n                                            variant='filled' \r\n                                            size='small'   \r\n                                            className={classes.inputNumber}\r\n                                        >\r\n                                            <InputLabel id=\"border-style-label\">Border Style</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"border-style-label\"\r\n                                                id=\"border-style\"\r\n                                                value={borderStyle}\r\n                                                onChange={(e) => {setIsDisableBtn(false); setBorderStyle(e.target.value) }}\r\n                                            >\r\n                                                <MenuItem value={'solid'}>Solid</MenuItem>\r\n                                                <MenuItem value={'dotted'}>Dotted</MenuItem>\r\n                                                <MenuItem value={'dashed'}>Dashed</MenuItem>\r\n                                                <MenuItem value={'double'}>Double</MenuItem>\r\n                                                <MenuItem value={'groove'}>Groove</MenuItem>\r\n                                                <MenuItem value={'inset'}>Inset</MenuItem>\r\n                                                <MenuItem value={'outset'}>Outset</MenuItem>\r\n                                                <MenuItem value={'ridge'}>Ridge</MenuItem>\r\n                                                <MenuItem value={'none'}>None</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Box>\r\n                                    </Box>\r\n\r\n                                    <Box  className={classes.btnSave}>\r\n                                        <Button\r\n                                            disabled={isDisableBtn}\r\n                                        \r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            size={'medium'} \r\n                                            onClick={reSaveClassesSettings}\r\n                                        >\r\n                                            Save\r\n                                        </Button> \r\n                                    </Box>\r\n                                   \r\n                                </React.Fragment> \r\n\r\n                            </Box> \r\n                    </Drawer>\r\n                {/*  DrawerContainer */} \r\n            </Box>                        \r\n                <DumbComponent\r\n                    reSaveChildren={reSaveChildren}\r\n                    removeItem={removeItem}\r\n                    data={props.data} \r\n                    classes={myClassName}\r\n                    settings={propsSettings}\r\n                />  \r\n           \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ContainerElement\r\n","import React from 'react' \r\n\r\nimport StyledComponent from \"./StyledComponent\"\r\nimport DumbComponent from \"./DumbComponent\"\r\n \r\nimport ModeContext from '../../../context/modeContext/ModeContext'\r\n\r\n \r\nfunction ElementCreator(props) {\r\n\r\n    const {modeDev} = React.useContext(ModeContext)   \r\n    \r\n    const propsSettings = {\r\n        maxWidth: props.data.maxWidth,\r\n        disableGutters: props.data.disableGutters,\r\n        fixed: props.data.fixed\r\n    }\r\n    \r\n    return (    \r\n        <React.Fragment>   \r\n            { \r\n                modeDev && \r\n                <StyledComponent   \r\n                    data={props.data} \r\n                    reSaveContainer={props.reSaveContainer}\r\n                    reSaveContainerStyleSettings={props.reSaveContainerStyleSettings}  \r\n                    removeContainer={props.removeContainer}    \r\n                    swapContainer={props.swapContainer}\r\n                />\r\n            }\r\n \r\n            {\r\n                !modeDev &&  \r\n                <DumbComponent \r\n                    data={props.data}  \r\n                    classes={props.data.classes}\r\n                    reSaveContainer={props.reSaveContainer} \r\n                    settings={propsSettings}\r\n                />\r\n            }\r\n        </React.Fragment> \r\n    )\r\n}\r\n\r\nexport default ElementCreator\r\n","import React from 'react'\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\n\r\nimport {  Box, Container  } from \"@material-ui/core\"; \r\n\r\nfunction SkeletonPage() {\r\n    return (\r\n        <Box mt={5} clone={true} >\r\n            <Container>\r\n              <Box >\r\n                <Skeleton \r\n                  variant='rect'\r\n                  height={60}\r\n                  animation='wave'\r\n                />\r\n              </Box>\r\n              <Box display='flex' alignItems='center'>\r\n                <Box mr={1}>\r\n                  <Skeleton\r\n                    width={30}\r\n                    height={30}\r\n                    variant='circle' \r\n                    animation='wave'\r\n                  />\r\n                </Box>\r\n                <Skeleton \r\n                  variant='text'  \r\n                  height={50}\r\n                  width='100%'\r\n                  animation='wave'\r\n                />\r\n              </Box>\r\n              <Box mb={2}>\r\n                <Skeleton \r\n                  variant='rect'\r\n                  height={150}\r\n                  animation='wave'\r\n                />\r\n              </Box>\r\n              <Skeleton \r\n                variant='rect'\r\n                height={80}\r\n                animation='wave'\r\n              />\r\n            </Container>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default SkeletonPage\r\n","import React from 'react' \r\nimport { useLocation } from 'react-router-dom';\r\nimport uuid from 'react-uuid' \r\n\r\nimport { Typography, Button, Box, CircularProgress } from \"@material-ui/core\"; \r\n\r\nimport { indigo } from '@material-ui/core/colors'\r\n  \r\nimport ContainerElement from '../library/container/ElementCreator' \r\nimport ContainerLayout from '../library/container/containerLayout.json' \r\nimport SkeletonPage from '../placeholders/SkeletonPage'\r\n \r\nimport firebase from '../../firebase/firebase'\r\n\r\nimport pageLayout from './pageLayout.json'\r\n\r\nimport ModeContext from '../../context/modeContext/ModeContext'\r\nimport LoadingContext from '../../context/loadingContext/LoadingContext'\r\n\r\nfunction SinglePage(props) {\r\n\r\n    const location = useLocation()\r\n\r\n    const pageSlug = props.slugForUpdate\r\n\r\n    const { modeDev } = React.useContext(ModeContext)\r\n    const { setIsLoading } = React.useContext(LoadingContext)\r\n  \r\n    const [data, setData] = React.useState({})\r\n    const [items, setItems] = React.useState([])\r\n  \r\n    const [isUpdate, setIsUpdate] = React.useState(true)\r\n    //  title\r\n    //  slug\r\n    //  id\r\n  \r\n    React.useEffect( () => { \r\n      setIsLoading(true)\r\n      fetchData()\r\n    }, [location])\r\n  \r\n    const fetchData = async () => {  \r\n       \r\n      const pageRef = firebase.db.collection(\"site1\").doc(pageSlug)\r\n      const doc = await pageRef.get();\r\n      \r\n      if (!doc.exists) {\r\n        console.log('No such document!'); \r\n\r\n        // задать шаблон страницы\r\n        let newPage = Object.assign({}, pageLayout)\r\n        newPage.id = uuid()\r\n        newPage.slug = pageSlug\r\n\r\n        await pageRef.set(newPage)\r\n\r\n        setData(newPage)  \r\n        setItems(newPage.items) \r\n        setIsUpdate(false)\r\n        setIsLoading(false)\r\n\r\n      } else {\r\n        console.log('Document data:', doc.data());\r\n        \r\n        setData(doc.data())  \r\n        setItems(doc.data().items)  \r\n        \r\n        setIsUpdate(false)\r\n        setIsLoading(false)\r\n      }\r\n   \r\n    }  \r\n    \r\n    const reSaveContainer = async (id, childrenContainer) => { \r\n   \r\n      let newData = Object.assign({}, data)\r\n      newData.items = items\r\n  \r\n      Object.keys(newData.items).map( (elem) => { \r\n        if(newData.items[elem].id === id) {\r\n            newData.items[elem].children = childrenContainer \r\n        }\r\n        return 0 \r\n      })\r\n   \r\n      setData(newData)\r\n      setItems(newData.items)\r\n      setIsUpdate(true)\r\n      setIsLoading(true)\r\n  \r\n      await firebase.db.collection(\"site1\").doc(pageSlug).update({\r\n        items: newData.items, \r\n      }).then(() => {\r\n        setIsUpdate(false)\r\n        setIsLoading(false)\r\n      }) \r\n    } \r\n    const reSaveContainerStyleSettings = async (id, classes, settings) => {  \r\n      let newData = Object.assign({}, data)\r\n        \r\n      Object.keys(newData.items).map( (elem) => { \r\n        if(newData.items[elem].id === id) {\r\n          newData.items[elem].classes = classes \r\n          newData.items[elem].disableGutters = settings.disableGutters \r\n          newData.items[elem].fixed = settings.fixed \r\n          newData.items[elem].maxWidth = settings.maxWidth \r\n          newData.items[elem].innerContainer = settings.innerContainer \r\n        }\r\n        return 0 \r\n      }) \r\n  \r\n      setData(newData)\r\n      setItems(newData.items) \r\n      setIsUpdate(true)\r\n      setIsLoading(true)\r\n  \r\n      await firebase.db.collection(\"site1\").doc(pageSlug).update({\r\n        items: newData.items\r\n      }).then(() => {\r\n        setIsUpdate(false)\r\n        setIsLoading(false)\r\n      }) \r\n    } \r\n   \r\n    const addContainer = async () => {   \r\n      let newData = Object.assign({}, data)\r\n      let newItems = items.slice()\r\n  \r\n      let newCont = Object.assign({}, ContainerLayout) \r\n      newCont.id = uuid()\r\n   \r\n      newItems.push(newCont) \r\n   \r\n      newData.items = newItems\r\n          \r\n      setData(newData)\r\n      setItems(newItems)\r\n      setIsUpdate(true)\r\n      setIsLoading(true)\r\n  \r\n      await firebase.db.collection(\"site1\").doc(pageSlug).update({\r\n        items: newItems\r\n      }).then(() => {\r\n        setIsUpdate(false)\r\n        setIsLoading(false)\r\n      });  \r\n    }\r\n  \r\n    const removeContainer = async (id) => {  \r\n      let newData = Object.assign({}, data)\r\n      const filtered = items.filter((item) => (item.id !== id))  \r\n  \r\n      newData.items = filtered\r\n          \r\n      setData(newData)\r\n      setItems(filtered) \r\n      setIsUpdate(true)\r\n      setIsLoading(true)\r\n       \r\n      await firebase.db.collection(\"site1\").doc(pageSlug).update({\r\n        items: filtered\r\n      }).then(() => {\r\n        setIsUpdate(false)\r\n        setIsLoading(false)\r\n      }); \r\n    }\r\n  \r\n    const swapContainer = async (direction, id) => { \r\n      let newData = Object.assign({}, data)\r\n      let newItems = items.slice()\r\n      let activeIndex   \r\n   \r\n      newItems.map( (item) => { \r\n        if(item.id === id) {\r\n          activeIndex = newItems.indexOf(item) \r\n        }\r\n        return 0 \r\n      }) \r\n   \r\n      if(direction === 'up' && activeIndex === 0) return  \r\n      if(direction === 'down' && activeIndex === newItems.length - 1 ) return\r\n      \r\n      if(direction === 'up') { \r\n        const movedItem = newItems[activeIndex]\r\n        const placeItem = newItems[activeIndex - 1]\r\n  \r\n        newItems[activeIndex] = placeItem\r\n        newItems[activeIndex - 1 ] = movedItem  \r\n      }\r\n      if(direction === 'down') {\r\n        const movedItem = newItems[activeIndex]\r\n        const placeItem = newItems[activeIndex + 1]\r\n  \r\n        newItems[activeIndex] = placeItem\r\n        newItems[activeIndex + 1 ] = movedItem  \r\n      }\r\n  \r\n      newData.items = newItems\r\n         \r\n      setItems(newItems)\r\n      setData(newData)\r\n      setIsUpdate(true)\r\n      setIsLoading(true)\r\n   \r\n  \r\n      await firebase.db.collection(\"site1\").doc(pageSlug).update({\r\n        items: newItems\r\n      }).then(() => {\r\n        setIsUpdate(false)\r\n        setIsLoading(false)\r\n      }) \r\n    }\r\n  \r\n    function renderContainers () {   \r\n      if(items.length > 0) {\r\n        return Object.keys(items).map( (key) => { \r\n          return ( \r\n           <ContainerElement \r\n             key={items[key].id} \r\n             data={items[key]} \r\n             reSaveContainer={reSaveContainer}\r\n             reSaveContainerStyleSettings={reSaveContainerStyleSettings} \r\n             removeContainer={removeContainer}\r\n             swapContainer={swapContainer}\r\n           /> \r\n         ) \r\n       })\r\n      }\r\n      else {\r\n        return ( \r\n          <SkeletonPage/> \r\n        ) \r\n      }\r\n      \r\n    } \r\n\r\n    return (\r\n        <React.Fragment> \r\n          { \r\n            modeDev &&  \r\n            <Box px={3} display='flex' flexWrap='wrap' style={{backgroundColor: indigo[50] }}> \r\n                  \r\n                  <Box m={1}>\r\n                    <Typography variant=\"h6\" >\r\n                      Page actions\r\n                    </Typography>\r\n                  </Box>\r\n\r\n                  <Box display=\"flex\" alignItems='center' mx={1} minWidth={22} >\r\n                    {\r\n                      isUpdate &&\r\n                      <CircularProgress size={22} thickness={5} /> \r\n                    } \r\n                  </Box>\r\n\r\n                  <Box m={1}>\r\n                    <Button color={'primary'} variant={'contained'} onClick={addContainer}>\r\n                        Add new container\r\n                    </Button> \r\n                  </Box>\r\n                  <Box m={1}>\r\n                    <Button color={'primary'} variant={'outlined'} disabled={true} >\r\n                        More settings\r\n                    </Button> \r\n                  </Box> \r\n            </Box>\r\n          }\r\n           \r\n          { \r\n            renderContainers()  \r\n          } \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default SinglePage\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom'\r\n\r\nimport LoadingProgress from '../components/placeholders/LoadingProgress'\r\nimport Header from '../components/header/Header'\r\nimport AdminHeader from '../components/header/AdminHeader'\r\n\r\nimport Home from '../components/Home'\r\nimport Login from '../components/Login'\r\nimport Error from '../components/Error'\r\nimport SinglePage from '../components/pages/SinglePage' \r\n\r\nimport CategoryContext from '../context/categoryContext/CategoryContext'\r\nimport LoadingContext from '../context/loadingContext/LoadingContext' \r\n\r\nfunction RouterComponent() {\r\n\r\n    const {categories} = React.useContext(CategoryContext) \r\n    const {isLoading} = React.useContext(LoadingContext) \r\n\r\n    return (\r\n        <Router basename=\"builder\"> \r\n            {\r\n                isLoading && \r\n                <LoadingProgress/>\r\n            }\r\n            {\r\n                categories.length > 0 &&\r\n                <React.Fragment>\r\n                    \r\n                    <AdminHeader/>\r\n                    <Header/>\r\n\r\n                    <Switch>\r\n                        { \r\n                            categories.map( category => \r\n                                <Route \r\n                                    key={category.id}\r\n                                    exact\r\n                                    path={`/${category.slug}`}\r\n                                    render={\r\n                                        (props) => {\r\n                                            if(category.slug === '/') { \r\n                                                return <Home/>\r\n                                            }\r\n                                            //if === concacts => return contacts .... \r\n                                            return <SinglePage {...props} slugForUpdate={category.slug} />\r\n                                        }\r\n                                    }\r\n                                /> \r\n                            )\r\n                        }\r\n                        { \r\n                            categories.map( category => (\r\n                                category.pages.length > 0 &&\r\n                                category.pages.map( page => \r\n                                    <Route \r\n                                        key={page.id}\r\n                                        exact\r\n                                        path={`/${category.slug}/${page.slug}`}\r\n                                        render = {\r\n                                            (props) => <SinglePage {...props} slugForUpdate={page.slug} />\r\n                                        }\r\n                                    />\r\n                                )\r\n                            ))\r\n                        }\r\n         \r\n                        <Route path='/login' render={ () => <Login/> } />\r\n\r\n                        <Route path='*' render={ () => <Error/> } />\r\n                         \r\n                    </Switch> \r\n                </React.Fragment>\r\n            } \r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default RouterComponent\r\n","import React from \"react\" \n\nimport CssBaseline from '@material-ui/core/CssBaseline'; \n\nimport ModeProvider from './context/modeContext/ModeProvider'\nimport CategoryProvider from './context/categoryContext/CategoryProvider'\nimport LoadingProvider from './context/loadingContext/LoadingProvider'\n \nimport RouterComponent from './Router/RouterComponent' \n  \nclass App extends React.Component {  \n  \n render() {\n    return (\n      <ModeProvider> \n        <CategoryProvider>\n          <LoadingProvider>\n            <div className=\"App\">  \n              <CssBaseline/>     \n              <RouterComponent/> \n            </div>\n          </LoadingProvider> \n        </CategoryProvider> \n      </ModeProvider>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom'; \nimport App from './App';\n\n// import \"./assets/style.scss\"\n\nimport reportWebVitals from './reportWebVitals'; \n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(); "],"sourceRoot":""}